
JerryRigIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013030  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a7b0  0801a7b0  00030034  2**0
                  CONTENTS
  4 .ARM          00000008  0801a7b0  0801a7b0  0002a7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a7b8  0801a7b8  00030034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a7b8  0801a7b8  0002a7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a7bc  0801a7bc  0002a7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0801a7c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000574c  20000034  0801a7f4  00030034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005780  0801a7f4  00035780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030034  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00030064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002392e  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004517  00000000  00000000  00053a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001978  00000000  00000000  00057f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012db  00000000  00000000  000598e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c776  00000000  00000000  0005abbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec35  00000000  00000000  00087331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119cdf  00000000  00000000  000a5f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c84  00000000  00000000  001bfc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001c68cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000042a4  00000000  00000000  001c694f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000c8  00000000  00000000  001cabf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007768 	.word	0x08007768

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	08007768 	.word	0x08007768

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  //first half of adc buffer is full
  in_buf_ptr = &adc_val[0];
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  out_buf_ptr = &dac_val[HALF_BUF_SIZE];// + HALF_BUF_SIZE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80004fa:	601a      	str	r2, [r3, #0]
  flag=1;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000573c 	.word	0x2000573c
 8000514:	2000073c 	.word	0x2000073c
 8000518:	20005740 	.word	0x20005740
 800051c:	2000373c 	.word	0x2000373c
 8000520:	20005744 	.word	0x20005744

08000524 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  //second half of adc buffer is full
  in_buf_ptr = &adc_val[HALF_BUF_SIZE];// + HALF_BUF_SIZE;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_ADC_ConvCpltCallback+0x28>)
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000530:	601a      	str	r2, [r3, #0]
  out_buf_ptr = &dac_val[0];
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_ADC_ConvCpltCallback+0x30>)
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <HAL_ADC_ConvCpltCallback+0x34>)
 8000536:	601a      	str	r2, [r3, #0]
  flag=1;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_ADC_ConvCpltCallback+0x38>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000573c 	.word	0x2000573c
 8000550:	2000173c 	.word	0x2000173c
 8000554:	20005740 	.word	0x20005740
 8000558:	2000273c 	.word	0x2000273c
 800055c:	20005744 	.word	0x20005744

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	arm_status status;
	float32_t maxValue;
	status = ARM_MATH_SUCCESS;
 8000566:	2300      	movs	r3, #0
 8000568:	71fb      	strb	r3, [r7, #7]
	status=arm_rfft_fast_init_f32(&varInstCfftF32,FFT_SIZE);
 800056a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056e:	481d      	ldr	r0, [pc, #116]	; (80005e4 <main+0x84>)
 8000570:	f005 feb2 	bl	80062d8 <arm_rfft_fast_init_f32>
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]
	/* Process the data through the CFFT/CIFFT module */
	arm_rfft_fast_f32(&varInstCfftF32, adc_val, outtest, 0);
 8000578:	2300      	movs	r3, #0
 800057a:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <main+0x88>)
 800057c:	491b      	ldr	r1, [pc, #108]	; (80005ec <main+0x8c>)
 800057e:	4819      	ldr	r0, [pc, #100]	; (80005e4 <main+0x84>)
 8000580:	f005 ff8e 	bl	80064a0 <arm_rfft_fast_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fd3b 	bl	8000ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f840 	bl	800060c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058c:	f000 f8a2 	bl	80006d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fa32 	bl	80009f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 fa0a 	bl	80009ac <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000598:	f000 f976 	bl	8000888 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800059c:	f000 f9d8 	bl	8000950 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005a0:	f000 f8c8 	bl	8000734 <MX_ADC1_Init>
  MX_DAC1_Init();
 80005a4:	f000 f93e 	bl	8000824 <MX_DAC1_Init>
  MX_TIM6_Init();
 80005a8:	f000 f99c 	bl	80008e4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80005ac:	4810      	ldr	r0, [pc, #64]	; (80005f0 <main+0x90>)
 80005ae:	f004 fc7b 	bl	8004ea8 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_val, FULL_BUF_SIZE);
 80005b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <main+0x8c>)
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <main+0x94>)
 80005ba:	f001 f8f5 	bl	80017a8 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_val, FULL_BUF_SIZE, DAC_ALIGN_12B_R);
 80005be:	2300      	movs	r3, #0
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005c6:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <main+0x98>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x9c>)
 80005cc:	f002 f8e2 	bl	8002794 <HAL_DAC_Start_DMA>

  arm_conv_f32(a, 5, b, 5, c);
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <main+0xa0>)
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2305      	movs	r3, #5
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <main+0xa4>)
 80005d8:	2105      	movs	r1, #5
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <main+0xa8>)
 80005dc:	f006 fb3e 	bl	8006c5c <arm_conv_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x80>
 80005e2:	bf00      	nop
 80005e4:	2000576c 	.word	0x2000576c
 80005e8:	2000473c 	.word	0x2000473c
 80005ec:	2000073c 	.word	0x2000073c
 80005f0:	200001e4 	.word	0x200001e4
 80005f4:	20000050 	.word	0x20000050
 80005f8:	2000273c 	.word	0x2000273c
 80005fc:	20000100 	.word	0x20000100
 8000600:	20005748 	.word	0x20005748
 8000604:	20000014 	.word	0x20000014
 8000608:	20000000 	.word	0x20000000

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 f878 	bl	8007710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f003 f853 	bl	80036dc <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 fa74 	bl	8000b28 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f003 f82e 	bl	80036a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xc4>)
 8000646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064a:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xc4>)
 800064c:	f023 0318 	bic.w	r3, r3, #24
 8000650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000654:	2314      	movs	r3, #20
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066c:	2301      	movs	r3, #1
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000674:	2347      	movs	r3, #71	; 0x47
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000680:	2306      	movs	r3, #6
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4618      	mov	r0, r3
 800068a:	f003 f89d 	bl	80037c8 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000694:	f000 fa48 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	2102      	movs	r1, #2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fca2 	bl	8003ffc <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006be:	f000 fa33 	bl	8000b28 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c2:	f004 f9bb 	bl	8004a3c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	; 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a4      	sub	sp, #144	; 0x90
 80006d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	228c      	movs	r2, #140	; 0x8c
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f007 f815 	bl	8007710 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80006e6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006f8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000702:	2318      	movs	r3, #24
 8000704:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000712:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000716:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fe92 	bl	8004444 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000726:	f000 f9ff 	bl	8000b28 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3790      	adds	r7, #144	; 0x90
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000758:	4a30      	ldr	r2, [pc, #192]	; (800081c <MX_ADC1_Init+0xe8>)
 800075a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800075c:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MX_ADC1_Init+0xe4>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000762:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_ADC1_Init+0xe4>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000776:	2204      	movs	r2, #4
 8000778:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_ADC1_Init+0xe4>)
 800077c:	2200      	movs	r2, #0
 800077e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000782:	2200      	movs	r2, #0
 8000784:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000788:	2201      	movs	r2, #1
 800078a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_ADC1_Init+0xe4>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000796:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_ADC1_Init+0xe4>)
 800079e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC1_Init+0xe4>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_ADC1_Init+0xe4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC1_Init+0xe4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	4817      	ldr	r0, [pc, #92]	; (8000818 <MX_ADC1_Init+0xe4>)
 80007bc:	f000 fea0 	bl	8001500 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007c6:	f000 f9af 	bl	8000b28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	4810      	ldr	r0, [pc, #64]	; (8000818 <MX_ADC1_Init+0xe4>)
 80007d6:	f001 fdf9 	bl	80023cc <HAL_ADCEx_MultiModeConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80007e0:	f000 f9a2 	bl	8000b28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_ADC1_Init+0xec>)
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e8:	2306      	movs	r3, #6
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f0:	237f      	movs	r3, #127	; 0x7f
 80007f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f4:	2304      	movs	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_ADC1_Init+0xe4>)
 8000802:	f001 f897 	bl	8001934 <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800080c:	f000 f98c 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000050 	.word	0x20000050
 800081c:	50040000 	.word	0x50040000
 8000820:	04300002 	.word	0x04300002

08000824 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2224      	movs	r2, #36	; 0x24
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f006 ff6d 	bl	8007710 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_DAC1_Init+0x5c>)
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_DAC1_Init+0x60>)
 800083a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800083c:	4810      	ldr	r0, [pc, #64]	; (8000880 <MX_DAC1_Init+0x5c>)
 800083e:	f001 ff86 	bl	800274e <HAL_DAC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000848:	f000 f96e 	bl	8000b28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000850:	2304      	movs	r3, #4
 8000852:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_DAC1_Init+0x5c>)
 8000868:	f002 f87e 	bl	8002968 <HAL_DAC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f959 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000100 	.word	0x20000100
 8000884:	40007400 	.word	0x40007400

08000888 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_LPUART1_UART_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_LPUART1_UART_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800089a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c6:	f004 fc79 	bl	80051bc <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f92a 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000015c 	.word	0x2000015c
 80008dc:	40008000 	.word	0x40008000
 80008e0:	00033324 	.word	0x00033324

080008e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_TIM6_Init+0x64>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_TIM6_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_TIM6_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_TIM6_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 400;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_TIM6_Init+0x64>)
 8000908:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800090c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_TIM6_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_TIM6_Init+0x64>)
 8000916:	f004 fa6f 	bl	8004df8 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000920:	f000 f902 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000924:	2320      	movs	r3, #32
 8000926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_TIM6_Init+0x64>)
 8000932:	f004 fbbb 	bl	80050ac <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800093c:	f000 f8f4 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200001e4 	.word	0x200001e4
 800094c:	40001000 	.word	0x40001000

08000950 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800095a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2206      	movs	r2, #6
 8000960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2202      	movs	r2, #2
 800096c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2201      	movs	r2, #1
 8000972:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2201      	movs	r2, #1
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2201      	movs	r2, #1
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	f002 fd3c 	bl	8003410 <HAL_PCD_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f8c3 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000230 	.word	0x20000230

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_DMA_Init+0x48>)
 80009b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <MX_DMA_Init+0x48>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6493      	str	r3, [r2, #72]	; 0x48
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_DMA_Init+0x48>)
 80009c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	200b      	movs	r0, #11
 80009d0:	f001 fe87 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d4:	200b      	movs	r0, #11
 80009d6:	f001 fea0 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	200d      	movs	r0, #13
 80009e0:	f001 fe7f 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009e4:	200d      	movs	r0, #13
 80009e6:	f001 fe98 	bl	800271a <HAL_NVIC_EnableIRQ>

}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	4b42      	ldr	r3, [pc, #264]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4a41      	ldr	r2, [pc, #260]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	4b3c      	ldr	r3, [pc, #240]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a3b      	ldr	r2, [pc, #236]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b39      	ldr	r3, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a35      	ldr	r2, [pc, #212]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <MX_GPIO_Init+0x120>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000a86:	f002 fe8f 	bl	80037a8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a90:	4822      	ldr	r0, [pc, #136]	; (8000b1c <MX_GPIO_Init+0x124>)
 8000a92:	f002 fca5 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	4821      	ldr	r0, [pc, #132]	; (8000b20 <MX_GPIO_Init+0x128>)
 8000a9c:	f002 fca0 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481b      	ldr	r0, [pc, #108]	; (8000b24 <MX_GPIO_Init+0x12c>)
 8000ab8:	f002 fb00 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000abc:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_GPIO_Init+0x124>)
 8000ad6:	f002 faf1 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ada:	2320      	movs	r3, #32
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <MX_GPIO_Init+0x128>)
 8000aee:	f002 fae5 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0x128>)
 8000b0a:	f002 fad7 	bl	80030bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48001800 	.word	0x48001800
 8000b24:	48000800 	.word	0x48000800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6613      	str	r3, [r2, #96]	; 0x60
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <HAL_ADC_MspInit+0xc8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d14e      	bne.n	8000c3c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <HAL_ADC_MspInit+0xcc>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a29      	ldr	r2, [pc, #164]	; (8000c48 <HAL_ADC_MspInit+0xcc>)
 8000ba4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_ADC_MspInit+0xcc>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_ADC_MspInit+0xcc>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <HAL_ADC_MspInit+0xcc>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <HAL_ADC_MspInit+0xcc>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	481a      	ldr	r0, [pc, #104]	; (8000c4c <HAL_ADC_MspInit+0xd0>)
 8000be2:	f002 fa6b 	bl	80030bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000be8:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <HAL_ADC_MspInit+0xd8>)
 8000bea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c12:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c16:	2220      	movs	r2, #32
 8000c18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c22:	f002 f853 	bl	8002ccc <HAL_DMA_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000c2c:	f7ff ff7c 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c34:	651a      	str	r2, [r3, #80]	; 0x50
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_ADC_MspInit+0xd4>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	50040000 	.word	0x50040000
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000800 	.word	0x48000800
 8000c50:	200000b8 	.word	0x200000b8
 8000c54:	40020008 	.word	0x40020008

08000c58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2b      	ldr	r2, [pc, #172]	; (8000d24 <HAL_DAC_MspInit+0xcc>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d14f      	bne.n	8000d1a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <HAL_DAC_MspInit+0xd0>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a2a      	ldr	r2, [pc, #168]	; (8000d28 <HAL_DAC_MspInit+0xd0>)
 8000c80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <HAL_DAC_MspInit+0xd0>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <HAL_DAC_MspInit+0xd0>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <HAL_DAC_MspInit+0xd0>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_DAC_MspInit+0xd0>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000caa:	2310      	movs	r3, #16
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f002 f9fc 	bl	80030bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_DAC_MspInit+0xd8>)
 8000cc8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000ccc:	2206      	movs	r2, #6
 8000cce:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000cf4:	2220      	movs	r2, #32
 8000cf6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000d00:	f001 ffe4 	bl	8002ccc <HAL_DMA_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000d0a:	f7ff ff0d 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <HAL_DAC_MspInit+0xd4>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40007400 	.word	0x40007400
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	20000114 	.word	0x20000114
 8000d30:	40020030 	.word	0x40020030

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0ac      	sub	sp, #176	; 0xb0
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	228c      	movs	r2, #140	; 0x8c
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f006 fcdb 	bl	8007710 <memset>
  if(huart->Instance==LPUART1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_UART_MspInit+0xb4>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d13d      	bne.n	8000de0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d64:	2320      	movs	r3, #32
 8000d66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fb67 	bl	8004444 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d7c:	f7ff fed4 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_MspInit+0xb8>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000db0:	f002 fcfa 	bl	80037a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000db4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_UART_MspInit+0xbc>)
 8000ddc:	f002 f96e 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	37b0      	adds	r7, #176	; 0xb0
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40008000 	.word	0x40008000
 8000dec:	40021000 	.word	0x40021000
 8000df0:	48001800 	.word	0x48001800

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x38>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10b      	bne.n	8000e1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e0c:	f043 0310 	orr.w	r3, r3, #16
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <HAL_TIM_Base_MspInit+0x3c>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40001000 	.word	0x40001000
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e54:	d154      	bne.n	8000f00 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e80:	230a      	movs	r3, #10
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f002 f915 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f002 f907 	bl	80030bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000eea:	f002 fc4d 	bl	8003788 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <HAL_PCD_MspInit+0xd4>)
 8000ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000efa:	e001      	b.n	8000f00 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000efc:	f002 fc44 	bl	8003788 <HAL_PWREx_EnableVddUSB>
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f000 f8a6 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA1_Channel1_IRQHandler+0x10>)
 8000f66:	f001 ffc9 	bl	8002efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000b8 	.word	0x200000b8

08000f74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <DMA1_Channel3_IRQHandler+0x10>)
 8000f7a:	f001 ffbf 	bl	8002efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000114 	.word	0x20000114

08000f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb0:	f7ff ffea 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopForever+0xe>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopForever+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fda:	f006 fba1 	bl	8007720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fde:	f7ff fabf 	bl	8000560 <main>

08000fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe2:	e7fe      	b.n	8000fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000ff0:	0801a7c0 	.word	0x0801a7c0
  ldr r2, =_sbss
 8000ff4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000ff8:	20005780 	.word	0x20005780

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>

08000ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f001 fb5f 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f80e 	bl	8001030 <HAL_InitTick>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	e001      	b.n	8001024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001020:	f7ff fd88 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001024:	79fb      	ldrb	r3, [r7, #7]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_InitTick+0x6c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d023      	beq.n	800108c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_InitTick+0x70>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_InitTick+0x6c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fb6b 	bl	8002736 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10f      	bne.n	8001086 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d809      	bhi.n	8001080 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f001 fb35 	bl	80026e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_InitTick+0x74>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e007      	b.n	8001090 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e004      	b.n	8001090 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e001      	b.n	8001090 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000030 	.word	0x20000030
 80010a0:	20000028 	.word	0x20000028
 80010a4:	2000002c 	.word	0x2000002c

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000030 	.word	0x20000030
 80010cc:	2000577c 	.word	0x2000577c

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000577c 	.word	0x2000577c

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000030 	.word	0x20000030

08001130 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	609a      	str	r2, [r3, #8]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3360      	adds	r3, #96	; 0x60
 80011aa:	461a      	mov	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <LL_ADC_SetOffset+0x44>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	4313      	orrs	r3, r2
 80011c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011d0:	bf00      	nop
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	03fff000 	.word	0x03fff000

080011e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3360      	adds	r3, #96	; 0x60
 80011ee:	461a      	mov	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3360      	adds	r3, #96	; 0x60
 800121c:	461a      	mov	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	615a      	str	r2, [r3, #20]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800128e:	b480      	push	{r7}
 8001290:	b087      	sub	sp, #28
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3330      	adds	r3, #48	; 0x30
 800129e:	461a      	mov	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	4413      	add	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	211f      	movs	r1, #31
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0e9b      	lsrs	r3, r3, #26
 80012c6:	f003 011f 	and.w	r1, r3, #31
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	431a      	orrs	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b087      	sub	sp, #28
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3314      	adds	r3, #20
 80012f6:	461a      	mov	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	0e5b      	lsrs	r3, r3, #25
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	4413      	add	r3, r2
 8001304:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	0d1b      	lsrs	r3, r3, #20
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	2107      	movs	r1, #7
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	0d1b      	lsrs	r3, r3, #20
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	431a      	orrs	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001354:	43db      	mvns	r3, r3
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0318 	and.w	r3, r3, #24
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001360:	40d9      	lsrs	r1, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	400b      	ands	r3, r1
 8001366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136a:	431a      	orrs	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	0007ffff 	.word	0x0007ffff

08001384 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 031f 	and.w	r3, r3, #31
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6093      	str	r3, [r2, #8]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013d8:	d101      	bne.n	80013de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001400:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001428:	d101      	bne.n	800142e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800144c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <LL_ADC_IsEnabled+0x18>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <LL_ADC_IsEnabled+0x1a>
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800149a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800149e:	f043 0204 	orr.w	r2, r3, #4
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d101      	bne.n	80014ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d101      	bne.n	80014f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e133      	b.n	8001782 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fb27 	bl	8000b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff3f 	bl	80013c4 <LL_ADC_IsDeepPowerDownEnabled>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff25 	bl	80013a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff5a 	bl	8001414 <LL_ADC_IsInternalRegulatorEnabled>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d115      	bne.n	8001592 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff3e 	bl	80013ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001570:	4b86      	ldr	r3, [pc, #536]	; (800178c <HAL_ADC_Init+0x28c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	4a86      	ldr	r2, [pc, #536]	; (8001790 <HAL_ADC_Init+0x290>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	099b      	lsrs	r3, r3, #6
 800157e:	3301      	adds	r3, #1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001584:	e002      	b.n	800158c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3b01      	subs	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff3c 	bl	8001414 <LL_ADC_IsInternalRegulatorEnabled>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10d      	bne.n	80015be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f043 0210 	orr.w	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff75 	bl	80014b2 <LL_ADC_REG_IsConversionOngoing>
 80015c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 80cc 	bne.w	8001770 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 80c8 	bne.w	8001770 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015e8:	f043 0202 	orr.w	r2, r3, #2
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff35 	bl	8001464 <LL_ADC_IsEnabled>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d115      	bne.n	800162c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001600:	4864      	ldr	r0, [pc, #400]	; (8001794 <HAL_ADC_Init+0x294>)
 8001602:	f7ff ff2f 	bl	8001464 <LL_ADC_IsEnabled>
 8001606:	4604      	mov	r4, r0
 8001608:	4863      	ldr	r0, [pc, #396]	; (8001798 <HAL_ADC_Init+0x298>)
 800160a:	f7ff ff2b 	bl	8001464 <LL_ADC_IsEnabled>
 800160e:	4603      	mov	r3, r0
 8001610:	431c      	orrs	r4, r3
 8001612:	4862      	ldr	r0, [pc, #392]	; (800179c <HAL_ADC_Init+0x29c>)
 8001614:	f7ff ff26 	bl	8001464 <LL_ADC_IsEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	4323      	orrs	r3, r4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4619      	mov	r1, r3
 8001626:	485e      	ldr	r0, [pc, #376]	; (80017a0 <HAL_ADC_Init+0x2a0>)
 8001628:	f7ff fd82 	bl	8001130 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e5b      	ldrb	r3, [r3, #25]
 8001630:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001636:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800163c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001642:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d106      	bne.n	8001668 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	3b01      	subs	r3, #1
 8001660:	045b      	lsls	r3, r3, #17
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_ADC_Init+0x2a4>)
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	69b9      	ldr	r1, [r7, #24]
 8001694:	430b      	orrs	r3, r1
 8001696:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff1b 	bl	80014d8 <LL_ADC_INJ_IsConversionOngoing>
 80016a2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d140      	bne.n	800172c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d13d      	bne.n	800172c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
 80016b8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ba:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d2:	f023 0306 	bic.w	r3, r3, #6
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	430b      	orrs	r3, r1
 80016de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d118      	bne.n	800171c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001700:	4311      	orrs	r1, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800170c:	430a      	orrs	r2, r1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0201 	orr.w	r2, r2, #1
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	e007      	b.n	800172c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0201 	bic.w	r2, r2, #1
 800172a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10c      	bne.n	800174e <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f023 010f 	bic.w	r1, r3, #15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
 800174c:	e007      	b.n	800175e <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020f 	bic.w	r2, r2, #15
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001762:	f023 0303 	bic.w	r3, r3, #3
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	659a      	str	r2, [r3, #88]	; 0x58
 800176e:	e007      	b.n	8001780 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001780:	7ffb      	ldrb	r3, [r7, #31]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	20000028 	.word	0x20000028
 8001790:	053e2d63 	.word	0x053e2d63
 8001794:	50040000 	.word	0x50040000
 8001798:	50040100 	.word	0x50040100
 800179c:	50040200 	.word	0x50040200
 80017a0:	50040300 	.word	0x50040300
 80017a4:	fff0c007 	.word	0xfff0c007

080017a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b4:	4853      	ldr	r0, [pc, #332]	; (8001904 <HAL_ADC_Start_DMA+0x15c>)
 80017b6:	f7ff fde5 	bl	8001384 <LL_ADC_GetMultimode>
 80017ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe76 	bl	80014b2 <LL_ADC_REG_IsConversionOngoing>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 8093 	bne.w	80018f4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_Start_DMA+0x34>
 80017d8:	2302      	movs	r3, #2
 80017da:	e08e      	b.n	80018fa <HAL_ADC_Start_DMA+0x152>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a47      	ldr	r2, [pc, #284]	; (8001908 <HAL_ADC_Start_DMA+0x160>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d008      	beq.n	8001800 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d002      	beq.n	8001800 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d172      	bne.n	80018e6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fca3 	bl	800214c <ADC_Enable>
 8001806:	4603      	mov	r3, r0
 8001808:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d165      	bne.n	80018dc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a38      	ldr	r2, [pc, #224]	; (800190c <HAL_ADC_Start_DMA+0x164>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d002      	beq.n	8001834 <HAL_ADC_Start_DMA+0x8c>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e000      	b.n	8001836 <HAL_ADC_Start_DMA+0x8e>
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_ADC_Start_DMA+0x168>)
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	4293      	cmp	r3, r2
 800183c:	d002      	beq.n	8001844 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	f023 0206 	bic.w	r2, r3, #6
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	65da      	str	r2, [r3, #92]	; 0x5c
 8001868:	e002      	b.n	8001870 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <HAL_ADC_Start_DMA+0x16c>)
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187c:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_ADC_Start_DMA+0x170>)
 800187e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001884:	4a25      	ldr	r2, [pc, #148]	; (800191c <HAL_ADC_Start_DMA+0x174>)
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	221c      	movs	r2, #28
 800188e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0210 	orr.w	r2, r2, #16
 80018a6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3340      	adds	r3, #64	; 0x40
 80018c2:	4619      	mov	r1, r3
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f001 fab8 	bl	8002e3c <HAL_DMA_Start_IT>
 80018cc:	4603      	mov	r3, r0
 80018ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fdd8 	bl	800148a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80018da:	e00d      	b.n	80018f8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 80018e4:	e008      	b.n	80018f8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80018f2:	e001      	b.n	80018f8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
 80018f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	50040300 	.word	0x50040300
 8001908:	50040200 	.word	0x50040200
 800190c:	50040100 	.word	0x50040100
 8001910:	50040000 	.word	0x50040000
 8001914:	08002259 	.word	0x08002259
 8001918:	08002331 	.word	0x08002331
 800191c:	0800234d 	.word	0x0800234d

08001920 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0b6      	sub	sp, #216	; 0xd8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x22>
 8001952:	2302      	movs	r3, #2
 8001954:	e3e3      	b.n	800211e <HAL_ADC_ConfigChannel+0x7ea>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fda5 	bl	80014b2 <LL_ADC_REG_IsConversionOngoing>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 83c4 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d824      	bhi.n	80019ca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	3b02      	subs	r3, #2
 8001986:	2b03      	cmp	r3, #3
 8001988:	d81b      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x8e>
 800198a:	a201      	add	r2, pc, #4	; (adr r2, 8001990 <HAL_ADC_ConfigChannel+0x5c>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	080019a1 	.word	0x080019a1
 8001994:	080019a9 	.word	0x080019a9
 8001998:	080019b1 	.word	0x080019b1
 800199c:	080019b9 	.word	0x080019b9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80019a0:	230c      	movs	r3, #12
 80019a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019a6:	e010      	b.n	80019ca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80019a8:	2312      	movs	r3, #18
 80019aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019ae:	e00c      	b.n	80019ca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80019b0:	2318      	movs	r3, #24
 80019b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019b6:	e008      	b.n	80019ca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80019b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019c0:	e003      	b.n	80019ca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80019c2:	2306      	movs	r3, #6
 80019c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019c8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80019d8:	f7ff fc59 	bl	800128e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fd66 	bl	80014b2 <LL_ADC_REG_IsConversionOngoing>
 80019e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fd72 	bl	80014d8 <LL_ADC_INJ_IsConversionOngoing>
 80019f4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 81bf 	bne.w	8001d80 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 81ba 	bne.w	8001d80 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a14:	d10f      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff fc60 	bl	80012e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc07 	bl	8001242 <LL_ADC_SetSamplingTimeCommonConfig>
 8001a34:	e00e      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f7ff fc4f 	bl	80012e6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fbf7 	bl	8001242 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	08db      	lsrs	r3, r3, #3
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d00a      	beq.n	8001a8c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	6919      	ldr	r1, [r3, #16]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a86:	f7ff fb87 	bl	8001198 <LL_ADC_SetOffset>
 8001a8a:	e179      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fba4 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10a      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x184>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb99 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	f003 021f 	and.w	r2, r3, #31
 8001ab6:	e01e      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x1c2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fb8e 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ada:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ade:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001ae6:	2320      	movs	r3, #32
 8001ae8:	e004      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001aea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x1da>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0e9b      	lsrs	r3, r3, #26
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	e018      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x20c>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001b2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e004      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fb5d 	bl	800120c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fb41 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x24a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fb36 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	e01e      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x288>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2101      	movs	r1, #1
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb2b 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001bac:	2320      	movs	r3, #32
 8001bae:	e004      	b.n	8001bba <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x2a0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	e018      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x2d2>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	e004      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d106      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fafa 	bl	800120c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fade 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10a      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x310>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2102      	movs	r1, #2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fad3 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	0e9b      	lsrs	r3, r3, #26
 8001c3e:	f003 021f 	and.w	r2, r3, #31
 8001c42:	e01e      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x34e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fac8 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001c72:	2320      	movs	r3, #32
 8001c74:	e004      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x366>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0e9b      	lsrs	r3, r3, #26
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	e014      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x390>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	e004      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001cba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d106      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2102      	movs	r1, #2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa9b 	bl	800120c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2103      	movs	r1, #3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fa7f 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10a      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x3ce>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2103      	movs	r1, #3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fa74 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	e017      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x3fe>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2103      	movs	r1, #3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fa69 	bl	80011e0 <LL_ADC_GetOffsetChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001d24:	2320      	movs	r3, #32
 8001d26:	e003      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x416>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	e011      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x43a>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d5a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e003      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	2103      	movs	r1, #3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fa46 	bl	800120c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fb6d 	bl	8001464 <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 813f 	bne.w	8002010 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f7ff facc 	bl	800133c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4a8e      	ldr	r2, [pc, #568]	; (8001fe4 <HAL_ADC_ConfigChannel+0x6b0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	f040 8130 	bne.w	8002010 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x4a4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	bf94      	ite	ls
 8001dd0:	2301      	movls	r3, #1
 8001dd2:	2300      	movhi	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e019      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x4d8>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e003      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	bf94      	ite	ls
 8001e06:	2301      	movls	r3, #1
 8001e08:	2300      	movhi	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d079      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x4f8>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e9b      	lsrs	r3, r3, #26
 8001e22:	3301      	adds	r3, #1
 8001e24:	069b      	lsls	r3, r3, #26
 8001e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e2a:	e015      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x524>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	069b      	lsls	r3, r3, #26
 8001e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x544>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	e017      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x574>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e88:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001e90:	2320      	movs	r3, #32
 8001e92:	e003      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f003 031f 	and.w	r3, r3, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	ea42 0103 	orr.w	r1, r2, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x59a>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0e9b      	lsrs	r3, r3, #26
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	051b      	lsls	r3, r3, #20
 8001ecc:	e018      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x5cc>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e003      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f00:	430b      	orrs	r3, r1
 8001f02:	e080      	b.n	8002006 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d107      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x5ec>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0e9b      	lsrs	r3, r3, #26
 8001f16:	3301      	adds	r3, #1
 8001f18:	069b      	lsls	r3, r3, #26
 8001f1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1e:	e015      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x618>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	e003      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	3301      	adds	r3, #1
 8001f46:	069b      	lsls	r3, r3, #26
 8001f48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x638>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	0e9b      	lsrs	r3, r3, #26
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	e017      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x668>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	61bb      	str	r3, [r7, #24]
  return result;
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e003      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	ea42 0103 	orr.w	r1, r2, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x694>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b1e      	subs	r3, #30
 8001fc0:	051b      	lsls	r3, r3, #20
 8001fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	e01d      	b.n	8002004 <HAL_ADC_ConfigChannel+0x6d0>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	60fb      	str	r3, [r7, #12]
  return result;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e005      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x6bc>
 8001fe4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f003 021f 	and.w	r2, r3, #31
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b1e      	subs	r3, #30
 8001ffe:	051b      	lsls	r3, r3, #20
 8002000:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002004:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800200a:	4619      	mov	r1, r3
 800200c:	f7ff f96b 	bl	80012e6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b44      	ldr	r3, [pc, #272]	; (8002128 <HAL_ADC_ConfigChannel+0x7f4>)
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d07a      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800201c:	4843      	ldr	r0, [pc, #268]	; (800212c <HAL_ADC_ConfigChannel+0x7f8>)
 800201e:	f7ff f8ad 	bl	800117c <LL_ADC_GetCommonPathInternalCh>
 8002022:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a41      	ldr	r2, [pc, #260]	; (8002130 <HAL_ADC_ConfigChannel+0x7fc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d12c      	bne.n	800208a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d126      	bne.n	800208a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <HAL_ADC_ConfigChannel+0x800>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_ADC_ConfigChannel+0x71c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_ADC_ConfigChannel+0x804>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d15d      	bne.n	800210c <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002058:	4619      	mov	r1, r3
 800205a:	4834      	ldr	r0, [pc, #208]	; (800212c <HAL_ADC_ConfigChannel+0x7f8>)
 800205c:	f7ff f87b 	bl	8001156 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <HAL_ADC_ConfigChannel+0x808>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	4a36      	ldr	r2, [pc, #216]	; (8002140 <HAL_ADC_ConfigChannel+0x80c>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800207a:	e002      	b.n	8002082 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3b01      	subs	r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002088:	e040      	b.n	800210c <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2d      	ldr	r2, [pc, #180]	; (8002144 <HAL_ADC_ConfigChannel+0x810>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d118      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002098:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d112      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_ADC_ConfigChannel+0x800>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x780>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <HAL_ADC_ConfigChannel+0x804>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d12d      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020bc:	4619      	mov	r1, r3
 80020be:	481b      	ldr	r0, [pc, #108]	; (800212c <HAL_ADC_ConfigChannel+0x7f8>)
 80020c0:	f7ff f849 	bl	8001156 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020c4:	e024      	b.n	8002110 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_ADC_ConfigChannel+0x814>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d120      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d11a      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <HAL_ADC_ConfigChannel+0x800>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d115      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ee:	4619      	mov	r1, r3
 80020f0:	480e      	ldr	r0, [pc, #56]	; (800212c <HAL_ADC_ConfigChannel+0x7f8>)
 80020f2:	f7ff f830 	bl	8001156 <LL_ADC_SetCommonPathInternalCh>
 80020f6:	e00c      	b.n	8002112 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800210a:	e002      	b.n	8002112 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800210c:	bf00      	nop
 800210e:	e000      	b.n	8002112 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002110:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800211a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800211e:	4618      	mov	r0, r3
 8002120:	37d8      	adds	r7, #216	; 0xd8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	80080000 	.word	0x80080000
 800212c:	50040300 	.word	0x50040300
 8002130:	c7520000 	.word	0xc7520000
 8002134:	50040000 	.word	0x50040000
 8002138:	50040200 	.word	0x50040200
 800213c:	20000028 	.word	0x20000028
 8002140:	053e2d63 	.word	0x053e2d63
 8002144:	cb840000 	.word	0xcb840000
 8002148:	80000001 	.word	0x80000001

0800214c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff f981 	bl	8001464 <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d169      	bne.n	800223c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <ADC_Enable+0xfc>)
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f043 0210 	orr.w	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	f043 0201 	orr.w	r2, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e055      	b.n	800223e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f950 	bl	800143c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800219c:	482b      	ldr	r0, [pc, #172]	; (800224c <ADC_Enable+0x100>)
 800219e:	f7fe ffed 	bl	800117c <LL_ADC_GetCommonPathInternalCh>
 80021a2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <ADC_Enable+0x104>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	4a28      	ldr	r2, [pc, #160]	; (8002254 <ADC_Enable+0x108>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021c6:	e002      	b.n	80021ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021d4:	f7fe ff7c 	bl	80010d0 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021da:	e028      	b.n	800222e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff f93f 	bl	8001464 <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d104      	bne.n	80021f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f923 	bl	800143c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021f6:	f7fe ff6b 	bl	80010d0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d914      	bls.n	800222e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d00d      	beq.n	800222e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e007      	b.n	800223e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d1cf      	bne.n	80021dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	8000003f 	.word	0x8000003f
 800224c:	50040300 	.word	0x50040300
 8002250:	20000028 	.word	0x20000028
 8002254:	053e2d63 	.word	0x053e2d63

08002258 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800226e:	2b00      	cmp	r3, #0
 8002270:	d14b      	bne.n	800230a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d021      	beq.n	80022d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe ffe9 	bl	8001268 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d032      	beq.n	8002302 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d12b      	bne.n	8002302 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11f      	bne.n	8002302 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	659a      	str	r2, [r3, #88]	; 0x58
 80022ce:	e018      	b.n	8002302 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d111      	bne.n	8002302 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7fe f90e 	bl	8000524 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002308:	e00e      	b.n	8002328 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f7ff fb02 	bl	8001920 <HAL_ADC_ErrorCallback>
}
 800231c:	e004      	b.n	8002328 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7fe f8d2 	bl	80004e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fad4 	bl	8001920 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <LL_ADC_IsEnabled>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <LL_ADC_IsEnabled+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_ADC_IsEnabled+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d101      	bne.n	80023be <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b0a1      	sub	sp, #132	; 0x84
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e093      	b.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80023f2:	2300      	movs	r3, #0
 80023f4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80023f6:	2300      	movs	r3, #0
 80023f8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a47      	ldr	r2, [pc, #284]	; (800251c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d102      	bne.n	800240a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002404:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e001      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e072      	b.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ffb9 	bl	80023a6 <LL_ADC_REG_IsConversionOngoing>
 8002434:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ffb3 	bl	80023a6 <LL_ADC_REG_IsConversionOngoing>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d154      	bne.n	80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002448:	2b00      	cmp	r3, #0
 800244a:	d151      	bne.n	80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800244c:	4b35      	ldr	r3, [pc, #212]	; (8002524 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800244e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d02c      	beq.n	80024b2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800246a:	035b      	lsls	r3, r3, #13
 800246c:	430b      	orrs	r3, r1
 800246e:	431a      	orrs	r2, r3
 8002470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002472:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002474:	4829      	ldr	r0, [pc, #164]	; (800251c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002476:	f7ff ff83 	bl	8002380 <LL_ADC_IsEnabled>
 800247a:	4604      	mov	r4, r0
 800247c:	4828      	ldr	r0, [pc, #160]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800247e:	f7ff ff7f 	bl	8002380 <LL_ADC_IsEnabled>
 8002482:	4603      	mov	r3, r0
 8002484:	431c      	orrs	r4, r3
 8002486:	4828      	ldr	r0, [pc, #160]	; (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002488:	f7ff ff7a 	bl	8002380 <LL_ADC_IsEnabled>
 800248c:	4603      	mov	r3, r0
 800248e:	4323      	orrs	r3, r4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d137      	bne.n	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800249c:	f023 030f 	bic.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	6811      	ldr	r1, [r2, #0]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	6892      	ldr	r2, [r2, #8]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	431a      	orrs	r2, r3
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024b0:	e028      	b.n	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024be:	4817      	ldr	r0, [pc, #92]	; (800251c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024c0:	f7ff ff5e 	bl	8002380 <LL_ADC_IsEnabled>
 80024c4:	4604      	mov	r4, r0
 80024c6:	4816      	ldr	r0, [pc, #88]	; (8002520 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024c8:	f7ff ff5a 	bl	8002380 <LL_ADC_IsEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	431c      	orrs	r4, r3
 80024d0:	4815      	ldr	r0, [pc, #84]	; (8002528 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024d2:	f7ff ff55 	bl	8002380 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4323      	orrs	r3, r4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d112      	bne.n	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024e6:	f023 030f 	bic.w	r3, r3, #15
 80024ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024ee:	e009      	b.n	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002502:	e000      	b.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002504:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800250e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002512:	4618      	mov	r0, r3
 8002514:	3784      	adds	r7, #132	; 0x84
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	bf00      	nop
 800251c:	50040000 	.word	0x50040000
 8002520:	50040100 	.word	0x50040100
 8002524:	50040300 	.word	0x50040300
 8002528:	50040200 	.word	0x50040200

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002698:	d301      	bcc.n	800269e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269a:	2301      	movs	r3, #1
 800269c:	e00f      	b.n	80026be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <SysTick_Config+0x40>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a6:	210f      	movs	r1, #15
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f7ff ff8e 	bl	80025cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SysTick_Config+0x40>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <SysTick_Config+0x40>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	e000e010 	.word	0xe000e010

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff29 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026f4:	f7ff ff3e 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ff8e 	bl	8002620 <NVIC_EncodePriority>
 8002704:	4602      	mov	r2, r0
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff5d 	bl	80025cc <__NVIC_SetPriority>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff31 	bl	8002590 <__NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffa2 	bl	8002688 <SysTick_Config>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e014      	b.n	800278a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	791b      	ldrb	r3, [r3, #4]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7fe fa71 	bl	8000c58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	795b      	ldrb	r3, [r3, #5]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_DAC_Start_DMA+0x1e>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e0ab      	b.n	800290a <HAL_DAC_Start_DMA+0x176>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2202      	movs	r2, #2
 80027bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d12f      	bne.n	8002824 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_DAC_Start_DMA+0x180>)
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a51      	ldr	r2, [pc, #324]	; (8002918 <HAL_DAC_Start_DMA+0x184>)
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a50      	ldr	r2, [pc, #320]	; (800291c <HAL_DAC_Start_DMA+0x188>)
 80027da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d013      	beq.n	800281a <HAL_DAC_Start_DMA+0x86>
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d845      	bhi.n	8002884 <HAL_DAC_Start_DMA+0xf0>
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_DAC_Start_DMA+0x72>
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d005      	beq.n	8002810 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002804:	e03e      	b.n	8002884 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3308      	adds	r3, #8
 800280c:	613b      	str	r3, [r7, #16]
        break;
 800280e:	e03c      	b.n	800288a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	613b      	str	r3, [r7, #16]
        break;
 8002818:	e037      	b.n	800288a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3310      	adds	r3, #16
 8002820:	613b      	str	r3, [r7, #16]
        break;
 8002822:	e032      	b.n	800288a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a3d      	ldr	r2, [pc, #244]	; (8002920 <HAL_DAC_Start_DMA+0x18c>)
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a3c      	ldr	r2, [pc, #240]	; (8002924 <HAL_DAC_Start_DMA+0x190>)
 8002832:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <HAL_DAC_Start_DMA+0x194>)
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800284a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	2b08      	cmp	r3, #8
 8002850:	d013      	beq.n	800287a <HAL_DAC_Start_DMA+0xe6>
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d817      	bhi.n	8002888 <HAL_DAC_Start_DMA+0xf4>
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_DAC_Start_DMA+0xd2>
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d005      	beq.n	8002870 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002864:	e010      	b.n	8002888 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3314      	adds	r3, #20
 800286c:	613b      	str	r3, [r7, #16]
        break;
 800286e:	e00c      	b.n	800288a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3318      	adds	r3, #24
 8002876:	613b      	str	r3, [r7, #16]
        break;
 8002878:	e007      	b.n	800288a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	331c      	adds	r3, #28
 8002880:	613b      	str	r3, [r7, #16]
        break;
 8002882:	e002      	b.n	800288a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002884:	bf00      	nop
 8002886:	e000      	b.n	800288a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002888:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800289e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6898      	ldr	r0, [r3, #8]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	f000 fac7 	bl	8002e3c <HAL_DMA_Start_IT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	75fb      	strb	r3, [r7, #23]
 80028b2:	e010      	b.n	80028d6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68d8      	ldr	r0, [r3, #12]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	f000 fab5 	bl	8002e3c <HAL_DMA_Start_IT>
 80028d2:	4603      	mov	r3, r0
 80028d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10c      	bne.n	80028fc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6819      	ldr	r1, [r3, #0]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2201      	movs	r2, #1
 80028f0:	409a      	lsls	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e005      	b.n	8002908 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002908:	7dfb      	ldrb	r3, [r7, #23]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	08002bb7 	.word	0x08002bb7
 8002918:	08002bd9 	.word	0x08002bd9
 800291c:	08002bf5 	.word	0x08002bf5
 8002920:	08002c5f 	.word	0x08002c5f
 8002924:	08002c81 	.word	0x08002c81
 8002928:	08002c9d 	.word	0x08002c9d

0800292c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	795b      	ldrb	r3, [r3, #5]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_DAC_ConfigChannel+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e114      	b.n	8002bae <HAL_DAC_ConfigChannel+0x246>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2202      	movs	r2, #2
 800298e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b04      	cmp	r3, #4
 8002996:	f040 8081 	bne.w	8002a9c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800299a:	f7fe fb99 	bl	80010d0 <HAL_GetTick>
 800299e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d140      	bne.n	8002a28 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029a6:	e018      	b.n	80029da <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029a8:	f7fe fb92 	bl	80010d0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d911      	bls.n	80029da <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f043 0208 	orr.w	r2, r3, #8
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2203      	movs	r2, #3
 80029d4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0e9      	b.n	8002bae <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1df      	bne.n	80029a8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7fe fb7d 	bl	80010e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	6992      	ldr	r2, [r2, #24]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
 80029f8:	e023      	b.n	8002a42 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029fa:	f7fe fb69 	bl	80010d0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d90f      	bls.n	8002a28 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da0a      	bge.n	8002a28 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f043 0208 	orr.w	r2, r3, #8
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2203      	movs	r2, #3
 8002a22:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e0c2      	b.n	8002bae <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	dbe3      	blt.n	80029fa <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7fe fb58 	bl	80010e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	6992      	ldr	r2, [r2, #24]
 8002a40:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	ea02 0103 	and.w	r1, r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	21ff      	movs	r1, #255	; 0xff
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	ea02 0103 	and.w	r1, r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d11d      	bne.n	8002ae0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	221f      	movs	r2, #31
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2207      	movs	r2, #7
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43da      	mvns	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	400a      	ands	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	22c0      	movs	r2, #192	; 0xc0
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43da      	mvns	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff feb1 	bl	800292c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	711a      	strb	r2, [r3, #4]
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff feaa 	bl	8002940 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f043 0204 	orr.w	r2, r3, #4
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7ff fea0 	bl	8002954 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	711a      	strb	r2, [r3, #4]
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ffd8 	bl	8002c22 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	711a      	strb	r2, [r3, #4]
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7ff ffd1 	bl	8002c36 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f043 0204 	orr.w	r2, r3, #4
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ffc7 	bl	8002c4a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	711a      	strb	r2, [r3, #4]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e098      	b.n	8002e10 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_DMA_Init+0x150>)
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d80f      	bhi.n	8002d0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_DMA_Init+0x154>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_DMA_Init+0x158>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a48      	ldr	r2, [pc, #288]	; (8002e28 <HAL_DMA_Init+0x15c>)
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
 8002d08:	e00e      	b.n	8002d28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_DMA_Init+0x160>)
 8002d12:	4413      	add	r3, r2
 8002d14:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_DMA_Init+0x158>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a42      	ldr	r2, [pc, #264]	; (8002e30 <HAL_DMA_Init+0x164>)
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d82:	d039      	beq.n	8002df8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <HAL_DMA_Init+0x15c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d8e:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f003 031c 	and.w	r3, r3, #28
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4924      	ldr	r1, [pc, #144]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	f003 031c 	and.w	r3, r3, #28
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	491d      	ldr	r1, [pc, #116]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
 8002dc2:	e019      	b.n	8002df8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f003 031c 	and.w	r3, r3, #28
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	4917      	ldr	r1, [pc, #92]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f003 031c 	and.w	r3, r3, #28
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	4911      	ldr	r1, [pc, #68]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40020407 	.word	0x40020407
 8002e20:	bffdfff8 	.word	0xbffdfff8
 8002e24:	cccccccd 	.word	0xcccccccd
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	bffdfbf8 	.word	0xbffdfbf8
 8002e30:	40020400 	.word	0x40020400
 8002e34:	400200a8 	.word	0x400200a8
 8002e38:	400204a8 	.word	0x400204a8

08002e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_DMA_Start_IT+0x20>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e04b      	b.n	8002ef4 <HAL_DMA_Start_IT+0xb8>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d13a      	bne.n	8002ee6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f8e0 	bl	800305a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 020e 	orr.w	r2, r2, #14
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e00f      	b.n	8002ed4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 020a 	orr.w	r2, r2, #10
 8002ed2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e005      	b.n	8002ef2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f003 031c 	and.w	r3, r3, #28
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d026      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x7a>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d021      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0204 	bic.w	r2, r2, #4
 8002f4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f003 021c 	and.w	r2, r3, #28
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d071      	beq.n	8003050 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f74:	e06c      	b.n	8003050 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 031c 	and.w	r3, r3, #28
 8002f7e:	2202      	movs	r2, #2
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02e      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xec>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d029      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 020a 	bic.w	r2, r2, #10
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f003 021c 	and.w	r2, r3, #28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d038      	beq.n	8003050 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fe6:	e033      	b.n	8003050 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f003 031c 	and.w	r3, r3, #28
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02a      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d025      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 020e 	bic.w	r2, r2, #14
 8003014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f003 021c 	and.w	r2, r3, #28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003050:	bf00      	nop
 8003052:	bf00      	nop
}
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f003 021c 	and.w	r2, r3, #28
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b10      	cmp	r3, #16
 800308a:	d108      	bne.n	800309e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800309c:	e007      	b.n	80030ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ca:	e166      	b.n	800339a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8158 	beq.w	8003394 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d005      	beq.n	80030fc <HAL_GPIO_Init+0x40>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d130      	bne.n	800315e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003132:	2201      	movs	r2, #1
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0201 	and.w	r2, r3, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b03      	cmp	r3, #3
 8003168:	d017      	beq.n	800319a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d123      	bne.n	80031ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	08da      	lsrs	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3208      	adds	r2, #8
 80031ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	220f      	movs	r2, #15
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	6939      	ldr	r1, [r7, #16]
 80031ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0203 	and.w	r2, r3, #3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80b2 	beq.w	8003394 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003230:	4b61      	ldr	r3, [pc, #388]	; (80033b8 <HAL_GPIO_Init+0x2fc>)
 8003232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003234:	4a60      	ldr	r2, [pc, #384]	; (80033b8 <HAL_GPIO_Init+0x2fc>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6613      	str	r3, [r2, #96]	; 0x60
 800323c:	4b5e      	ldr	r3, [pc, #376]	; (80033b8 <HAL_GPIO_Init+0x2fc>)
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003248:	4a5c      	ldr	r2, [pc, #368]	; (80033bc <HAL_GPIO_Init+0x300>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003254:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	220f      	movs	r2, #15
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003272:	d02b      	beq.n	80032cc <HAL_GPIO_Init+0x210>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_GPIO_Init+0x304>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d025      	beq.n	80032c8 <HAL_GPIO_Init+0x20c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <HAL_GPIO_Init+0x308>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01f      	beq.n	80032c4 <HAL_GPIO_Init+0x208>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <HAL_GPIO_Init+0x30c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d019      	beq.n	80032c0 <HAL_GPIO_Init+0x204>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a4f      	ldr	r2, [pc, #316]	; (80033cc <HAL_GPIO_Init+0x310>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_GPIO_Init+0x200>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a4e      	ldr	r2, [pc, #312]	; (80033d0 <HAL_GPIO_Init+0x314>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00d      	beq.n	80032b8 <HAL_GPIO_Init+0x1fc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a4d      	ldr	r2, [pc, #308]	; (80033d4 <HAL_GPIO_Init+0x318>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <HAL_GPIO_Init+0x1f8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_GPIO_Init+0x31c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <HAL_GPIO_Init+0x1f4>
 80032ac:	2307      	movs	r3, #7
 80032ae:	e00e      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032b0:	2308      	movs	r3, #8
 80032b2:	e00c      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032b4:	2306      	movs	r3, #6
 80032b6:	e00a      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032b8:	2305      	movs	r3, #5
 80032ba:	e008      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032bc:	2304      	movs	r3, #4
 80032be:	e006      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032c0:	2303      	movs	r3, #3
 80032c2:	e004      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e002      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_GPIO_Init+0x212>
 80032cc:	2300      	movs	r3, #0
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	f002 0203 	and.w	r2, r2, #3
 80032d4:	0092      	lsls	r2, r2, #2
 80032d6:	4093      	lsls	r3, r2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032de:	4937      	ldr	r1, [pc, #220]	; (80033bc <HAL_GPIO_Init+0x300>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_GPIO_Init+0x320>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003310:	4a32      	ldr	r2, [pc, #200]	; (80033dc <HAL_GPIO_Init+0x320>)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_GPIO_Init+0x320>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800333a:	4a28      	ldr	r2, [pc, #160]	; (80033dc <HAL_GPIO_Init+0x320>)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003340:	4b26      	ldr	r3, [pc, #152]	; (80033dc <HAL_GPIO_Init+0x320>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_GPIO_Init+0x320>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <HAL_GPIO_Init+0x320>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800338e:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_GPIO_Init+0x320>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3301      	adds	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f ae91 	bne.w	80030cc <HAL_GPIO_Init+0x10>
  }
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	371c      	adds	r7, #28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010000 	.word	0x40010000
 80033c0:	48000400 	.word	0x48000400
 80033c4:	48000800 	.word	0x48000800
 80033c8:	48000c00 	.word	0x48000c00
 80033cc:	48001000 	.word	0x48001000
 80033d0:	48001400 	.word	0x48001400
 80033d4:	48001800 	.word	0x48001800
 80033d8:	48001c00 	.word	0x48001c00
 80033dc:	40010400 	.word	0x40010400

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033fc:	e002      	b.n	8003404 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003412:	b08f      	sub	sp, #60	; 0x3c
 8003414:	af0a      	add	r7, sp, #40	; 0x28
 8003416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e116      	b.n	8003650 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd fcf9 	bl	8000e34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2203      	movs	r2, #3
 8003446:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f002 fbf2 	bl	8005c4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	687e      	ldr	r6, [r7, #4]
 800346e:	466d      	mov	r5, sp
 8003470:	f106 0410 	add.w	r4, r6, #16
 8003474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003480:	e885 0003 	stmia.w	r5, {r0, r1}
 8003484:	1d33      	adds	r3, r6, #4
 8003486:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003488:	6838      	ldr	r0, [r7, #0]
 800348a:	f002 fbb2 	bl	8005bf2 <USB_CoreInit>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0d7      	b.n	8003650 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f002 fbe0 	bl	8005c6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e04a      	b.n	8003548 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	333d      	adds	r3, #61	; 0x3d
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	333c      	adds	r3, #60	; 0x3c
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	b298      	uxth	r0, r3
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3356      	adds	r3, #86	; 0x56
 80034ee:	4602      	mov	r2, r0
 80034f0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3340      	adds	r3, #64	; 0x40
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	3344      	adds	r3, #68	; 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3348      	adds	r3, #72	; 0x48
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334c      	adds	r3, #76	; 0x4c
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	3301      	adds	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	429a      	cmp	r2, r3
 8003550:	d3af      	bcc.n	80034b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
 8003556:	e044      	b.n	80035e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800359a:	7bfa      	ldrb	r2, [r7, #15]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035c6:	7bfa      	ldrb	r2, [r7, #15]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	3301      	adds	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d3b5      	bcc.n	8003558 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	687e      	ldr	r6, [r7, #4]
 80035f4:	466d      	mov	r5, sp
 80035f6:	f106 0410 	add.w	r4, r6, #16
 80035fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003606:	e885 0003 	stmia.w	r5, {r0, r1}
 800360a:	1d33      	adds	r3, r6, #4
 800360c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800360e:	6838      	ldr	r0, [r7, #0]
 8003610:	f002 fb78 	bl	8005d04 <USB_DevInit>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2202      	movs	r2, #2
 800361e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e014      	b.n	8003650 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f80a 	bl	8003658 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f002 fd1a 	bl	8006082 <USB_DevDisconnect>

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003658 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	f043 0303 	orr.w	r3, r3, #3
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ae:	6013      	str	r3, [r2, #0]
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40007000 	.word	0x40007000

080036c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000

080036dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ea:	d130      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d038      	beq.n	800376c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003708:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2232      	movs	r2, #50	; 0x32
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9b      	lsrs	r3, r3, #18
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003720:	e002      	b.n	8003728 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3b01      	subs	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003734:	d102      	bne.n	800373c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1f2      	bne.n	8003722 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	d110      	bne.n	800376c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e00f      	b.n	800376e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375a:	d007      	beq.n	800376c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800375c:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003764:	4a05      	ldr	r2, [pc, #20]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40007000 	.word	0x40007000
 8003780:	20000028 	.word	0x20000028
 8003784:	431bde83 	.word	0x431bde83

08003788 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003796:	6053      	str	r3, [r2, #4]
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40007000 	.word	0x40007000

080037a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a04      	ldr	r2, [pc, #16]	; (80037c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b6:	6053      	str	r3, [r2, #4]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000

080037c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f000 bc08 	b.w	8003fec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037dc:	4b96      	ldr	r3, [pc, #600]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e6:	4b94      	ldr	r3, [pc, #592]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80e4 	beq.w	80039c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_RCC_OscConfig+0x4c>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	f040 808b 	bne.w	8003922 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b01      	cmp	r3, #1
 8003810:	f040 8087 	bne.w	8003922 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003814:	4b88      	ldr	r3, [pc, #544]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_OscConfig+0x64>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e3df      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	4b81      	ldr	r3, [pc, #516]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d004      	beq.n	8003846 <HAL_RCC_OscConfig+0x7e>
 800383c:	4b7e      	ldr	r3, [pc, #504]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003844:	e005      	b.n	8003852 <HAL_RCC_OscConfig+0x8a>
 8003846:	4b7c      	ldr	r3, [pc, #496]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003852:	4293      	cmp	r3, r2
 8003854:	d223      	bcs.n	800389e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fd92 	bl	8004384 <RCC_SetFlashLatencyFromMSIRange>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e3c0      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800386a:	4b73      	ldr	r3, [pc, #460]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a72      	ldr	r2, [pc, #456]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b70      	ldr	r3, [pc, #448]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	496d      	ldr	r1, [pc, #436]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003888:	4b6b      	ldr	r3, [pc, #428]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	4968      	ldr	r1, [pc, #416]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
 800389c:	e025      	b.n	80038ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800389e:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80038a4:	f043 0308 	orr.w	r3, r3, #8
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4960      	ldr	r1, [pc, #384]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038bc:	4b5e      	ldr	r3, [pc, #376]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	495b      	ldr	r1, [pc, #364]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fd52 	bl	8004384 <RCC_SetFlashLatencyFromMSIRange>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e380      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ea:	f000 fc87 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80038ee:	4602      	mov	r2, r0
 80038f0:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	4950      	ldr	r1, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0x274>)
 80038fc:	5ccb      	ldrb	r3, [r1, r3]
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	4a4e      	ldr	r2, [pc, #312]	; (8003a40 <HAL_RCC_OscConfig+0x278>)
 8003908:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800390a:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <HAL_RCC_OscConfig+0x27c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd fb8e 	bl	8001030 <HAL_InitTick>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d052      	beq.n	80039c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	e364      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d032      	beq.n	8003990 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800392a:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a42      	ldr	r2, [pc, #264]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003936:	f7fd fbcb 	bl	80010d0 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800393e:	f7fd fbc7 	bl	80010d0 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e34d      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003950:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800395c:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003962:	f043 0308 	orr.w	r3, r3, #8
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4930      	ldr	r1, [pc, #192]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397a:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	492b      	ldr	r1, [pc, #172]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
 800398e:	e01a      	b.n	80039c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a28      	ldr	r2, [pc, #160]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800399c:	f7fd fb98 	bl	80010d0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039a4:	f7fd fb94 	bl	80010d0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e31a      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1dc>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d073      	beq.n	8003aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_OscConfig+0x21c>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d10e      	bne.n	80039fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d10b      	bne.n	80039fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d063      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x2f0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d15f      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e2f7      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d106      	bne.n	8003a14 <HAL_RCC_OscConfig+0x24c>
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e025      	b.n	8003a60 <HAL_RCC_OscConfig+0x298>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	d114      	bne.n	8003a48 <HAL_RCC_OscConfig+0x280>
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a02      	ldr	r2, [pc, #8]	; (8003a38 <HAL_RCC_OscConfig+0x270>)
 8003a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	e013      	b.n	8003a60 <HAL_RCC_OscConfig+0x298>
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08007780 	.word	0x08007780
 8003a40:	20000028 	.word	0x20000028
 8003a44:	2000002c 	.word	0x2000002c
 8003a48:	4ba0      	ldr	r3, [pc, #640]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a9f      	ldr	r2, [pc, #636]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b9d      	ldr	r3, [pc, #628]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a9c      	ldr	r2, [pc, #624]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd fb32 	bl	80010d0 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fd fb2e 	bl	80010d0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e2b4      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a82:	4b92      	ldr	r3, [pc, #584]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x2a8>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fd fb1e 	bl	80010d0 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd fb1a 	bl	80010d0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e2a0      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2d0>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d060      	beq.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x310>
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d119      	bne.n	8003b06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d116      	bne.n	8003b06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ad8:	4b7c      	ldr	r3, [pc, #496]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_OscConfig+0x328>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e27d      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	4973      	ldr	r1, [pc, #460]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b04:	e040      	b.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d023      	beq.n	8003b56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6e      	ldr	r2, [pc, #440]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fd fad9 	bl	80010d0 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fd fad5 	bl	80010d0 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e25b      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b34:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b62      	ldr	r3, [pc, #392]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	061b      	lsls	r3, r3, #24
 8003b4e:	495f      	ldr	r1, [pc, #380]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]
 8003b54:	e018      	b.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b56:	4b5d      	ldr	r3, [pc, #372]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fd fab5 	bl	80010d0 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7fd fab1 	bl	80010d0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e237      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b7c:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d03c      	beq.n	8003c0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01c      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba2:	4a4a      	ldr	r2, [pc, #296]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003ba4:	f043 0301 	orr.w	r3, r3, #1
 8003ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fd fa90 	bl	80010d0 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fd fa8c 	bl	80010d0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e212      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0ef      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x3ec>
 8003bd4:	e01b      	b.n	8003c0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bdc:	4a3b      	ldr	r2, [pc, #236]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be6:	f7fd fa73 	bl	80010d0 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bee:	f7fd fa6f 	bl	80010d0 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1f5      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1ef      	bne.n	8003bee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80a6 	beq.w	8003d68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10d      	bne.n	8003c48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c36:	6593      	str	r3, [r2, #88]	; 0x58
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c44:	2301      	movs	r3, #1
 8003c46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <HAL_RCC_OscConfig+0x508>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d118      	bne.n	8003c86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCC_OscConfig+0x508>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <HAL_RCC_OscConfig+0x508>)
 8003c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c60:	f7fd fa36 	bl	80010d0 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c68:	f7fd fa32 	bl	80010d0 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e1b8      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_RCC_OscConfig+0x508>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x4d8>
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c9e:	e029      	b.n	8003cf4 <HAL_RCC_OscConfig+0x52c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d115      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x50c>
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <HAL_RCC_OscConfig+0x504>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc8:	e014      	b.n	8003cf4 <HAL_RCC_OscConfig+0x52c>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	4b9d      	ldr	r3, [pc, #628]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cda:	4a9c      	ldr	r2, [pc, #624]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce4:	4b99      	ldr	r3, [pc, #612]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	4a98      	ldr	r2, [pc, #608]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d016      	beq.n	8003d2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd f9e8 	bl	80010d0 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d04:	f7fd f9e4 	bl	80010d0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e168      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1a:	4b8c      	ldr	r3, [pc, #560]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ed      	beq.n	8003d04 <HAL_RCC_OscConfig+0x53c>
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f9d1 	bl	80010d0 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fd f9cd 	bl	80010d0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e151      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d48:	4b80      	ldr	r3, [pc, #512]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ed      	bne.n	8003d32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d56:	7ffb      	ldrb	r3, [r7, #31]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	4a7a      	ldr	r2, [pc, #488]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d03c      	beq.n	8003dee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d7c:	4b73      	ldr	r3, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d82:	4a72      	ldr	r2, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd f9a0 	bl	80010d0 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d94:	f7fd f99c 	bl	80010d0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e122      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003da6:	4b69      	ldr	r3, [pc, #420]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0ef      	beq.n	8003d94 <HAL_RCC_OscConfig+0x5cc>
 8003db4:	e01b      	b.n	8003dee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003db6:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dbc:	4a63      	ldr	r2, [pc, #396]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fd f983 	bl	80010d0 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dce:	f7fd f97f 	bl	80010d0 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e105      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003de0:	4b5a      	ldr	r3, [pc, #360]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ef      	bne.n	8003dce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80f9 	beq.w	8003fea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f040 80cf 	bne.w	8003fa0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e02:	4b52      	ldr	r3, [pc, #328]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0203 	and.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d12c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e20:	3b01      	subs	r3, #1
 8003e22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d123      	bne.n	8003e70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d11b      	bne.n	8003e70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d113      	bne.n	8003e70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	3b01      	subs	r3, #1
 8003e56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	085b      	lsrs	r3, r3, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d071      	beq.n	8003f54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d068      	beq.n	8003f48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e76:	4b35      	ldr	r3, [pc, #212]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e82:	4b32      	ldr	r3, [pc, #200]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0ac      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e92:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003e98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e9e:	f7fd f917 	bl	80010d0 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd f913 	bl	80010d0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e099      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RCC_OscConfig+0x788>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0112      	lsls	r2, r2, #4
 8003ed8:	4311      	orrs	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ede:	0212      	lsls	r2, r2, #8
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ee6:	0852      	lsrs	r2, r2, #1
 8003ee8:	3a01      	subs	r2, #1
 8003eea:	0552      	lsls	r2, r2, #21
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ef2:	0852      	lsrs	r2, r2, #1
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0652      	lsls	r2, r2, #25
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003efe:	06d2      	lsls	r2, r2, #27
 8003f00:	430a      	orrs	r2, r1
 8003f02:	4912      	ldr	r1, [pc, #72]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f20:	f7fd f8d6 	bl	80010d0 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd f8d2 	bl	80010d0 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e058      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_RCC_OscConfig+0x784>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f46:	e050      	b.n	8003fea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e04f      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d144      	bne.n	8003fea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a20      	ldr	r2, [pc, #128]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f78:	f7fd f8aa 	bl	80010d0 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd f8a6 	bl	80010d0 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e02c      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x7b8>
 8003f9e:	e024      	b.n	8003fea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a12      	ldr	r2, [pc, #72]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003fac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fd f88d 	bl	80010d0 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fd f889 	bl	80010d0 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e00f      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4905      	ldr	r1, [pc, #20]	; (8003ff4 <HAL_RCC_OscConfig+0x82c>)
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x830>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
 8003fe4:	e001      	b.n	8003fea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3720      	adds	r7, #32
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	feeefffc 	.word	0xfeeefffc

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0e7      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b75      	ldr	r3, [pc, #468]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d910      	bls.n	8004040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b72      	ldr	r3, [pc, #456]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 0207 	bic.w	r2, r3, #7
 8004026:	4970      	ldr	r1, [pc, #448]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b6e      	ldr	r3, [pc, #440]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cf      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d010      	beq.n	800406e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	4b66      	ldr	r3, [pc, #408]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004058:	429a      	cmp	r2, r3
 800405a:	d908      	bls.n	800406e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b63      	ldr	r3, [pc, #396]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4960      	ldr	r1, [pc, #384]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d04c      	beq.n	8004114 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	4b5a      	ldr	r3, [pc, #360]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d121      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0a6      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800409a:	4b54      	ldr	r3, [pc, #336]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d115      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e09a      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040b2:	4b4e      	ldr	r3, [pc, #312]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e08e      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c2:	4b4a      	ldr	r3, [pc, #296]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e086      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4b46      	ldr	r3, [pc, #280]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4943      	ldr	r1, [pc, #268]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e4:	f7fc fff4 	bl	80010d0 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ec:	f7fc fff0 	bl	80010d0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e06e      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	4b3a      	ldr	r3, [pc, #232]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 020c 	and.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	429a      	cmp	r2, r3
 8004112:	d1eb      	bne.n	80040ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412c:	429a      	cmp	r2, r3
 800412e:	d208      	bcs.n	8004142 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	492b      	ldr	r1, [pc, #172]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004142:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d210      	bcs.n	8004172 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 0207 	bic.w	r2, r3, #7
 8004158:	4923      	ldr	r1, [pc, #140]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004160:	4b21      	ldr	r3, [pc, #132]	; (80041e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d001      	beq.n	8004172 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e036      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417e:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4918      	ldr	r1, [pc, #96]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800418c:	4313      	orrs	r3, r2
 800418e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d009      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4910      	ldr	r1, [pc, #64]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041b0:	f000 f824 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <HAL_RCC_ClockConfig+0x1f4>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
 80041cc:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1f8>)
 80041ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_RCC_ClockConfig+0x1fc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fc ff2b 	bl	8001030 <HAL_InitTick>
 80041da:	4603      	mov	r3, r0
 80041dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80041de:	7afb      	ldrb	r3, [r7, #11]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40022000 	.word	0x40022000
 80041ec:	40021000 	.word	0x40021000
 80041f0:	08007780 	.word	0x08007780
 80041f4:	20000028 	.word	0x20000028
 80041f8:	2000002c 	.word	0x2000002c

080041fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004214:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x34>
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d121      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d11e      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800423c:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	e005      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800424c:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <HAL_RCC_GetSysClockFreq+0x10c>)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004260:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800426c:	e00a      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d102      	bne.n	800427a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <HAL_RCC_GetSysClockFreq+0x110>)
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e004      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d101      	bne.n	8004284 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004280:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_RCC_GetSysClockFreq+0x114>)
 8004282:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d134      	bne.n	80042f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d003      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0xac>
 80042a0:	e005      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCC_GetSysClockFreq+0x110>)
 80042a4:	617b      	str	r3, [r7, #20]
      break;
 80042a6:	e005      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a8:	4b19      	ldr	r3, [pc, #100]	; (8004310 <HAL_RCC_GetSysClockFreq+0x114>)
 80042aa:	617b      	str	r3, [r7, #20]
      break;
 80042ac:	e002      	b.n	80042b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	617b      	str	r3, [r7, #20]
      break;
 80042b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	091b      	lsrs	r3, r3, #4
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	3301      	adds	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	fb03 f202 	mul.w	r2, r3, r2
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_RCC_GetSysClockFreq+0x108>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	0e5b      	lsrs	r3, r3, #25
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	3301      	adds	r3, #1
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042f4:	69bb      	ldr	r3, [r7, #24]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3724      	adds	r7, #36	; 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	08007798 	.word	0x08007798
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000028 	.word	0x20000028

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4904      	ldr	r1, [pc, #16]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40021000 	.word	0x40021000
 8004354:	08007790 	.word	0x08007790

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800435c:	f7ff ffda 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0adb      	lsrs	r3, r3, #11
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4904      	ldr	r1, [pc, #16]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	08007790 	.word	0x08007790

08004384 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800439c:	f7ff f990 	bl	80036c0 <HAL_PWREx_GetVoltageRange>
 80043a0:	6178      	str	r0, [r7, #20]
 80043a2:	e014      	b.n	80043ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	4a24      	ldr	r2, [pc, #144]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6593      	str	r3, [r2, #88]	; 0x58
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043bc:	f7ff f980 	bl	80036c0 <HAL_PWREx_GetVoltageRange>
 80043c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	4a1d      	ldr	r2, [pc, #116]	; (800443c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d4:	d10b      	bne.n	80043ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d919      	bls.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2ba0      	cmp	r3, #160	; 0xa0
 80043e0:	d902      	bls.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043e2:	2302      	movs	r3, #2
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	e013      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043e8:	2301      	movs	r3, #1
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	e010      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d902      	bls.n	80043fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043f4:	2303      	movs	r3, #3
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e00a      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d102      	bne.n	8004406 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004400:	2302      	movs	r3, #2
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e004      	b.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b70      	cmp	r3, #112	; 0x70
 800440a:	d101      	bne.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800440c:	2301      	movs	r3, #1
 800440e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 0207 	bic.w	r2, r3, #7
 8004418:	4909      	ldr	r1, [pc, #36]	; (8004440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	40022000 	.word	0x40022000

08004444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800444c:	2300      	movs	r3, #0
 800444e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004450:	2300      	movs	r3, #0
 8004452:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445c:	2b00      	cmp	r3, #0
 800445e:	d041      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004464:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004468:	d02a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800446a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800446e:	d824      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004470:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004474:	d008      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800447a:	d81e      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004484:	d010      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004486:	e018      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004488:	4b86      	ldr	r3, [pc, #536]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a85      	ldr	r2, [pc, #532]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004492:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004494:	e015      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3304      	adds	r3, #4
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fadd 	bl	8004a5c <RCCEx_PLLSAI1_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a6:	e00c      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3320      	adds	r3, #32
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fbc6 	bl	8004c40 <RCCEx_PLLSAI2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	74fb      	strb	r3, [r7, #19]
      break;
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c8:	4b76      	ldr	r3, [pc, #472]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d6:	4973      	ldr	r1, [pc, #460]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044de:	e001      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d041      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044f8:	d02a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044fe:	d824      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800450a:	d81e      	bhi.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004514:	d010      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004516:	e018      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004518:	4b62      	ldr	r3, [pc, #392]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a61      	ldr	r2, [pc, #388]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004524:	e015      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fa95 	bl	8004a5c <RCCEx_PLLSAI1_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004536:	e00c      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3320      	adds	r3, #32
 800453c:	2100      	movs	r1, #0
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fb7e 	bl	8004c40 <RCCEx_PLLSAI2_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004548:	e003      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	74fb      	strb	r3, [r7, #19]
      break;
 800454e:	e000      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004552:	7cfb      	ldrb	r3, [r7, #19]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004558:	4b52      	ldr	r3, [pc, #328]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004566:	494f      	ldr	r1, [pc, #316]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800456e:	e001      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80a0 	beq.w	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004582:	2300      	movs	r3, #0
 8004584:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004596:	2300      	movs	r3, #0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	4a40      	ldr	r2, [pc, #256]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a6:	6593      	str	r3, [r2, #88]	; 0x58
 80045a8:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b4:	2301      	movs	r3, #1
 80045b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b8:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c4:	f7fc fd84 	bl	80010d0 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045ca:	e009      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fc fd80 	bl	80010d0 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d902      	bls.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	74fb      	strb	r3, [r7, #19]
        break;
 80045de:	e005      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e0:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ef      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d15c      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045f2:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01f      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	429a      	cmp	r2, r3
 800460e:	d019      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004610:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	4a20      	ldr	r2, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800462c:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464e:	f7fc fd3f 	bl	80010d0 <HAL_GetTick>
 8004652:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004654:	e00b      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fc fd3b 	bl	80010d0 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d902      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	74fb      	strb	r3, [r7, #19]
            break;
 800466c:	e006      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0ec      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800467c:	7cfb      	ldrb	r3, [r7, #19]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10c      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	4904      	ldr	r1, [pc, #16]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800469a:	e009      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	74bb      	strb	r3, [r7, #18]
 80046a0:	e006      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b0:	7c7b      	ldrb	r3, [r7, #17]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b6:	4ba6      	ldr	r3, [pc, #664]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	4aa5      	ldr	r2, [pc, #660]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ce:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f023 0203 	bic.w	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	499c      	ldr	r1, [pc, #624]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f0:	4b97      	ldr	r3, [pc, #604]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 020c 	bic.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	4994      	ldr	r1, [pc, #592]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004712:	4b8f      	ldr	r3, [pc, #572]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	498b      	ldr	r1, [pc, #556]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004734:	4b86      	ldr	r3, [pc, #536]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	4983      	ldr	r1, [pc, #524]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004756:	4b7e      	ldr	r3, [pc, #504]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004764:	497a      	ldr	r1, [pc, #488]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004778:	4b75      	ldr	r3, [pc, #468]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	4972      	ldr	r1, [pc, #456]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800479a:	4b6d      	ldr	r3, [pc, #436]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a8:	4969      	ldr	r1, [pc, #420]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047bc:	4b64      	ldr	r3, [pc, #400]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ca:	4961      	ldr	r1, [pc, #388]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047de:	4b5c      	ldr	r3, [pc, #368]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ec:	4958      	ldr	r1, [pc, #352]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004800:	4b53      	ldr	r3, [pc, #332]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	4950      	ldr	r1, [pc, #320]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004822:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4947      	ldr	r1, [pc, #284]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004844:	4b42      	ldr	r3, [pc, #264]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004852:	493f      	ldr	r1, [pc, #252]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d028      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004866:	4b3a      	ldr	r3, [pc, #232]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4936      	ldr	r1, [pc, #216]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004884:	d106      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004886:	4b32      	ldr	r3, [pc, #200]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	4a31      	ldr	r2, [pc, #196]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800488c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004890:	60d3      	str	r3, [r2, #12]
 8004892:	e011      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800489c:	d10c      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3304      	adds	r3, #4
 80048a2:	2101      	movs	r1, #1
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f8d9 	bl	8004a5c <RCCEx_PLLSAI1_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d028      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048c4:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d2:	491f      	ldr	r1, [pc, #124]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e2:	d106      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ee:	60d3      	str	r3, [r2, #12]
 80048f0:	e011      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048fa:	d10c      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f8aa 	bl	8004a5c <RCCEx_PLLSAI1_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800490c:	7cfb      	ldrb	r3, [r7, #19]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d02a      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004930:	4907      	ldr	r1, [pc, #28]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004940:	d108      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004942:	4b03      	ldr	r3, [pc, #12]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	4a02      	ldr	r2, [pc, #8]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800494c:	60d3      	str	r3, [r2, #12]
 800494e:	e013      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004950:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800495c:	d10c      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f879 	bl	8004a5c <RCCEx_PLLSAI1_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004984:	4b2c      	ldr	r3, [pc, #176]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004992:	4929      	ldr	r1, [pc, #164]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a2:	d10d      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	2102      	movs	r1, #2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f856 	bl	8004a5c <RCCEx_PLLSAI1_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d014      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	74bb      	strb	r3, [r7, #18]
 80049be:	e011      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3320      	adds	r3, #32
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f935 	bl	8004c40 <RCCEx_PLLSAI2_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a00:	490d      	ldr	r1, [pc, #52]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a24:	4904      	ldr	r1, [pc, #16]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000

08004a3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a46:	f043 0304 	orr.w	r3, r3, #4
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000

08004a5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a6a:	4b74      	ldr	r3, [pc, #464]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d018      	beq.n	8004aa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a76:	4b71      	ldr	r3, [pc, #452]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0203 	and.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d10d      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
       ||
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a8e:	4b6b      	ldr	r3, [pc, #428]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d047      	beq.n	8004b32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
 8004aa6:	e044      	b.n	8004b32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d018      	beq.n	8004ae2 <RCCEx_PLLSAI1_Config+0x86>
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d825      	bhi.n	8004b00 <RCCEx_PLLSAI1_Config+0xa4>
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d002      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x62>
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d009      	beq.n	8004ad0 <RCCEx_PLLSAI1_Config+0x74>
 8004abc:	e020      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004abe:	4b5f      	ldr	r3, [pc, #380]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11d      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ace:	e01a      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ad0:	4b5a      	ldr	r3, [pc, #360]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d116      	bne.n	8004b0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae0:	e013      	b.n	8004b0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ae2:	4b56      	ldr	r3, [pc, #344]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aee:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004afe:	e006      	b.n	8004b0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e004      	b.n	8004b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b06:	bf00      	nop
 8004b08:	e002      	b.n	8004b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e000      	b.n	8004b10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10d      	bne.n	8004b32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b16:	4b49      	ldr	r3, [pc, #292]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	4943      	ldr	r1, [pc, #268]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d17c      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b38:	4b40      	ldr	r3, [pc, #256]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a3f      	ldr	r2, [pc, #252]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b44:	f7fc fac4 	bl	80010d0 <HAL_GetTick>
 8004b48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b4a:	e009      	b.n	8004b60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b4c:	f7fc fac0 	bl	80010d0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d902      	bls.n	8004b60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b5e:	e005      	b.n	8004b6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b60:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ef      	bne.n	8004b4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d15f      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d110      	bne.n	8004b9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b78:	4b30      	ldr	r3, [pc, #192]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6892      	ldr	r2, [r2, #8]
 8004b88:	0211      	lsls	r1, r2, #8
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	06d2      	lsls	r2, r2, #27
 8004b90:	430a      	orrs	r2, r1
 8004b92:	492a      	ldr	r1, [pc, #168]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	610b      	str	r3, [r1, #16]
 8004b98:	e027      	b.n	8004bea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d112      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba0:	4b26      	ldr	r3, [pc, #152]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ba8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6892      	ldr	r2, [r2, #8]
 8004bb0:	0211      	lsls	r1, r2, #8
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6912      	ldr	r2, [r2, #16]
 8004bb6:	0852      	lsrs	r2, r2, #1
 8004bb8:	3a01      	subs	r2, #1
 8004bba:	0552      	lsls	r2, r2, #21
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	491f      	ldr	r1, [pc, #124]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	610b      	str	r3, [r1, #16]
 8004bc4:	e011      	b.n	8004bea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	0211      	lsls	r1, r2, #8
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6952      	ldr	r2, [r2, #20]
 8004bdc:	0852      	lsrs	r2, r2, #1
 8004bde:	3a01      	subs	r2, #1
 8004be0:	0652      	lsls	r2, r2, #25
 8004be2:	430a      	orrs	r2, r1
 8004be4:	4915      	ldr	r1, [pc, #84]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a13      	ldr	r2, [pc, #76]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf6:	f7fc fa6b 	bl	80010d0 <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bfc:	e009      	b.n	8004c12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bfe:	f7fc fa67 	bl	80010d0 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d902      	bls.n	8004c12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	73fb      	strb	r3, [r7, #15]
          break;
 8004c10:	e005      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ef      	beq.n	8004bfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	4903      	ldr	r1, [pc, #12]	; (8004c3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000

08004c40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c4e:	4b69      	ldr	r3, [pc, #420]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d018      	beq.n	8004c8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c5a:	4b66      	ldr	r3, [pc, #408]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0203 	and.w	r2, r3, #3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d10d      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c72:	4b60      	ldr	r3, [pc, #384]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
       ||
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d047      	beq.n	8004d16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
 8004c8a:	e044      	b.n	8004d16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d018      	beq.n	8004cc6 <RCCEx_PLLSAI2_Config+0x86>
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d825      	bhi.n	8004ce4 <RCCEx_PLLSAI2_Config+0xa4>
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d002      	beq.n	8004ca2 <RCCEx_PLLSAI2_Config+0x62>
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d009      	beq.n	8004cb4 <RCCEx_PLLSAI2_Config+0x74>
 8004ca0:	e020      	b.n	8004ce4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ca2:	4b54      	ldr	r3, [pc, #336]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11d      	bne.n	8004cea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb2:	e01a      	b.n	8004cea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cb4:	4b4f      	ldr	r3, [pc, #316]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d116      	bne.n	8004cee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc4:	e013      	b.n	8004cee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cc6:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10f      	bne.n	8004cf2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cd2:	4b48      	ldr	r3, [pc, #288]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ce2:	e006      	b.n	8004cf2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e004      	b.n	8004cf4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cea:	bf00      	nop
 8004cec:	e002      	b.n	8004cf4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e000      	b.n	8004cf4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10d      	bne.n	8004d16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6819      	ldr	r1, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	4938      	ldr	r1, [pc, #224]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d166      	bne.n	8004dea <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d1c:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a34      	ldr	r2, [pc, #208]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d28:	f7fc f9d2 	bl	80010d0 <HAL_GetTick>
 8004d2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d2e:	e009      	b.n	8004d44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d30:	f7fc f9ce 	bl	80010d0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d902      	bls.n	8004d44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	73fb      	strb	r3, [r7, #15]
        break;
 8004d42:	e005      	b.n	8004d50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1ef      	bne.n	8004d30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d149      	bne.n	8004dea <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d110      	bne.n	8004d7e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004d64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6892      	ldr	r2, [r2, #8]
 8004d6c:	0211      	lsls	r1, r2, #8
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68d2      	ldr	r2, [r2, #12]
 8004d72:	06d2      	lsls	r2, r2, #27
 8004d74:	430a      	orrs	r2, r1
 8004d76:	491f      	ldr	r1, [pc, #124]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	614b      	str	r3, [r1, #20]
 8004d7c:	e011      	b.n	8004da2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d7e:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6892      	ldr	r2, [r2, #8]
 8004d8e:	0211      	lsls	r1, r2, #8
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6912      	ldr	r2, [r2, #16]
 8004d94:	0852      	lsrs	r2, r2, #1
 8004d96:	3a01      	subs	r2, #1
 8004d98:	0652      	lsls	r2, r2, #25
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	4915      	ldr	r1, [pc, #84]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dae:	f7fc f98f 	bl	80010d0 <HAL_GetTick>
 8004db2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db4:	e009      	b.n	8004dca <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db6:	f7fc f98b 	bl	80010d0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d902      	bls.n	8004dca <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	73fb      	strb	r3, [r7, #15]
          break;
 8004dc8:	e005      	b.n	8004dd6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0ef      	beq.n	8004db6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	4903      	ldr	r1, [pc, #12]	; (8004df4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000

08004df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e049      	b.n	8004e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fb ffe8 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 f89e 	bl	8004f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e047      	b.n	8004f50 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a23      	ldr	r2, [pc, #140]	; (8004f5c <HAL_TIM_Base_Start+0xb4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01d      	beq.n	8004f0e <HAL_TIM_Base_Start+0x66>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d018      	beq.n	8004f0e <HAL_TIM_Base_Start+0x66>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <HAL_TIM_Base_Start+0xb8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIM_Base_Start+0x66>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIM_Base_Start+0xbc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIM_Base_Start+0x66>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <HAL_TIM_Base_Start+0xc0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIM_Base_Start+0x66>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIM_Base_Start+0xc4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIM_Base_Start+0x66>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_TIM_Base_Start+0xc8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d115      	bne.n	8004f3a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <HAL_TIM_Base_Start+0xcc>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d015      	beq.n	8004f4c <HAL_TIM_Base_Start+0xa4>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f26:	d011      	beq.n	8004f4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	e008      	b.n	8004f4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0201 	orr.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e000      	b.n	8004f4e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40012c00 	.word	0x40012c00
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40013400 	.word	0x40013400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	00010007 	.word	0x00010007

08004f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a40      	ldr	r2, [pc, #256]	; (800508c <TIM_Base_SetConfig+0x114>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d00f      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3d      	ldr	r2, [pc, #244]	; (8005090 <TIM_Base_SetConfig+0x118>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3c      	ldr	r2, [pc, #240]	; (8005094 <TIM_Base_SetConfig+0x11c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3b      	ldr	r2, [pc, #236]	; (8005098 <TIM_Base_SetConfig+0x120>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3a      	ldr	r2, [pc, #232]	; (800509c <TIM_Base_SetConfig+0x124>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2f      	ldr	r2, [pc, #188]	; (800508c <TIM_Base_SetConfig+0x114>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01f      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd8:	d01b      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <TIM_Base_SetConfig+0x118>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d017      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <TIM_Base_SetConfig+0x11c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <TIM_Base_SetConfig+0x120>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00f      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	; (800509c <TIM_Base_SetConfig+0x124>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <TIM_Base_SetConfig+0x128>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <TIM_Base_SetConfig+0x12c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <TIM_Base_SetConfig+0x130>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d108      	bne.n	8005024 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a10      	ldr	r2, [pc, #64]	; (800508c <TIM_Base_SetConfig+0x114>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00f      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <TIM_Base_SetConfig+0x124>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <TIM_Base_SetConfig+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <TIM_Base_SetConfig+0x12c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <TIM_Base_SetConfig+0x130>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d103      	bne.n	8005078 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	615a      	str	r2, [r3, #20]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40013400 	.word	0x40013400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800

080050ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050c0:	2302      	movs	r3, #2
 80050c2:	e068      	b.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2e      	ldr	r2, [pc, #184]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01d      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005136:	d018      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1b      	ldr	r2, [pc, #108]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a18      	ldr	r2, [pc, #96]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10c      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4313      	orrs	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40014000 	.word	0x40014000

080051bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e040      	b.n	8005250 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fb fda8 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2224      	movs	r2, #36	; 0x24
 80051e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fae0 	bl	80057c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f825 	bl	8005258 <UART_SetConfig>
 800520e:	4603      	mov	r3, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e01b      	b.n	8005250 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005226:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005236:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fb5f 	bl	800590c <UART_CheckIdleState>
 800524e:	4603      	mov	r3, r0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800525c:	b08a      	sub	sp, #40	; 0x28
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	431a      	orrs	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	4313      	orrs	r3, r2
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4ba4      	ldr	r3, [pc, #656]	; (8005518 <UART_SetConfig+0x2c0>)
 8005288:	4013      	ands	r3, r2
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005290:	430b      	orrs	r3, r1
 8005292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a99      	ldr	r2, [pc, #612]	; (800551c <UART_SetConfig+0x2c4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	4313      	orrs	r3, r2
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	430a      	orrs	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a90      	ldr	r2, [pc, #576]	; (8005520 <UART_SetConfig+0x2c8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d126      	bne.n	8005330 <UART_SetConfig+0xd8>
 80052e2:	4b90      	ldr	r3, [pc, #576]	; (8005524 <UART_SetConfig+0x2cc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d81b      	bhi.n	8005328 <UART_SetConfig+0xd0>
 80052f0:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <UART_SetConfig+0xa0>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	08005309 	.word	0x08005309
 80052fc:	08005319 	.word	0x08005319
 8005300:	08005311 	.word	0x08005311
 8005304:	08005321 	.word	0x08005321
 8005308:	2301      	movs	r3, #1
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e116      	b.n	800553e <UART_SetConfig+0x2e6>
 8005310:	2302      	movs	r3, #2
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e112      	b.n	800553e <UART_SetConfig+0x2e6>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e10e      	b.n	800553e <UART_SetConfig+0x2e6>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e10a      	b.n	800553e <UART_SetConfig+0x2e6>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e106      	b.n	800553e <UART_SetConfig+0x2e6>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a7c      	ldr	r2, [pc, #496]	; (8005528 <UART_SetConfig+0x2d0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d138      	bne.n	80053ac <UART_SetConfig+0x154>
 800533a:	4b7a      	ldr	r3, [pc, #488]	; (8005524 <UART_SetConfig+0x2cc>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f003 030c 	and.w	r3, r3, #12
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d82d      	bhi.n	80053a4 <UART_SetConfig+0x14c>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0xf8>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005385 	.word	0x08005385
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053a5 	.word	0x080053a5
 8005360:	08005395 	.word	0x08005395
 8005364:	080053a5 	.word	0x080053a5
 8005368:	080053a5 	.word	0x080053a5
 800536c:	080053a5 	.word	0x080053a5
 8005370:	0800538d 	.word	0x0800538d
 8005374:	080053a5 	.word	0x080053a5
 8005378:	080053a5 	.word	0x080053a5
 800537c:	080053a5 	.word	0x080053a5
 8005380:	0800539d 	.word	0x0800539d
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538a:	e0d8      	b.n	800553e <UART_SetConfig+0x2e6>
 800538c:	2302      	movs	r3, #2
 800538e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005392:	e0d4      	b.n	800553e <UART_SetConfig+0x2e6>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539a:	e0d0      	b.n	800553e <UART_SetConfig+0x2e6>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e0cc      	b.n	800553e <UART_SetConfig+0x2e6>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e0c8      	b.n	800553e <UART_SetConfig+0x2e6>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5e      	ldr	r2, [pc, #376]	; (800552c <UART_SetConfig+0x2d4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d125      	bne.n	8005402 <UART_SetConfig+0x1aa>
 80053b6:	4b5b      	ldr	r3, [pc, #364]	; (8005524 <UART_SetConfig+0x2cc>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053c0:	2b30      	cmp	r3, #48	; 0x30
 80053c2:	d016      	beq.n	80053f2 <UART_SetConfig+0x19a>
 80053c4:	2b30      	cmp	r3, #48	; 0x30
 80053c6:	d818      	bhi.n	80053fa <UART_SetConfig+0x1a2>
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d00a      	beq.n	80053e2 <UART_SetConfig+0x18a>
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d814      	bhi.n	80053fa <UART_SetConfig+0x1a2>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <UART_SetConfig+0x182>
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d008      	beq.n	80053ea <UART_SetConfig+0x192>
 80053d8:	e00f      	b.n	80053fa <UART_SetConfig+0x1a2>
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e0:	e0ad      	b.n	800553e <UART_SetConfig+0x2e6>
 80053e2:	2302      	movs	r3, #2
 80053e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e8:	e0a9      	b.n	800553e <UART_SetConfig+0x2e6>
 80053ea:	2304      	movs	r3, #4
 80053ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f0:	e0a5      	b.n	800553e <UART_SetConfig+0x2e6>
 80053f2:	2308      	movs	r3, #8
 80053f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f8:	e0a1      	b.n	800553e <UART_SetConfig+0x2e6>
 80053fa:	2310      	movs	r3, #16
 80053fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005400:	e09d      	b.n	800553e <UART_SetConfig+0x2e6>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <UART_SetConfig+0x2d8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d125      	bne.n	8005458 <UART_SetConfig+0x200>
 800540c:	4b45      	ldr	r3, [pc, #276]	; (8005524 <UART_SetConfig+0x2cc>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005416:	2bc0      	cmp	r3, #192	; 0xc0
 8005418:	d016      	beq.n	8005448 <UART_SetConfig+0x1f0>
 800541a:	2bc0      	cmp	r3, #192	; 0xc0
 800541c:	d818      	bhi.n	8005450 <UART_SetConfig+0x1f8>
 800541e:	2b80      	cmp	r3, #128	; 0x80
 8005420:	d00a      	beq.n	8005438 <UART_SetConfig+0x1e0>
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d814      	bhi.n	8005450 <UART_SetConfig+0x1f8>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <UART_SetConfig+0x1d8>
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d008      	beq.n	8005440 <UART_SetConfig+0x1e8>
 800542e:	e00f      	b.n	8005450 <UART_SetConfig+0x1f8>
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e082      	b.n	800553e <UART_SetConfig+0x2e6>
 8005438:	2302      	movs	r3, #2
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543e:	e07e      	b.n	800553e <UART_SetConfig+0x2e6>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005446:	e07a      	b.n	800553e <UART_SetConfig+0x2e6>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544e:	e076      	b.n	800553e <UART_SetConfig+0x2e6>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005456:	e072      	b.n	800553e <UART_SetConfig+0x2e6>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a35      	ldr	r2, [pc, #212]	; (8005534 <UART_SetConfig+0x2dc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d12a      	bne.n	80054b8 <UART_SetConfig+0x260>
 8005462:	4b30      	ldr	r3, [pc, #192]	; (8005524 <UART_SetConfig+0x2cc>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005470:	d01a      	beq.n	80054a8 <UART_SetConfig+0x250>
 8005472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005476:	d81b      	bhi.n	80054b0 <UART_SetConfig+0x258>
 8005478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547c:	d00c      	beq.n	8005498 <UART_SetConfig+0x240>
 800547e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005482:	d815      	bhi.n	80054b0 <UART_SetConfig+0x258>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <UART_SetConfig+0x238>
 8005488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548c:	d008      	beq.n	80054a0 <UART_SetConfig+0x248>
 800548e:	e00f      	b.n	80054b0 <UART_SetConfig+0x258>
 8005490:	2300      	movs	r3, #0
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e052      	b.n	800553e <UART_SetConfig+0x2e6>
 8005498:	2302      	movs	r3, #2
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e04e      	b.n	800553e <UART_SetConfig+0x2e6>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a6:	e04a      	b.n	800553e <UART_SetConfig+0x2e6>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ae:	e046      	b.n	800553e <UART_SetConfig+0x2e6>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b6:	e042      	b.n	800553e <UART_SetConfig+0x2e6>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a17      	ldr	r2, [pc, #92]	; (800551c <UART_SetConfig+0x2c4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d13a      	bne.n	8005538 <UART_SetConfig+0x2e0>
 80054c2:	4b18      	ldr	r3, [pc, #96]	; (8005524 <UART_SetConfig+0x2cc>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d0:	d01a      	beq.n	8005508 <UART_SetConfig+0x2b0>
 80054d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d6:	d81b      	bhi.n	8005510 <UART_SetConfig+0x2b8>
 80054d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054dc:	d00c      	beq.n	80054f8 <UART_SetConfig+0x2a0>
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e2:	d815      	bhi.n	8005510 <UART_SetConfig+0x2b8>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <UART_SetConfig+0x298>
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d008      	beq.n	8005500 <UART_SetConfig+0x2a8>
 80054ee:	e00f      	b.n	8005510 <UART_SetConfig+0x2b8>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f6:	e022      	b.n	800553e <UART_SetConfig+0x2e6>
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e01e      	b.n	800553e <UART_SetConfig+0x2e6>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005506:	e01a      	b.n	800553e <UART_SetConfig+0x2e6>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e016      	b.n	800553e <UART_SetConfig+0x2e6>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e012      	b.n	800553e <UART_SetConfig+0x2e6>
 8005518:	efff69f3 	.word	0xefff69f3
 800551c:	40008000 	.word	0x40008000
 8005520:	40013800 	.word	0x40013800
 8005524:	40021000 	.word	0x40021000
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40004c00 	.word	0x40004c00
 8005534:	40005000 	.word	0x40005000
 8005538:	2310      	movs	r3, #16
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a9f      	ldr	r2, [pc, #636]	; (80057c0 <UART_SetConfig+0x568>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d17a      	bne.n	800563e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800554c:	2b08      	cmp	r3, #8
 800554e:	d824      	bhi.n	800559a <UART_SetConfig+0x342>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0x300>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800557d 	.word	0x0800557d
 800555c:	0800559b 	.word	0x0800559b
 8005560:	08005585 	.word	0x08005585
 8005564:	0800559b 	.word	0x0800559b
 8005568:	0800558b 	.word	0x0800558b
 800556c:	0800559b 	.word	0x0800559b
 8005570:	0800559b 	.word	0x0800559b
 8005574:	0800559b 	.word	0x0800559b
 8005578:	08005593 	.word	0x08005593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557c:	f7fe fed6 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005580:	61f8      	str	r0, [r7, #28]
        break;
 8005582:	e010      	b.n	80055a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005584:	4b8f      	ldr	r3, [pc, #572]	; (80057c4 <UART_SetConfig+0x56c>)
 8005586:	61fb      	str	r3, [r7, #28]
        break;
 8005588:	e00d      	b.n	80055a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800558a:	f7fe fe37 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 800558e:	61f8      	str	r0, [r7, #28]
        break;
 8005590:	e009      	b.n	80055a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005596:	61fb      	str	r3, [r7, #28]
        break;
 8005598:	e005      	b.n	80055a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80fb 	beq.w	80057a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d305      	bcc.n	80055ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d903      	bls.n	80055d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055d0:	e0e8      	b.n	80057a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2200      	movs	r2, #0
 80055d6:	461c      	mov	r4, r3
 80055d8:	4615      	mov	r5, r2
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	022b      	lsls	r3, r5, #8
 80055e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80055e8:	0222      	lsls	r2, r4, #8
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	6849      	ldr	r1, [r1, #4]
 80055ee:	0849      	lsrs	r1, r1, #1
 80055f0:	2000      	movs	r0, #0
 80055f2:	4688      	mov	r8, r1
 80055f4:	4681      	mov	r9, r0
 80055f6:	eb12 0a08 	adds.w	sl, r2, r8
 80055fa:	eb43 0b09 	adc.w	fp, r3, r9
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	603b      	str	r3, [r7, #0]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560c:	4650      	mov	r0, sl
 800560e:	4659      	mov	r1, fp
 8005610:	f7fa fdec 	bl	80001ec <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005622:	d308      	bcc.n	8005636 <UART_SetConfig+0x3de>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562a:	d204      	bcs.n	8005636 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	e0b6      	b.n	80057a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800563c:	e0b2      	b.n	80057a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005646:	d15e      	bne.n	8005706 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005648:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800564c:	2b08      	cmp	r3, #8
 800564e:	d828      	bhi.n	80056a2 <UART_SetConfig+0x44a>
 8005650:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x400>)
 8005652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005656:	bf00      	nop
 8005658:	0800567d 	.word	0x0800567d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800568d 	.word	0x0800568d
 8005664:	080056a3 	.word	0x080056a3
 8005668:	08005693 	.word	0x08005693
 800566c:	080056a3 	.word	0x080056a3
 8005670:	080056a3 	.word	0x080056a3
 8005674:	080056a3 	.word	0x080056a3
 8005678:	0800569b 	.word	0x0800569b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800567c:	f7fe fe56 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8005680:	61f8      	str	r0, [r7, #28]
        break;
 8005682:	e014      	b.n	80056ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe fe68 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8005688:	61f8      	str	r0, [r7, #28]
        break;
 800568a:	e010      	b.n	80056ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800568c:	4b4d      	ldr	r3, [pc, #308]	; (80057c4 <UART_SetConfig+0x56c>)
 800568e:	61fb      	str	r3, [r7, #28]
        break;
 8005690:	e00d      	b.n	80056ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005692:	f7fe fdb3 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8005696:	61f8      	str	r0, [r7, #28]
        break;
 8005698:	e009      	b.n	80056ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800569a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800569e:	61fb      	str	r3, [r7, #28]
        break;
 80056a0:	e005      	b.n	80056ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d077      	beq.n	80057a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	005a      	lsls	r2, r3, #1
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	441a      	add	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b0f      	cmp	r3, #15
 80056ce:	d916      	bls.n	80056fe <UART_SetConfig+0x4a6>
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d6:	d212      	bcs.n	80056fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f023 030f 	bic.w	r3, r3, #15
 80056e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	8afb      	ldrh	r3, [r7, #22]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	8afa      	ldrh	r2, [r7, #22]
 80056fa:	60da      	str	r2, [r3, #12]
 80056fc:	e052      	b.n	80057a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005704:	e04e      	b.n	80057a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800570a:	2b08      	cmp	r3, #8
 800570c:	d827      	bhi.n	800575e <UART_SetConfig+0x506>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0x4bc>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	0800575f 	.word	0x0800575f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fe fdf8 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 800573c:	61f8      	str	r0, [r7, #28]
        break;
 800573e:	e014      	b.n	800576a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fe fe0a 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8005744:	61f8      	str	r0, [r7, #28]
        break;
 8005746:	e010      	b.n	800576a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <UART_SetConfig+0x56c>)
 800574a:	61fb      	str	r3, [r7, #28]
        break;
 800574c:	e00d      	b.n	800576a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fe fd55 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 8005752:	61f8      	str	r0, [r7, #28]
        break;
 8005754:	e009      	b.n	800576a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	61fb      	str	r3, [r7, #28]
        break;
 800575c:	e005      	b.n	800576a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005768:	bf00      	nop
    }

    if (pclk != 0U)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d019      	beq.n	80057a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	085a      	lsrs	r2, r3, #1
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	d909      	bls.n	800579e <UART_SetConfig+0x546>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d205      	bcs.n	800579e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	e002      	b.n	80057a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3728      	adds	r7, #40	; 0x28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057be:	bf00      	nop
 80057c0:	40008000 	.word	0x40008000
 80057c4:	00f42400 	.word	0x00f42400

080057c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01a      	beq.n	80058de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c6:	d10a      	bne.n	80058de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b098      	sub	sp, #96	; 0x60
 8005910:	af02      	add	r7, sp, #8
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800591c:	f7fb fbd8 	bl	80010d0 <HAL_GetTick>
 8005920:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b08      	cmp	r3, #8
 800592e:	d12e      	bne.n	800598e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005938:	2200      	movs	r2, #0
 800593a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f88c 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d021      	beq.n	800598e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595e:	653b      	str	r3, [r7, #80]	; 0x50
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005968:	647b      	str	r3, [r7, #68]	; 0x44
 800596a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800596e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e062      	b.n	8005a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d149      	bne.n	8005a30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f856 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03c      	beq.n	8005a30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	623b      	str	r3, [r7, #32]
   return(result);
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	633b      	str	r3, [r7, #48]	; 0x30
 80059d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3308      	adds	r3, #8
 80059ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3308      	adds	r3, #8
 8005a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	617b      	str	r3, [r7, #20]
   return(result);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e011      	b.n	8005a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3758      	adds	r7, #88	; 0x58
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6c:	e049      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d045      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a76:	f7fb fb2b 	bl	80010d0 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d302      	bcc.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e048      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d031      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d110      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f838 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2208      	movs	r2, #8
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e029      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005adc:	d111      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f81e 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e00f      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d0a6      	beq.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b095      	sub	sp, #84	; 0x54
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40
 8005b52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3308      	adds	r3, #8
 8005b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d118      	bne.n	8005bd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f023 0310 	bic.w	r3, r3, #16
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005be6:	bf00      	nop
 8005be8:	3754      	adds	r7, #84	; 0x54
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	f107 001c 	add.w	r0, r7, #28
 8005c00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fa65 	bl	80060e0 <USB_CoreReset>
 8005c16:	4603      	mov	r3, r0
 8005c18:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c2c:	e005      	b.n	8005c3a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c46:	b004      	add	sp, #16
 8005c48:	4770      	bx	lr

08005c4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 0201 	bic.w	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d115      	bne.n	8005cba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f7fb fa24 	bl	80010e8 <HAL_Delay>
      ms++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa0c 	bl	80060c4 <USB_GetMode>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d01e      	beq.n	8005cf0 <USB_SetCurrentMode+0x84>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b31      	cmp	r3, #49	; 0x31
 8005cb6:	d9f0      	bls.n	8005c9a <USB_SetCurrentMode+0x2e>
 8005cb8:	e01a      	b.n	8005cf0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d115      	bne.n	8005cec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ccc:	2001      	movs	r0, #1
 8005cce:	f7fb fa0b 	bl	80010e8 <HAL_Delay>
      ms++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f9f3 	bl	80060c4 <USB_GetMode>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <USB_SetCurrentMode+0x84>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b31      	cmp	r3, #49	; 0x31
 8005ce8:	d9f0      	bls.n	8005ccc <USB_SetCurrentMode+0x60>
 8005cea:	e001      	b.n	8005cf0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e005      	b.n	8005cfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b32      	cmp	r3, #50	; 0x32
 8005cf4:	d101      	bne.n	8005cfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d04:	b084      	sub	sp, #16
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b086      	sub	sp, #24
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	e009      	b.n	8005d38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	3340      	adds	r3, #64	; 0x40
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3301      	adds	r3, #1
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b0e      	cmp	r3, #14
 8005d3c:	d9f2      	bls.n	8005d24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11c      	bne.n	8005d7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d52:	f043 0302 	orr.w	r3, r3, #2
 8005d56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e005      	b.n	8005d8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d90:	461a      	mov	r2, r3
 8005d92:	2300      	movs	r3, #0
 8005d94:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d96:	2103      	movs	r1, #3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f959 	bl	8006050 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d9e:	2110      	movs	r1, #16
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f8f1 	bl	8005f88 <USB_FlushTxFifo>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f91d 	bl	8005ff0 <USB_FlushRxFifo>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dde:	461a      	mov	r2, r3
 8005de0:	2300      	movs	r3, #0
 8005de2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	e043      	b.n	8005e72 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e00:	d118      	bne.n	8005e34 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	461a      	mov	r2, r3
 8005e16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e013      	b.n	8005e46 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	e008      	b.n	8005e46 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	461a      	mov	r2, r3
 8005e42:	2300      	movs	r3, #0
 8005e44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	461a      	mov	r2, r3
 8005e54:	2300      	movs	r3, #0
 8005e56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	461a      	mov	r2, r3
 8005e66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d3b7      	bcc.n	8005dea <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	e043      	b.n	8005f08 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e96:	d118      	bne.n	8005eca <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e013      	b.n	8005edc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	e008      	b.n	8005edc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efa:	461a      	mov	r2, r3
 8005efc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3301      	adds	r3, #1
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d3b7      	bcc.n	8005e80 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f043 0210 	orr.w	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <USB_DevInit+0x280>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f043 0208 	orr.w	r2, r3, #8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d107      	bne.n	8005f72 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f6a:	f043 0304 	orr.w	r3, r3, #4
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f7e:	b004      	add	sp, #16
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	803c3800 	.word	0x803c3800

08005f88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <USB_FlushTxFifo+0x64>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d901      	bls.n	8005fa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e01b      	b.n	8005fe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	daf2      	bge.n	8005f96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	019b      	lsls	r3, r3, #6
 8005fb8:	f043 0220 	orr.w	r2, r3, #32
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a08      	ldr	r2, [pc, #32]	; (8005fec <USB_FlushTxFifo+0x64>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e006      	b.n	8005fe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d0f0      	beq.n	8005fc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	00030d40 	.word	0x00030d40

08005ff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <USB_FlushRxFifo+0x5c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e018      	b.n	8006040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	daf2      	bge.n	8005ffc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2210      	movs	r2, #16
 800601e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3301      	adds	r3, #1
 8006024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a08      	ldr	r2, [pc, #32]	; (800604c <USB_FlushRxFifo+0x5c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d901      	bls.n	8006032 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e006      	b.n	8006040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b10      	cmp	r3, #16
 800603c:	d0f0      	beq.n	8006020 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	00030d40 	.word	0x00030d40

08006050 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006070:	4313      	orrs	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006082:	b480      	push	{r7}
 8006084:	b085      	sub	sp, #20
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800609c:	f023 0303 	bic.w	r3, r3, #3
 80060a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060b0:	f043 0302 	orr.w	r3, r3, #2
 80060b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f003 0301 	and.w	r3, r3, #1
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4a13      	ldr	r2, [pc, #76]	; (8006144 <USB_CoreReset+0x64>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e01b      	b.n	8006136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	daf2      	bge.n	80060ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f043 0201 	orr.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a09      	ldr	r2, [pc, #36]	; (8006144 <USB_CoreReset+0x64>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d901      	bls.n	8006128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e006      	b.n	8006136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b01      	cmp	r3, #1
 8006132:	d0f0      	beq.n	8006116 <USB_CoreReset+0x36>

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	00030d40 	.word	0x00030d40

08006148 <arm_rfft_32_fast_init_f32>:
 8006148:	b178      	cbz	r0, 800616a <arm_rfft_32_fast_init_f32+0x22>
 800614a:	b430      	push	{r4, r5}
 800614c:	4908      	ldr	r1, [pc, #32]	; (8006170 <arm_rfft_32_fast_init_f32+0x28>)
 800614e:	4a09      	ldr	r2, [pc, #36]	; (8006174 <arm_rfft_32_fast_init_f32+0x2c>)
 8006150:	2310      	movs	r3, #16
 8006152:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006156:	8003      	strh	r3, [r0, #0]
 8006158:	2520      	movs	r5, #32
 800615a:	2414      	movs	r4, #20
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <arm_rfft_32_fast_init_f32+0x30>)
 800615e:	8205      	strh	r5, [r0, #16]
 8006160:	8184      	strh	r4, [r0, #12]
 8006162:	6143      	str	r3, [r0, #20]
 8006164:	bc30      	pop	{r4, r5}
 8006166:	2000      	movs	r0, #0
 8006168:	4770      	bx	lr
 800616a:	f04f 30ff 	mov.w	r0, #4294967295
 800616e:	4770      	bx	lr
 8006170:	08008778 	.word	0x08008778
 8006174:	0800d0b0 	.word	0x0800d0b0
 8006178:	08015e30 	.word	0x08015e30

0800617c <arm_rfft_64_fast_init_f32>:
 800617c:	b178      	cbz	r0, 800619e <arm_rfft_64_fast_init_f32+0x22>
 800617e:	b430      	push	{r4, r5}
 8006180:	4908      	ldr	r1, [pc, #32]	; (80061a4 <arm_rfft_64_fast_init_f32+0x28>)
 8006182:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <arm_rfft_64_fast_init_f32+0x2c>)
 8006184:	2320      	movs	r3, #32
 8006186:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800618a:	8003      	strh	r3, [r0, #0]
 800618c:	2540      	movs	r5, #64	; 0x40
 800618e:	2430      	movs	r4, #48	; 0x30
 8006190:	4b06      	ldr	r3, [pc, #24]	; (80061ac <arm_rfft_64_fast_init_f32+0x30>)
 8006192:	8205      	strh	r5, [r0, #16]
 8006194:	8184      	strh	r4, [r0, #12]
 8006196:	6143      	str	r3, [r0, #20]
 8006198:	bc30      	pop	{r4, r5}
 800619a:	2000      	movs	r0, #0
 800619c:	4770      	bx	lr
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	4770      	bx	lr
 80061a4:	0800a8d0 	.word	0x0800a8d0
 80061a8:	08011930 	.word	0x08011930
 80061ac:	0801a6b0 	.word	0x0801a6b0

080061b0 <arm_rfft_256_fast_init_f32>:
 80061b0:	b180      	cbz	r0, 80061d4 <arm_rfft_256_fast_init_f32+0x24>
 80061b2:	b430      	push	{r4, r5}
 80061b4:	4909      	ldr	r1, [pc, #36]	; (80061dc <arm_rfft_256_fast_init_f32+0x2c>)
 80061b6:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <arm_rfft_256_fast_init_f32+0x30>)
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061be:	8003      	strh	r3, [r0, #0]
 80061c0:	f44f 7580 	mov.w	r5, #256	; 0x100
 80061c4:	24d0      	movs	r4, #208	; 0xd0
 80061c6:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <arm_rfft_256_fast_init_f32+0x34>)
 80061c8:	8205      	strh	r5, [r0, #16]
 80061ca:	8184      	strh	r4, [r0, #12]
 80061cc:	6143      	str	r3, [r0, #20]
 80061ce:	bc30      	pop	{r4, r5}
 80061d0:	2000      	movs	r0, #0
 80061d2:	4770      	bx	lr
 80061d4:	f04f 30ff 	mov.w	r0, #4294967295
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	080085d8 	.word	0x080085d8
 80061e0:	0800ccb0 	.word	0x0800ccb0
 80061e4:	08015a30 	.word	0x08015a30

080061e8 <arm_rfft_512_fast_init_f32>:
 80061e8:	b190      	cbz	r0, 8006210 <arm_rfft_512_fast_init_f32+0x28>
 80061ea:	b430      	push	{r4, r5}
 80061ec:	490a      	ldr	r1, [pc, #40]	; (8006218 <arm_rfft_512_fast_init_f32+0x30>)
 80061ee:	4a0b      	ldr	r2, [pc, #44]	; (800621c <arm_rfft_512_fast_init_f32+0x34>)
 80061f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061f8:	8003      	strh	r3, [r0, #0]
 80061fa:	f44f 7500 	mov.w	r5, #512	; 0x200
 80061fe:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8006202:	4b07      	ldr	r3, [pc, #28]	; (8006220 <arm_rfft_512_fast_init_f32+0x38>)
 8006204:	8205      	strh	r5, [r0, #16]
 8006206:	8184      	strh	r4, [r0, #12]
 8006208:	6143      	str	r3, [r0, #20]
 800620a:	bc30      	pop	{r4, r5}
 800620c:	2000      	movs	r0, #0
 800620e:	4770      	bx	lr
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	0800a560 	.word	0x0800a560
 800621c:	08011130 	.word	0x08011130
 8006220:	08019eb0 	.word	0x08019eb0

08006224 <arm_rfft_1024_fast_init_f32>:
 8006224:	b190      	cbz	r0, 800624c <arm_rfft_1024_fast_init_f32+0x28>
 8006226:	b430      	push	{r4, r5}
 8006228:	490a      	ldr	r1, [pc, #40]	; (8006254 <arm_rfft_1024_fast_init_f32+0x30>)
 800622a:	4a0b      	ldr	r2, [pc, #44]	; (8006258 <arm_rfft_1024_fast_init_f32+0x34>)
 800622c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006230:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006234:	8003      	strh	r3, [r0, #0]
 8006236:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800623a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800623e:	4b07      	ldr	r3, [pc, #28]	; (800625c <arm_rfft_1024_fast_init_f32+0x38>)
 8006240:	8205      	strh	r5, [r0, #16]
 8006242:	8184      	strh	r4, [r0, #12]
 8006244:	6143      	str	r3, [r0, #20]
 8006246:	bc30      	pop	{r4, r5}
 8006248:	2000      	movs	r0, #0
 800624a:	4770      	bx	lr
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	0800a930 	.word	0x0800a930
 8006258:	08011a30 	.word	0x08011a30
 800625c:	08012a30 	.word	0x08012a30

08006260 <arm_rfft_2048_fast_init_f32>:
 8006260:	b190      	cbz	r0, 8006288 <arm_rfft_2048_fast_init_f32+0x28>
 8006262:	b430      	push	{r4, r5}
 8006264:	490a      	ldr	r1, [pc, #40]	; (8006290 <arm_rfft_2048_fast_init_f32+0x30>)
 8006266:	4a0b      	ldr	r2, [pc, #44]	; (8006294 <arm_rfft_2048_fast_init_f32+0x34>)
 8006268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006270:	8003      	strh	r3, [r0, #0]
 8006272:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8006276:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <arm_rfft_2048_fast_init_f32+0x38>)
 800627c:	8205      	strh	r5, [r0, #16]
 800627e:	8184      	strh	r4, [r0, #12]
 8006280:	6143      	str	r3, [r0, #20]
 8006282:	bc30      	pop	{r4, r5}
 8006284:	2000      	movs	r0, #0
 8006286:	4770      	bx	lr
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	080077c8 	.word	0x080077c8
 8006294:	0800acb0 	.word	0x0800acb0
 8006298:	08013a30 	.word	0x08013a30

0800629c <arm_rfft_4096_fast_init_f32>:
 800629c:	b190      	cbz	r0, 80062c4 <arm_rfft_4096_fast_init_f32+0x28>
 800629e:	b430      	push	{r4, r5}
 80062a0:	490a      	ldr	r1, [pc, #40]	; (80062cc <arm_rfft_4096_fast_init_f32+0x30>)
 80062a2:	4a0b      	ldr	r2, [pc, #44]	; (80062d0 <arm_rfft_4096_fast_init_f32+0x34>)
 80062a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80062ac:	8003      	strh	r3, [r0, #0]
 80062ae:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80062b2:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <arm_rfft_4096_fast_init_f32+0x38>)
 80062b8:	8205      	strh	r5, [r0, #16]
 80062ba:	8184      	strh	r4, [r0, #12]
 80062bc:	6143      	str	r3, [r0, #20]
 80062be:	bc30      	pop	{r4, r5}
 80062c0:	2000      	movs	r0, #0
 80062c2:	4770      	bx	lr
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	080087a0 	.word	0x080087a0
 80062d0:	0800d130 	.word	0x0800d130
 80062d4:	08015eb0 	.word	0x08015eb0

080062d8 <arm_rfft_fast_init_f32>:
 80062d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80062dc:	d01f      	beq.n	800631e <arm_rfft_fast_init_f32+0x46>
 80062de:	d90b      	bls.n	80062f8 <arm_rfft_fast_init_f32+0x20>
 80062e0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80062e4:	d019      	beq.n	800631a <arm_rfft_fast_init_f32+0x42>
 80062e6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80062ea:	d012      	beq.n	8006312 <arm_rfft_fast_init_f32+0x3a>
 80062ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80062f0:	d00d      	beq.n	800630e <arm_rfft_fast_init_f32+0x36>
 80062f2:	f04f 30ff 	mov.w	r0, #4294967295
 80062f6:	4770      	bx	lr
 80062f8:	2940      	cmp	r1, #64	; 0x40
 80062fa:	d00c      	beq.n	8006316 <arm_rfft_fast_init_f32+0x3e>
 80062fc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006300:	d003      	beq.n	800630a <arm_rfft_fast_init_f32+0x32>
 8006302:	2920      	cmp	r1, #32
 8006304:	d1f5      	bne.n	80062f2 <arm_rfft_fast_init_f32+0x1a>
 8006306:	4b07      	ldr	r3, [pc, #28]	; (8006324 <arm_rfft_fast_init_f32+0x4c>)
 8006308:	4718      	bx	r3
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <arm_rfft_fast_init_f32+0x50>)
 800630c:	4718      	bx	r3
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <arm_rfft_fast_init_f32+0x54>)
 8006310:	4718      	bx	r3
 8006312:	4b07      	ldr	r3, [pc, #28]	; (8006330 <arm_rfft_fast_init_f32+0x58>)
 8006314:	4718      	bx	r3
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <arm_rfft_fast_init_f32+0x5c>)
 8006318:	e7f6      	b.n	8006308 <arm_rfft_fast_init_f32+0x30>
 800631a:	4b07      	ldr	r3, [pc, #28]	; (8006338 <arm_rfft_fast_init_f32+0x60>)
 800631c:	e7f4      	b.n	8006308 <arm_rfft_fast_init_f32+0x30>
 800631e:	4b07      	ldr	r3, [pc, #28]	; (800633c <arm_rfft_fast_init_f32+0x64>)
 8006320:	e7f2      	b.n	8006308 <arm_rfft_fast_init_f32+0x30>
 8006322:	bf00      	nop
 8006324:	08006149 	.word	0x08006149
 8006328:	080061b1 	.word	0x080061b1
 800632c:	08006225 	.word	0x08006225
 8006330:	0800629d 	.word	0x0800629d
 8006334:	0800617d 	.word	0x0800617d
 8006338:	08006261 	.word	0x08006261
 800633c:	080061e9 	.word	0x080061e9

08006340 <stage_rfft_f32>:
 8006340:	b410      	push	{r4}
 8006342:	edd1 7a00 	vldr	s15, [r1]
 8006346:	ed91 7a01 	vldr	s14, [r1, #4]
 800634a:	8804      	ldrh	r4, [r0, #0]
 800634c:	6940      	ldr	r0, [r0, #20]
 800634e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006356:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800635a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800635e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006362:	3c01      	subs	r4, #1
 8006364:	ee26 7a84 	vmul.f32	s14, s13, s8
 8006368:	ee67 7a84 	vmul.f32	s15, s15, s8
 800636c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8006370:	ed82 7a00 	vstr	s14, [r2]
 8006374:	edc2 7a01 	vstr	s15, [r2, #4]
 8006378:	3010      	adds	r0, #16
 800637a:	3210      	adds	r2, #16
 800637c:	3b08      	subs	r3, #8
 800637e:	3110      	adds	r1, #16
 8006380:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006384:	ed93 7a02 	vldr	s14, [r3, #8]
 8006388:	ed50 6a02 	vldr	s13, [r0, #-8]
 800638c:	edd3 4a03 	vldr	s9, [r3, #12]
 8006390:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006394:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006398:	ee77 5a45 	vsub.f32	s11, s14, s10
 800639c:	ee37 7a05 	vadd.f32	s14, s14, s10
 80063a0:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80063a4:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80063a8:	ee66 5a25 	vmul.f32	s11, s12, s11
 80063ac:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80063b0:	ee37 7a23 	vadd.f32	s14, s14, s7
 80063b4:	ee66 6a85 	vmul.f32	s13, s13, s10
 80063b8:	ee26 6a05 	vmul.f32	s12, s12, s10
 80063bc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80063c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80063c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80063cc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80063d0:	3c01      	subs	r4, #1
 80063d2:	ed02 7a02 	vstr	s14, [r2, #-8]
 80063d6:	ed42 7a01 	vstr	s15, [r2, #-4]
 80063da:	f1a3 0308 	sub.w	r3, r3, #8
 80063de:	f101 0108 	add.w	r1, r1, #8
 80063e2:	f100 0008 	add.w	r0, r0, #8
 80063e6:	f102 0208 	add.w	r2, r2, #8
 80063ea:	d1c9      	bne.n	8006380 <stage_rfft_f32+0x40>
 80063ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop

080063f4 <merge_rfft_f32>:
 80063f4:	b410      	push	{r4}
 80063f6:	edd1 7a00 	vldr	s15, [r1]
 80063fa:	edd1 6a01 	vldr	s13, [r1, #4]
 80063fe:	8804      	ldrh	r4, [r0, #0]
 8006400:	6940      	ldr	r0, [r0, #20]
 8006402:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006406:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800640a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800640e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006412:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006416:	3c01      	subs	r4, #1
 8006418:	ed82 7a00 	vstr	s14, [r2]
 800641c:	edc2 7a01 	vstr	s15, [r2, #4]
 8006420:	b3dc      	cbz	r4, 800649a <merge_rfft_f32+0xa6>
 8006422:	00e3      	lsls	r3, r4, #3
 8006424:	3b08      	subs	r3, #8
 8006426:	440b      	add	r3, r1
 8006428:	3010      	adds	r0, #16
 800642a:	3210      	adds	r2, #16
 800642c:	3110      	adds	r1, #16
 800642e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006432:	ed93 7a02 	vldr	s14, [r3, #8]
 8006436:	ed50 6a02 	vldr	s13, [r0, #-8]
 800643a:	edd3 4a03 	vldr	s9, [r3, #12]
 800643e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006442:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006446:	ee75 5a47 	vsub.f32	s11, s10, s14
 800644a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800644e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006452:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006456:	ee66 5a25 	vmul.f32	s11, s12, s11
 800645a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800645e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006462:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006466:	ee26 6a05 	vmul.f32	s12, s12, s10
 800646a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800646e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8006472:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006476:	ee27 7a04 	vmul.f32	s14, s14, s8
 800647a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800647e:	3c01      	subs	r4, #1
 8006480:	ed02 7a02 	vstr	s14, [r2, #-8]
 8006484:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006488:	f1a3 0308 	sub.w	r3, r3, #8
 800648c:	f101 0108 	add.w	r1, r1, #8
 8006490:	f100 0008 	add.w	r0, r0, #8
 8006494:	f102 0208 	add.w	r2, r2, #8
 8006498:	d1c9      	bne.n	800642e <merge_rfft_f32+0x3a>
 800649a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <arm_rfft_fast_f32>:
 80064a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a4:	8a05      	ldrh	r5, [r0, #16]
 80064a6:	086d      	lsrs	r5, r5, #1
 80064a8:	8005      	strh	r5, [r0, #0]
 80064aa:	4604      	mov	r4, r0
 80064ac:	4616      	mov	r6, r2
 80064ae:	461d      	mov	r5, r3
 80064b0:	b14b      	cbz	r3, 80064c6 <arm_rfft_fast_f32+0x26>
 80064b2:	f7ff ff9f 	bl	80063f4 <merge_rfft_f32>
 80064b6:	462a      	mov	r2, r5
 80064b8:	4631      	mov	r1, r6
 80064ba:	4620      	mov	r0, r4
 80064bc:	2301      	movs	r3, #1
 80064be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c2:	f000 bb33 	b.w	8006b2c <arm_cfft_f32>
 80064c6:	460f      	mov	r7, r1
 80064c8:	461a      	mov	r2, r3
 80064ca:	2301      	movs	r3, #1
 80064cc:	f000 fb2e 	bl	8006b2c <arm_cfft_f32>
 80064d0:	4632      	mov	r2, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	4620      	mov	r0, r4
 80064d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064da:	f7ff bf31 	b.w	8006340 <stage_rfft_f32>
 80064de:	bf00      	nop

080064e0 <arm_cfft_radix8by2_f32>:
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	ed2d 8b08 	vpush	{d8-d11}
 80064e8:	4607      	mov	r7, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	f8b7 c000 	ldrh.w	ip, [r7]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80064f6:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80064fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80064fe:	f000 80b0 	beq.w	8006662 <arm_cfft_radix8by2_f32+0x182>
 8006502:	008c      	lsls	r4, r1, #2
 8006504:	3410      	adds	r4, #16
 8006506:	f100 0310 	add.w	r3, r0, #16
 800650a:	1906      	adds	r6, r0, r4
 800650c:	3210      	adds	r2, #16
 800650e:	4444      	add	r4, r8
 8006510:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006514:	f108 0510 	add.w	r5, r8, #16
 8006518:	ed15 2a04 	vldr	s4, [r5, #-16]
 800651c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006520:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006524:	ed14 4a03 	vldr	s8, [r4, #-12]
 8006528:	ed14 6a02 	vldr	s12, [r4, #-8]
 800652c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006530:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006534:	ed15 0a02 	vldr	s0, [r5, #-8]
 8006538:	ed55 0a01 	vldr	s1, [r5, #-4]
 800653c:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006540:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006544:	ed13 7a03 	vldr	s14, [r3, #-12]
 8006548:	ed13 5a02 	vldr	s10, [r3, #-8]
 800654c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006550:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006554:	ed56 1a01 	vldr	s3, [r6, #-4]
 8006558:	ee73 ba82 	vadd.f32	s23, s7, s4
 800655c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8006560:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8006564:	ee33 9a04 	vadd.f32	s18, s6, s8
 8006568:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800656c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8006570:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8006574:	ee71 8a06 	vadd.f32	s17, s2, s12
 8006578:	ed43 ba04 	vstr	s23, [r3, #-16]
 800657c:	ed03 ba03 	vstr	s22, [r3, #-12]
 8006580:	ed43 aa02 	vstr	s21, [r3, #-8]
 8006584:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006588:	ed06 8a01 	vstr	s16, [r6, #-4]
 800658c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006590:	ed06 9a03 	vstr	s18, [r6, #-12]
 8006594:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006598:	ee37 7a62 	vsub.f32	s14, s14, s5
 800659c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80065a0:	ee34 4a43 	vsub.f32	s8, s8, s6
 80065a4:	ed52 6a03 	vldr	s13, [r2, #-12]
 80065a8:	ed12 3a04 	vldr	s6, [r2, #-16]
 80065ac:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80065b0:	ee27 8a26 	vmul.f32	s16, s14, s13
 80065b4:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80065b8:	ee23 2a83 	vmul.f32	s4, s7, s6
 80065bc:	ee64 4a83 	vmul.f32	s9, s9, s6
 80065c0:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80065c4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80065c8:	ee64 6a26 	vmul.f32	s13, s8, s13
 80065cc:	ee24 4a03 	vmul.f32	s8, s8, s6
 80065d0:	ee37 7a63 	vsub.f32	s14, s14, s7
 80065d4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80065d8:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80065dc:	ee32 3a08 	vadd.f32	s6, s4, s16
 80065e0:	ed05 7a03 	vstr	s14, [r5, #-12]
 80065e4:	ed05 3a04 	vstr	s6, [r5, #-16]
 80065e8:	ed04 4a04 	vstr	s8, [r4, #-16]
 80065ec:	ed44 6a03 	vstr	s13, [r4, #-12]
 80065f0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80065f4:	ee76 6a41 	vsub.f32	s13, s12, s2
 80065f8:	ee35 5a40 	vsub.f32	s10, s10, s0
 80065fc:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006600:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006604:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006608:	ee67 3a87 	vmul.f32	s7, s15, s14
 800660c:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006610:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006614:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006618:	ee25 5a07 	vmul.f32	s10, s10, s14
 800661c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006620:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006624:	ee26 6a25 	vmul.f32	s12, s12, s11
 8006628:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800662c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006630:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006634:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006638:	3310      	adds	r3, #16
 800663a:	4563      	cmp	r3, ip
 800663c:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006640:	f106 0610 	add.w	r6, r6, #16
 8006644:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006648:	f102 0210 	add.w	r2, r2, #16
 800664c:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006650:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006654:	f105 0510 	add.w	r5, r5, #16
 8006658:	f104 0410 	add.w	r4, r4, #16
 800665c:	f47f af5c 	bne.w	8006518 <arm_cfft_radix8by2_f32+0x38>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	b28c      	uxth	r4, r1
 8006664:	4621      	mov	r1, r4
 8006666:	2302      	movs	r3, #2
 8006668:	f000 fd92 	bl	8007190 <arm_radix8_butterfly_f32>
 800666c:	ecbd 8b08 	vpop	{d8-d11}
 8006670:	4621      	mov	r1, r4
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	4640      	mov	r0, r8
 8006676:	2302      	movs	r3, #2
 8006678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800667c:	f000 bd88 	b.w	8007190 <arm_radix8_butterfly_f32>

08006680 <arm_cfft_radix8by4_f32>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	ed2d 8b0a 	vpush	{d8-d12}
 8006688:	b08d      	sub	sp, #52	; 0x34
 800668a:	460d      	mov	r5, r1
 800668c:	910b      	str	r1, [sp, #44]	; 0x2c
 800668e:	8801      	ldrh	r1, [r0, #0]
 8006690:	6842      	ldr	r2, [r0, #4]
 8006692:	900a      	str	r0, [sp, #40]	; 0x28
 8006694:	0849      	lsrs	r1, r1, #1
 8006696:	008b      	lsls	r3, r1, #2
 8006698:	18ee      	adds	r6, r5, r3
 800669a:	18f0      	adds	r0, r6, r3
 800669c:	edd0 5a00 	vldr	s11, [r0]
 80066a0:	edd5 7a00 	vldr	s15, [r5]
 80066a4:	ed96 7a00 	vldr	s14, [r6]
 80066a8:	edd0 3a01 	vldr	s7, [r0, #4]
 80066ac:	ed96 4a01 	vldr	s8, [r6, #4]
 80066b0:	ed95 5a01 	vldr	s10, [r5, #4]
 80066b4:	9008      	str	r0, [sp, #32]
 80066b6:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80066ba:	18c7      	adds	r7, r0, r3
 80066bc:	edd7 4a00 	vldr	s9, [r7]
 80066c0:	ed97 3a01 	vldr	s6, [r7, #4]
 80066c4:	9701      	str	r7, [sp, #4]
 80066c6:	ee77 6a06 	vadd.f32	s13, s14, s12
 80066ca:	462c      	mov	r4, r5
 80066cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80066d0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80066d4:	ee16 ca90 	vmov	ip, s13
 80066d8:	f844 cb08 	str.w	ip, [r4], #8
 80066dc:	ee75 6a23 	vadd.f32	s13, s10, s7
 80066e0:	edd6 5a01 	vldr	s11, [r6, #4]
 80066e4:	edd7 2a01 	vldr	s5, [r7, #4]
 80066e8:	9404      	str	r4, [sp, #16]
 80066ea:	ee35 5a63 	vsub.f32	s10, s10, s7
 80066ee:	ee74 3a27 	vadd.f32	s7, s8, s15
 80066f2:	ee36 6a47 	vsub.f32	s12, s12, s14
 80066f6:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80066fa:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80066fe:	0849      	lsrs	r1, r1, #1
 8006700:	f102 0e08 	add.w	lr, r2, #8
 8006704:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006708:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800670c:	9109      	str	r1, [sp, #36]	; 0x24
 800670e:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006712:	f1a1 0902 	sub.w	r9, r1, #2
 8006716:	f8cd e00c 	str.w	lr, [sp, #12]
 800671a:	4631      	mov	r1, r6
 800671c:	ee13 ea90 	vmov	lr, s7
 8006720:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006724:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8006728:	4604      	mov	r4, r0
 800672a:	edc5 5a01 	vstr	s11, [r5, #4]
 800672e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006732:	f841 eb08 	str.w	lr, [r1], #8
 8006736:	ee34 5a24 	vadd.f32	s10, s8, s9
 800673a:	ee16 ea10 	vmov	lr, s12
 800673e:	ed86 5a01 	vstr	s10, [r6, #4]
 8006742:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006746:	f844 eb08 	str.w	lr, [r4], #8
 800674a:	ee77 7a83 	vadd.f32	s15, s15, s6
 800674e:	edc0 6a01 	vstr	s13, [r0, #4]
 8006752:	9405      	str	r4, [sp, #20]
 8006754:	4604      	mov	r4, r0
 8006756:	ee17 0a90 	vmov	r0, s15
 800675a:	9106      	str	r1, [sp, #24]
 800675c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006760:	f102 0110 	add.w	r1, r2, #16
 8006764:	46bc      	mov	ip, r7
 8006766:	9100      	str	r1, [sp, #0]
 8006768:	f847 0b08 	str.w	r0, [r7], #8
 800676c:	f102 0118 	add.w	r1, r2, #24
 8006770:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8006774:	9102      	str	r1, [sp, #8]
 8006776:	ed8c 7a01 	vstr	s14, [ip, #4]
 800677a:	9007      	str	r0, [sp, #28]
 800677c:	f000 8134 	beq.w	80069e8 <arm_cfft_radix8by4_f32+0x368>
 8006780:	f102 0920 	add.w	r9, r2, #32
 8006784:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8006788:	9a01      	ldr	r2, [sp, #4]
 800678a:	f8dd a000 	ldr.w	sl, [sp]
 800678e:	3b0c      	subs	r3, #12
 8006790:	4683      	mov	fp, r0
 8006792:	4463      	add	r3, ip
 8006794:	f105 0e10 	add.w	lr, r5, #16
 8006798:	f1a4 010c 	sub.w	r1, r4, #12
 800679c:	f104 0510 	add.w	r5, r4, #16
 80067a0:	f1a6 0c0c 	sub.w	ip, r6, #12
 80067a4:	f1a2 040c 	sub.w	r4, r2, #12
 80067a8:	f106 0010 	add.w	r0, r6, #16
 80067ac:	3210      	adds	r2, #16
 80067ae:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80067b2:	ed55 5a02 	vldr	s11, [r5, #-8]
 80067b6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80067ba:	ed52 1a02 	vldr	s3, [r2, #-8]
 80067be:	ed55 6a01 	vldr	s13, [r5, #-4]
 80067c2:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80067c6:	ed12 1a01 	vldr	s2, [r2, #-4]
 80067ca:	ed10 8a01 	vldr	s16, [r0, #-4]
 80067ce:	ee35 4a25 	vadd.f32	s8, s10, s11
 80067d2:	ee30 6a26 	vadd.f32	s12, s0, s13
 80067d6:	ee37 7a84 	vadd.f32	s14, s15, s8
 80067da:	ee30 0a66 	vsub.f32	s0, s0, s13
 80067de:	ee37 7a21 	vadd.f32	s14, s14, s3
 80067e2:	ee75 5a65 	vsub.f32	s11, s10, s11
 80067e6:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80067ea:	ed10 7a01 	vldr	s14, [r0, #-4]
 80067ee:	ed52 6a01 	vldr	s13, [r2, #-4]
 80067f2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80067f6:	ee78 aa25 	vadd.f32	s21, s16, s11
 80067fa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80067fe:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006802:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8006806:	ed94 7a02 	vldr	s14, [r4, #8]
 800680a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800680e:	ed91 ba02 	vldr	s22, [r1, #8]
 8006812:	edd3 9a02 	vldr	s19, [r3, #8]
 8006816:	edd4 2a01 	vldr	s5, [r4, #4]
 800681a:	ed9c 9a01 	vldr	s18, [ip, #4]
 800681e:	ed93 5a01 	vldr	s10, [r3, #4]
 8006822:	edd1 0a01 	vldr	s1, [r1, #4]
 8006826:	ee72 6a07 	vadd.f32	s13, s4, s14
 800682a:	ee32 2a47 	vsub.f32	s4, s4, s14
 800682e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006832:	ee79 4a22 	vadd.f32	s9, s18, s5
 8006836:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800683a:	ee79 2a62 	vsub.f32	s5, s18, s5
 800683e:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006842:	ed91 7a01 	vldr	s14, [r1, #4]
 8006846:	edd3 8a01 	vldr	s17, [r3, #4]
 800684a:	ee34 7a87 	vadd.f32	s14, s9, s14
 800684e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006852:	ee37 7a28 	vadd.f32	s14, s14, s17
 8006856:	ee32 9a60 	vsub.f32	s18, s4, s1
 800685a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800685e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8006862:	ed1a aa02 	vldr	s20, [sl, #-8]
 8006866:	ee73 8a22 	vadd.f32	s17, s6, s5
 800686a:	ee39 9a05 	vadd.f32	s18, s18, s10
 800686e:	ee7a aac1 	vsub.f32	s21, s21, s2
 8006872:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8006876:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800687a:	ee69 ba07 	vmul.f32	s23, s18, s14
 800687e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8006882:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8006886:	ee63 ca87 	vmul.f32	s25, s7, s14
 800688a:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800688e:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8006892:	ee68 8a87 	vmul.f32	s17, s17, s14
 8006896:	ee73 3aea 	vsub.f32	s7, s7, s21
 800689a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800689e:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80068a2:	ee3b aaca 	vsub.f32	s20, s23, s20
 80068a6:	ee34 4a67 	vsub.f32	s8, s8, s15
 80068aa:	ee76 6acb 	vsub.f32	s13, s13, s22
 80068ae:	ee36 6a48 	vsub.f32	s12, s12, s16
 80068b2:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80068b6:	ed00 7a02 	vstr	s14, [r0, #-8]
 80068ba:	ed40 3a01 	vstr	s7, [r0, #-4]
 80068be:	edc1 8a01 	vstr	s17, [r1, #4]
 80068c2:	ed81 aa02 	vstr	s20, [r1, #8]
 80068c6:	ed59 3a04 	vldr	s7, [r9, #-16]
 80068ca:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80068ce:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80068d2:	ed59 6a03 	vldr	s13, [r9, #-12]
 80068d6:	ee34 4a61 	vsub.f32	s8, s8, s3
 80068da:	ee36 6a41 	vsub.f32	s12, s12, s2
 80068de:	ee67 8a63 	vnmul.f32	s17, s14, s7
 80068e2:	ee66 9a26 	vmul.f32	s19, s12, s13
 80068e6:	ee24 9a23 	vmul.f32	s18, s8, s7
 80068ea:	ee26 6a23 	vmul.f32	s12, s12, s7
 80068ee:	ee24 4a26 	vmul.f32	s8, s8, s13
 80068f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80068f6:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80068fa:	ee64 4aa3 	vmul.f32	s9, s9, s7
 80068fe:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006902:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006906:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800690a:	ee79 3a29 	vadd.f32	s7, s18, s19
 800690e:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006912:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006916:	ee77 7a80 	vadd.f32	s15, s15, s0
 800691a:	ed45 3a02 	vstr	s7, [r5, #-8]
 800691e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006922:	ed84 7a01 	vstr	s14, [r4, #4]
 8006926:	ed84 4a02 	vstr	s8, [r4, #8]
 800692a:	ee35 6a81 	vadd.f32	s12, s11, s2
 800692e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006932:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8006936:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800693a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800693e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006942:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006946:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800694a:	ee26 5a25 	vmul.f32	s10, s12, s11
 800694e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006952:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006956:	ee27 7a25 	vmul.f32	s14, s14, s11
 800695a:	ee63 6a26 	vmul.f32	s13, s6, s13
 800695e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006962:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006966:	ee75 5a24 	vadd.f32	s11, s10, s9
 800696a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800696e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006972:	f1bb 0b01 	subs.w	fp, fp, #1
 8006976:	ed42 5a02 	vstr	s11, [r2, #-8]
 800697a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800697e:	f10e 0e08 	add.w	lr, lr, #8
 8006982:	ed83 3a02 	vstr	s6, [r3, #8]
 8006986:	ed83 7a01 	vstr	s14, [r3, #4]
 800698a:	f1ac 0c08 	sub.w	ip, ip, #8
 800698e:	f10a 0a08 	add.w	sl, sl, #8
 8006992:	f100 0008 	add.w	r0, r0, #8
 8006996:	f1a1 0108 	sub.w	r1, r1, #8
 800699a:	f109 0910 	add.w	r9, r9, #16
 800699e:	f105 0508 	add.w	r5, r5, #8
 80069a2:	f1a4 0408 	sub.w	r4, r4, #8
 80069a6:	f108 0818 	add.w	r8, r8, #24
 80069aa:	f102 0208 	add.w	r2, r2, #8
 80069ae:	f1a3 0308 	sub.w	r3, r3, #8
 80069b2:	f47f aefc 	bne.w	80067ae <arm_cfft_radix8by4_f32+0x12e>
 80069b6:	9907      	ldr	r1, [sp, #28]
 80069b8:	9800      	ldr	r0, [sp, #0]
 80069ba:	00cb      	lsls	r3, r1, #3
 80069bc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80069c0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80069c4:	9100      	str	r1, [sp, #0]
 80069c6:	9904      	ldr	r1, [sp, #16]
 80069c8:	4419      	add	r1, r3
 80069ca:	9104      	str	r1, [sp, #16]
 80069cc:	9903      	ldr	r1, [sp, #12]
 80069ce:	4419      	add	r1, r3
 80069d0:	9103      	str	r1, [sp, #12]
 80069d2:	9906      	ldr	r1, [sp, #24]
 80069d4:	4419      	add	r1, r3
 80069d6:	9106      	str	r1, [sp, #24]
 80069d8:	9905      	ldr	r1, [sp, #20]
 80069da:	441f      	add	r7, r3
 80069dc:	4419      	add	r1, r3
 80069de:	9b02      	ldr	r3, [sp, #8]
 80069e0:	9105      	str	r1, [sp, #20]
 80069e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e6:	9302      	str	r3, [sp, #8]
 80069e8:	9904      	ldr	r1, [sp, #16]
 80069ea:	9805      	ldr	r0, [sp, #20]
 80069ec:	ed91 4a00 	vldr	s8, [r1]
 80069f0:	edd0 6a00 	vldr	s13, [r0]
 80069f4:	9b06      	ldr	r3, [sp, #24]
 80069f6:	ed97 3a00 	vldr	s6, [r7]
 80069fa:	edd3 7a00 	vldr	s15, [r3]
 80069fe:	edd0 4a01 	vldr	s9, [r0, #4]
 8006a02:	edd1 3a01 	vldr	s7, [r1, #4]
 8006a06:	ed97 2a01 	vldr	s4, [r7, #4]
 8006a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a0e:	9a03      	ldr	r2, [sp, #12]
 8006a10:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8006a14:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006a18:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006a1c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006a20:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006a24:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006a28:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006a2c:	ed81 5a00 	vstr	s10, [r1]
 8006a30:	ed93 5a01 	vldr	s10, [r3, #4]
 8006a34:	edd7 4a01 	vldr	s9, [r7, #4]
 8006a38:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006a3c:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006a40:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006a44:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006a48:	ed81 5a01 	vstr	s10, [r1, #4]
 8006a4c:	edd2 1a00 	vldr	s3, [r2]
 8006a50:	edd2 2a01 	vldr	s5, [r2, #4]
 8006a54:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006a58:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006a5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006a60:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006a64:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006a68:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006a6c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006a70:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006a74:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006a78:	edc3 2a00 	vstr	s5, [r3]
 8006a7c:	ed83 5a01 	vstr	s10, [r3, #4]
 8006a80:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006a84:	9b00      	ldr	r3, [sp, #0]
 8006a86:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006a8a:	ed93 4a01 	vldr	s8, [r3, #4]
 8006a8e:	ed93 5a00 	vldr	s10, [r3]
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006a98:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006a9c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006aa0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006aa4:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006aa8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006aac:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006ab0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006ab4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006ab8:	ed80 6a01 	vstr	s12, [r0, #4]
 8006abc:	edc0 5a00 	vstr	s11, [r0]
 8006ac0:	edd3 5a01 	vldr	s11, [r3, #4]
 8006ac4:	edd3 6a00 	vldr	s13, [r3]
 8006ac8:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006acc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006ad0:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006ad4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006ad8:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006adc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006ae0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006ae4:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006ae8:	ed87 7a01 	vstr	s14, [r7, #4]
 8006aec:	edc7 7a00 	vstr	s15, [r7]
 8006af0:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8006af4:	4621      	mov	r1, r4
 8006af6:	686a      	ldr	r2, [r5, #4]
 8006af8:	2304      	movs	r3, #4
 8006afa:	f000 fb49 	bl	8007190 <arm_radix8_butterfly_f32>
 8006afe:	4630      	mov	r0, r6
 8006b00:	4621      	mov	r1, r4
 8006b02:	686a      	ldr	r2, [r5, #4]
 8006b04:	2304      	movs	r3, #4
 8006b06:	f000 fb43 	bl	8007190 <arm_radix8_butterfly_f32>
 8006b0a:	9808      	ldr	r0, [sp, #32]
 8006b0c:	686a      	ldr	r2, [r5, #4]
 8006b0e:	4621      	mov	r1, r4
 8006b10:	2304      	movs	r3, #4
 8006b12:	f000 fb3d 	bl	8007190 <arm_radix8_butterfly_f32>
 8006b16:	686a      	ldr	r2, [r5, #4]
 8006b18:	9801      	ldr	r0, [sp, #4]
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	b00d      	add	sp, #52	; 0x34
 8006b20:	ecbd 8b0a 	vpop	{d8-d12}
 8006b24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b28:	f000 bb32 	b.w	8007190 <arm_radix8_butterfly_f32>

08006b2c <arm_cfft_f32>:
 8006b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b30:	2a01      	cmp	r2, #1
 8006b32:	4606      	mov	r6, r0
 8006b34:	4617      	mov	r7, r2
 8006b36:	460c      	mov	r4, r1
 8006b38:	4698      	mov	r8, r3
 8006b3a:	8805      	ldrh	r5, [r0, #0]
 8006b3c:	d056      	beq.n	8006bec <arm_cfft_f32+0xc0>
 8006b3e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006b42:	d063      	beq.n	8006c0c <arm_cfft_f32+0xe0>
 8006b44:	d916      	bls.n	8006b74 <arm_cfft_f32+0x48>
 8006b46:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006b4a:	d01a      	beq.n	8006b82 <arm_cfft_f32+0x56>
 8006b4c:	d947      	bls.n	8006bde <arm_cfft_f32+0xb2>
 8006b4e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006b52:	d05b      	beq.n	8006c0c <arm_cfft_f32+0xe0>
 8006b54:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006b58:	d105      	bne.n	8006b66 <arm_cfft_f32+0x3a>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	6872      	ldr	r2, [r6, #4]
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 fb15 	bl	8007190 <arm_radix8_butterfly_f32>
 8006b66:	f1b8 0f00 	cmp.w	r8, #0
 8006b6a:	d111      	bne.n	8006b90 <arm_cfft_f32+0x64>
 8006b6c:	2f01      	cmp	r7, #1
 8006b6e:	d016      	beq.n	8006b9e <arm_cfft_f32+0x72>
 8006b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b74:	2d20      	cmp	r5, #32
 8006b76:	d049      	beq.n	8006c0c <arm_cfft_f32+0xe0>
 8006b78:	d935      	bls.n	8006be6 <arm_cfft_f32+0xba>
 8006b7a:	2d40      	cmp	r5, #64	; 0x40
 8006b7c:	d0ed      	beq.n	8006b5a <arm_cfft_f32+0x2e>
 8006b7e:	2d80      	cmp	r5, #128	; 0x80
 8006b80:	d1f1      	bne.n	8006b66 <arm_cfft_f32+0x3a>
 8006b82:	4621      	mov	r1, r4
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7ff fcab 	bl	80064e0 <arm_cfft_radix8by2_f32>
 8006b8a:	f1b8 0f00 	cmp.w	r8, #0
 8006b8e:	d0ed      	beq.n	8006b6c <arm_cfft_f32+0x40>
 8006b90:	68b2      	ldr	r2, [r6, #8]
 8006b92:	89b1      	ldrh	r1, [r6, #12]
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 f841 	bl	8006c1c <arm_bitreversal_32>
 8006b9a:	2f01      	cmp	r7, #1
 8006b9c:	d1e8      	bne.n	8006b70 <arm_cfft_f32+0x44>
 8006b9e:	ee07 5a90 	vmov	s15, r5
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006baa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	d0de      	beq.n	8006b70 <arm_cfft_f32+0x44>
 8006bb2:	f104 0108 	add.w	r1, r4, #8
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	3301      	adds	r3, #1
 8006bba:	429d      	cmp	r5, r3
 8006bbc:	f101 0108 	add.w	r1, r1, #8
 8006bc0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006bc4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006bc8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006bcc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006bd0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006bd4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006bd8:	d1ee      	bne.n	8006bb8 <arm_cfft_f32+0x8c>
 8006bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bde:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006be2:	d0ba      	beq.n	8006b5a <arm_cfft_f32+0x2e>
 8006be4:	e7bf      	b.n	8006b66 <arm_cfft_f32+0x3a>
 8006be6:	2d10      	cmp	r5, #16
 8006be8:	d0cb      	beq.n	8006b82 <arm_cfft_f32+0x56>
 8006bea:	e7bc      	b.n	8006b66 <arm_cfft_f32+0x3a>
 8006bec:	b19d      	cbz	r5, 8006c16 <arm_cfft_f32+0xea>
 8006bee:	f101 030c 	add.w	r3, r1, #12
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006bf8:	3201      	adds	r2, #1
 8006bfa:	eef1 7a67 	vneg.f32	s15, s15
 8006bfe:	4295      	cmp	r5, r2
 8006c00:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006c04:	f103 0308 	add.w	r3, r3, #8
 8006c08:	d1f4      	bne.n	8006bf4 <arm_cfft_f32+0xc8>
 8006c0a:	e798      	b.n	8006b3e <arm_cfft_f32+0x12>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7ff fd36 	bl	8006680 <arm_cfft_radix8by4_f32>
 8006c14:	e7a7      	b.n	8006b66 <arm_cfft_f32+0x3a>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0aa      	beq.n	8006b70 <arm_cfft_f32+0x44>
 8006c1a:	e7b9      	b.n	8006b90 <arm_cfft_f32+0x64>

08006c1c <arm_bitreversal_32>:
 8006c1c:	b1e9      	cbz	r1, 8006c5a <arm_bitreversal_32+0x3e>
 8006c1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c20:	2500      	movs	r5, #0
 8006c22:	f102 0e02 	add.w	lr, r2, #2
 8006c26:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006c2a:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006c2e:	08a4      	lsrs	r4, r4, #2
 8006c30:	089b      	lsrs	r3, r3, #2
 8006c32:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006c36:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006c3a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006c3e:	00a6      	lsls	r6, r4, #2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006c46:	3304      	adds	r3, #4
 8006c48:	1d34      	adds	r4, r6, #4
 8006c4a:	3502      	adds	r5, #2
 8006c4c:	58c6      	ldr	r6, [r0, r3]
 8006c4e:	5907      	ldr	r7, [r0, r4]
 8006c50:	50c7      	str	r7, [r0, r3]
 8006c52:	428d      	cmp	r5, r1
 8006c54:	5106      	str	r6, [r0, r4]
 8006c56:	d3e6      	bcc.n	8006c26 <arm_bitreversal_32+0xa>
 8006c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c5a:	4770      	bx	lr

08006c5c <arm_conv_f32>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	b08b      	sub	sp, #44	; 0x2c
 8006c62:	4299      	cmp	r1, r3
 8006c64:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006c66:	d205      	bcs.n	8006c74 <arm_conv_f32+0x18>
 8006c68:	4606      	mov	r6, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4632      	mov	r2, r6
 8006c72:	4623      	mov	r3, r4
 8006c74:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8006c78:	3101      	adds	r1, #1
 8006c7a:	1ac9      	subs	r1, r1, r3
 8006c7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8006c84:	9101      	str	r1, [sp, #4]
 8006c86:	1e59      	subs	r1, r3, #1
 8006c88:	eb02 070b 	add.w	r7, r2, fp
 8006c8c:	f000 8277 	beq.w	800717e <arm_conv_f32+0x522>
 8006c90:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8006f50 <arm_conv_f32+0x2f4>
 8006c94:	f102 0904 	add.w	r9, r2, #4
 8006c98:	46aa      	mov	sl, r5
 8006c9a:	4680      	mov	r8, r0
 8006c9c:	2401      	movs	r4, #1
 8006c9e:	f014 0603 	ands.w	r6, r4, #3
 8006ca2:	d01b      	beq.n	8006cdc <arm_conv_f32+0x80>
 8006ca4:	ed92 7a00 	vldr	s14, [r2]
 8006ca8:	edd8 6a00 	vldr	s13, [r8]
 8006cac:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006cb0:	3e01      	subs	r6, #1
 8006cb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cb6:	d011      	beq.n	8006cdc <arm_conv_f32+0x80>
 8006cb8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006cbc:	edd8 6a01 	vldr	s13, [r8, #4]
 8006cc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006cc4:	2e01      	cmp	r6, #1
 8006cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cca:	d007      	beq.n	8006cdc <arm_conv_f32+0x80>
 8006ccc:	ed98 7a02 	vldr	s14, [r8, #8]
 8006cd0:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006cd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cdc:	3401      	adds	r4, #1
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	ecea 7a01 	vstmia	sl!, {s15}
 8006ce4:	464a      	mov	r2, r9
 8006ce6:	d03a      	beq.n	8006d5e <arm_conv_f32+0x102>
 8006ce8:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8006cec:	f000 824c 	beq.w	8007188 <arm_conv_f32+0x52c>
 8006cf0:	f100 0210 	add.w	r2, r0, #16
 8006cf4:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8006cf8:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006f50 <arm_conv_f32+0x2f4>
 8006cfc:	eb02 0c08 	add.w	ip, r2, r8
 8006d00:	f1a9 0610 	sub.w	r6, r9, #16
 8006d04:	ed12 7a04 	vldr	s14, [r2, #-16]
 8006d08:	edd6 3a04 	vldr	s7, [r6, #16]
 8006d0c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006d10:	ed96 4a03 	vldr	s8, [r6, #12]
 8006d14:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006d18:	edd6 4a02 	vldr	s9, [r6, #8]
 8006d1c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006d20:	ed96 5a01 	vldr	s10, [r6, #4]
 8006d24:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006d28:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d30:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8006d34:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006d38:	ee65 6a85 	vmul.f32	s13, s11, s10
 8006d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d40:	3210      	adds	r2, #16
 8006d42:	4594      	cmp	ip, r2
 8006d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d48:	f1a6 0610 	sub.w	r6, r6, #16
 8006d4c:	d1da      	bne.n	8006d04 <arm_conv_f32+0xa8>
 8006d4e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8006d52:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8006d56:	4480      	add	r8, r0
 8006d58:	f109 0904 	add.w	r9, r9, #4
 8006d5c:	e79f      	b.n	8006c9e <arm_conv_f32+0x42>
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	445d      	add	r5, fp
 8006d62:	f240 80e9 	bls.w	8006f38 <arm_conv_f32+0x2dc>
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	089a      	lsrs	r2, r3, #2
 8006d6a:	9202      	str	r2, [sp, #8]
 8006d6c:	f000 8203 	beq.w	8007176 <arm_conv_f32+0x51a>
 8006d70:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8006d74:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8006d78:	0112      	lsls	r2, r2, #4
 8006d7a:	f004 0603 	and.w	r6, r4, #3
 8006d7e:	9203      	str	r2, [sp, #12]
 8006d80:	f1a3 0a10 	sub.w	sl, r3, #16
 8006d84:	f1a3 020c 	sub.w	r2, r3, #12
 8006d88:	3b08      	subs	r3, #8
 8006d8a:	9204      	str	r2, [sp, #16]
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	f106 39ff 	add.w	r9, r6, #4294967295
 8006d92:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8006d96:	9a03      	ldr	r2, [sp, #12]
 8006d98:	f100 0c1c 	add.w	ip, r0, #28
 8006d9c:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8006da0:	464c      	mov	r4, r9
 8006da2:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8006da6:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8006daa:	f1a7 0310 	sub.w	r3, r7, #16
 8006dae:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8006db2:	eb05 0b02 	add.w	fp, r5, r2
 8006db6:	461f      	mov	r7, r3
 8006db8:	3510      	adds	r5, #16
 8006dba:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8006f50 <arm_conv_f32+0x2f4>
 8006dbe:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8006dc2:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8006dc6:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8006dca:	eeb0 5a46 	vmov.f32	s10, s12
 8006dce:	eef0 4a46 	vmov.f32	s9, s12
 8006dd2:	eef0 5a46 	vmov.f32	s11, s12
 8006dd6:	463a      	mov	r2, r7
 8006dd8:	4663      	mov	r3, ip
 8006dda:	4641      	mov	r1, r8
 8006ddc:	edd2 6a04 	vldr	s13, [r2, #16]
 8006de0:	ed13 0a04 	vldr	s0, [r3, #-16]
 8006de4:	ed92 7a03 	vldr	s14, [r2, #12]
 8006de8:	edd2 7a02 	vldr	s15, [r2, #8]
 8006dec:	edd2 0a01 	vldr	s1, [r2, #4]
 8006df0:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8006df4:	ee62 3a26 	vmul.f32	s7, s4, s13
 8006df8:	ee61 2a26 	vmul.f32	s5, s2, s13
 8006dfc:	ed13 1a03 	vldr	s2, [r3, #-12]
 8006e00:	ee66 6a80 	vmul.f32	s13, s13, s0
 8006e04:	ee21 4a87 	vmul.f32	s8, s3, s14
 8006e08:	ee73 4a24 	vadd.f32	s9, s6, s9
 8006e0c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8006e10:	ee22 3a07 	vmul.f32	s6, s4, s14
 8006e14:	ed53 1a02 	vldr	s3, [r3, #-8]
 8006e18:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8006e1c:	ee36 6a86 	vadd.f32	s12, s13, s12
 8006e20:	ee60 3a07 	vmul.f32	s7, s0, s14
 8006e24:	ee27 7a01 	vmul.f32	s14, s14, s2
 8006e28:	ee33 3a24 	vadd.f32	s6, s6, s9
 8006e2c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006e30:	ee74 2a22 	vadd.f32	s5, s8, s5
 8006e34:	ee60 4a27 	vmul.f32	s9, s0, s15
 8006e38:	ee22 4a27 	vmul.f32	s8, s4, s15
 8006e3c:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006e40:	ed13 2a01 	vldr	s4, [r3, #-4]
 8006e44:	ee21 5a27 	vmul.f32	s10, s2, s15
 8006e48:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8006e4c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006e50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e54:	ee34 4a22 	vadd.f32	s8, s8, s5
 8006e58:	ee60 5a20 	vmul.f32	s11, s0, s1
 8006e5c:	ee21 3a20 	vmul.f32	s6, s2, s1
 8006e60:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006e64:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8006e68:	ee20 6a82 	vmul.f32	s12, s1, s4
 8006e6c:	3901      	subs	r1, #1
 8006e6e:	f1a2 0210 	sub.w	r2, r2, #16
 8006e72:	ee75 5a84 	vadd.f32	s11, s11, s8
 8006e76:	ee73 4a24 	vadd.f32	s9, s6, s9
 8006e7a:	ee37 5a05 	vadd.f32	s10, s14, s10
 8006e7e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006e82:	f103 0310 	add.w	r3, r3, #16
 8006e86:	d1a9      	bne.n	8006ddc <arm_conv_f32+0x180>
 8006e88:	eb0a 030c 	add.w	r3, sl, ip
 8006e8c:	2e00      	cmp	r6, #0
 8006e8e:	d042      	beq.n	8006f16 <arm_conv_f32+0x2ba>
 8006e90:	edde 7a00 	vldr	s15, [lr]
 8006e94:	ed93 4a00 	vldr	s8, [r3]
 8006e98:	ee61 6a27 	vmul.f32	s13, s2, s15
 8006e9c:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8006ea0:	ee22 7a27 	vmul.f32	s14, s4, s15
 8006ea4:	ee64 7a27 	vmul.f32	s15, s8, s15
 8006ea8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8006eac:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8006eb0:	ee35 5a07 	vadd.f32	s10, s10, s14
 8006eb4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006eb8:	eb09 030c 	add.w	r3, r9, ip
 8006ebc:	b35c      	cbz	r4, 8006f16 <arm_conv_f32+0x2ba>
 8006ebe:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8006ec2:	edd3 6a00 	vldr	s13, [r3]
 8006ec6:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8006eca:	ee22 3a27 	vmul.f32	s6, s4, s15
 8006ece:	ee67 3a84 	vmul.f32	s7, s15, s8
 8006ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ed6:	2c01      	cmp	r4, #1
 8006ed8:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006edc:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006ee0:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006ee4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006ee8:	eb00 030c 	add.w	r3, r0, ip
 8006eec:	d013      	beq.n	8006f16 <arm_conv_f32+0x2ba>
 8006eee:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8006ef2:	edd3 3a00 	vldr	s7, [r3]
 8006ef6:	ee62 7a07 	vmul.f32	s15, s4, s14
 8006efa:	ee27 4a04 	vmul.f32	s8, s14, s8
 8006efe:	ee67 6a26 	vmul.f32	s13, s14, s13
 8006f02:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006f06:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006f0a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006f0e:	ee35 5a26 	vadd.f32	s10, s10, s13
 8006f12:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006f16:	45ab      	cmp	fp, r5
 8006f18:	ed45 5a04 	vstr	s11, [r5, #-16]
 8006f1c:	ed45 4a03 	vstr	s9, [r5, #-12]
 8006f20:	ed05 5a02 	vstr	s10, [r5, #-8]
 8006f24:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006f28:	f10c 0c10 	add.w	ip, ip, #16
 8006f2c:	f105 0310 	add.w	r3, r5, #16
 8006f30:	f000 809e 	beq.w	8007070 <arm_conv_f32+0x414>
 8006f34:	461d      	mov	r5, r3
 8006f36:	e740      	b.n	8006dba <arm_conv_f32+0x15e>
 8006f38:	9a01      	ldr	r2, [sp, #4]
 8006f3a:	46ac      	mov	ip, r5
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	d037      	beq.n	8006fb0 <arm_conv_f32+0x354>
 8006f40:	9a01      	ldr	r2, [sp, #4]
 8006f42:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8006f50 <arm_conv_f32+0x2f4>
 8006f46:	0096      	lsls	r6, r2, #2
 8006f48:	eb05 0c06 	add.w	ip, r5, r6
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	e021      	b.n	8006f94 <arm_conv_f32+0x338>
 8006f50:	00000000 	.word	0x00000000
 8006f54:	edd7 7a00 	vldr	s15, [r7]
 8006f58:	ecb2 7a01 	vldmia	r2!, {s14}
 8006f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f60:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006f64:	b189      	cbz	r1, 8006f8a <arm_conv_f32+0x32e>
 8006f66:	ed17 7a01 	vldr	s14, [r7, #-4]
 8006f6a:	edd4 6a01 	vldr	s13, [r4, #4]
 8006f6e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f78:	d007      	beq.n	8006f8a <arm_conv_f32+0x32e>
 8006f7a:	ed94 7a02 	vldr	s14, [r4, #8]
 8006f7e:	ed57 6a02 	vldr	s13, [r7, #-8]
 8006f82:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006f86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f8a:	ece5 7a01 	vstmia	r5!, {s15}
 8006f8e:	4565      	cmp	r5, ip
 8006f90:	4614      	mov	r4, r2
 8006f92:	d00a      	beq.n	8006faa <arm_conv_f32+0x34e>
 8006f94:	4622      	mov	r2, r4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1dc      	bne.n	8006f54 <arm_conv_f32+0x2f8>
 8006f9a:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8006f50 <arm_conv_f32+0x2f4>
 8006f9e:	ece5 7a01 	vstmia	r5!, {s15}
 8006fa2:	1d22      	adds	r2, r4, #4
 8006fa4:	4565      	cmp	r5, ip
 8006fa6:	4614      	mov	r4, r2
 8006fa8:	d1f4      	bne.n	8006f94 <arm_conv_f32+0x338>
 8006faa:	4430      	add	r0, r6
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d059      	beq.n	8007064 <arm_conv_f32+0x408>
 8006fb0:	088d      	lsrs	r5, r1, #2
 8006fb2:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8006f50 <arm_conv_f32+0x2f4>
 8006fb6:	d058      	beq.n	800706a <arm_conv_f32+0x40e>
 8006fb8:	f100 0210 	add.w	r2, r0, #16
 8006fbc:	f1a7 0310 	sub.w	r3, r7, #16
 8006fc0:	462c      	mov	r4, r5
 8006fc2:	ed52 6a04 	vldr	s13, [r2, #-16]
 8006fc6:	edd3 3a04 	vldr	s7, [r3, #16]
 8006fca:	ed12 7a03 	vldr	s14, [r2, #-12]
 8006fce:	ed93 4a03 	vldr	s8, [r3, #12]
 8006fd2:	ed52 7a02 	vldr	s15, [r2, #-8]
 8006fd6:	edd3 4a02 	vldr	s9, [r3, #8]
 8006fda:	ed12 6a01 	vldr	s12, [r2, #-4]
 8006fde:	ed93 5a01 	vldr	s10, [r3, #4]
 8006fe2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006fe6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006fea:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006fee:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8006ff2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006ff6:	ee66 6a05 	vmul.f32	s13, s12, s10
 8006ffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ffe:	3c01      	subs	r4, #1
 8007000:	f102 0210 	add.w	r2, r2, #16
 8007004:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8007008:	f1a3 0310 	sub.w	r3, r3, #16
 800700c:	d1d9      	bne.n	8006fc2 <arm_conv_f32+0x366>
 800700e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8007012:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8007016:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800701a:	f011 0203 	ands.w	r2, r1, #3
 800701e:	d01b      	beq.n	8007058 <arm_conv_f32+0x3fc>
 8007020:	edd3 7a00 	vldr	s15, [r3]
 8007024:	ed95 7a00 	vldr	s14, [r5]
 8007028:	ee67 7a87 	vmul.f32	s15, s15, s14
 800702c:	3a01      	subs	r2, #1
 800702e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007032:	d011      	beq.n	8007058 <arm_conv_f32+0x3fc>
 8007034:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007038:	ed95 7a01 	vldr	s14, [r5, #4]
 800703c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007040:	2a01      	cmp	r2, #1
 8007042:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007046:	d007      	beq.n	8007058 <arm_conv_f32+0x3fc>
 8007048:	edd5 7a02 	vldr	s15, [r5, #8]
 800704c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8007050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007054:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007058:	3901      	subs	r1, #1
 800705a:	ecec 5a01 	vstmia	ip!, {s11}
 800705e:	f100 0004 	add.w	r0, r0, #4
 8007062:	d1a5      	bne.n	8006fb0 <arm_conv_f32+0x354>
 8007064:	b00b      	add	sp, #44	; 0x2c
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	463b      	mov	r3, r7
 800706c:	4605      	mov	r5, r0
 800706e:	e7d4      	b.n	800701a <arm_conv_f32+0x3be>
 8007070:	9b02      	ldr	r3, [sp, #8]
 8007072:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	9302      	str	r3, [sp, #8]
 800707a:	9b03      	ldr	r3, [sp, #12]
 800707c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8007080:	4403      	add	r3, r0
 8007082:	465d      	mov	r5, fp
 8007084:	469e      	mov	lr, r3
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	f013 0c03 	ands.w	ip, r3, #3
 800708c:	d075      	beq.n	800717a <arm_conv_f32+0x51e>
 800708e:	9b02      	ldr	r3, [sp, #8]
 8007090:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8007094:	f004 0403 	and.w	r4, r4, #3
 8007098:	f104 3bff 	add.w	fp, r4, #4294967295
 800709c:	f103 0801 	add.w	r8, r3, #1
 80070a0:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80070a4:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80070a8:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80070ac:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80070b0:	f1a7 0210 	sub.w	r2, r7, #16
 80070b4:	4618      	mov	r0, r3
 80070b6:	465b      	mov	r3, fp
 80070b8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80070bc:	468b      	mov	fp, r1
 80070be:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80070c2:	4621      	mov	r1, r4
 80070c4:	4617      	mov	r7, r2
 80070c6:	461c      	mov	r4, r3
 80070c8:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8006f50 <arm_conv_f32+0x2f4>
 80070cc:	f10e 0210 	add.w	r2, lr, #16
 80070d0:	463b      	mov	r3, r7
 80070d2:	4656      	mov	r6, sl
 80070d4:	ed12 7a04 	vldr	s14, [r2, #-16]
 80070d8:	edd3 3a04 	vldr	s7, [r3, #16]
 80070dc:	ed12 6a03 	vldr	s12, [r2, #-12]
 80070e0:	ed93 4a03 	vldr	s8, [r3, #12]
 80070e4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80070e8:	edd3 4a02 	vldr	s9, [r3, #8]
 80070ec:	ed52 5a01 	vldr	s11, [r2, #-4]
 80070f0:	ed93 5a01 	vldr	s10, [r3, #4]
 80070f4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80070f8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80070fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007100:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8007104:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007108:	ee65 6a85 	vmul.f32	s13, s11, s10
 800710c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007110:	3e01      	subs	r6, #1
 8007112:	f102 0210 	add.w	r2, r2, #16
 8007116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711a:	f1a3 0310 	sub.w	r3, r3, #16
 800711e:	d1d9      	bne.n	80070d4 <arm_conv_f32+0x478>
 8007120:	4486      	add	lr, r0
 8007122:	b1d1      	cbz	r1, 800715a <arm_conv_f32+0x4fe>
 8007124:	ed99 7a00 	vldr	s14, [r9]
 8007128:	edde 6a00 	vldr	s13, [lr]
 800712c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007130:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007134:	b18c      	cbz	r4, 800715a <arm_conv_f32+0x4fe>
 8007136:	ed19 7a01 	vldr	s14, [r9, #-4]
 800713a:	edde 6a01 	vldr	s13, [lr, #4]
 800713e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007142:	2c01      	cmp	r4, #1
 8007144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007148:	d007      	beq.n	800715a <arm_conv_f32+0x4fe>
 800714a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800714e:	ed59 6a02 	vldr	s13, [r9, #-8]
 8007152:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007156:	ee77 7a87 	vadd.f32	s15, s15, s14
 800715a:	ece5 7a01 	vstmia	r5!, {s15}
 800715e:	4565      	cmp	r5, ip
 8007160:	46c6      	mov	lr, r8
 8007162:	f108 0804 	add.w	r8, r8, #4
 8007166:	d1af      	bne.n	80070c8 <arm_conv_f32+0x46c>
 8007168:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800716c:	4659      	mov	r1, fp
 800716e:	9b01      	ldr	r3, [sp, #4]
 8007170:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007174:	e71c      	b.n	8006fb0 <arm_conv_f32+0x354>
 8007176:	4686      	mov	lr, r0
 8007178:	e785      	b.n	8007086 <arm_conv_f32+0x42a>
 800717a:	46ac      	mov	ip, r5
 800717c:	e7f7      	b.n	800716e <arm_conv_f32+0x512>
 800717e:	9a01      	ldr	r2, [sp, #4]
 8007180:	2a00      	cmp	r2, #0
 8007182:	f47f aedd 	bne.w	8006f40 <arm_conv_f32+0x2e4>
 8007186:	e76d      	b.n	8007064 <arm_conv_f32+0x408>
 8007188:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8006f50 <arm_conv_f32+0x2f4>
 800718c:	4680      	mov	r8, r0
 800718e:	e5e3      	b.n	8006d58 <arm_conv_f32+0xfc>

08007190 <arm_radix8_butterfly_f32>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	ed2d 8b10 	vpush	{d8-d15}
 8007198:	b095      	sub	sp, #84	; 0x54
 800719a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800719e:	4603      	mov	r3, r0
 80071a0:	3304      	adds	r3, #4
 80071a2:	ed9f bab9 	vldr	s22, [pc, #740]	; 8007488 <arm_radix8_butterfly_f32+0x2f8>
 80071a6:	9012      	str	r0, [sp, #72]	; 0x48
 80071a8:	468b      	mov	fp, r1
 80071aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80071ac:	4689      	mov	r9, r1
 80071ae:	ea4f 06db 	mov.w	r6, fp, lsr #3
 80071b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071b4:	960f      	str	r6, [sp, #60]	; 0x3c
 80071b6:	ea4f 1846 	mov.w	r8, r6, lsl #5
 80071ba:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80071be:	eb03 0508 	add.w	r5, r3, r8
 80071c2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80071c6:	eb05 040e 	add.w	r4, r5, lr
 80071ca:	0137      	lsls	r7, r6, #4
 80071cc:	eba6 030a 	sub.w	r3, r6, sl
 80071d0:	eb04 000e 	add.w	r0, r4, lr
 80071d4:	44b2      	add	sl, r6
 80071d6:	1d3a      	adds	r2, r7, #4
 80071d8:	9702      	str	r7, [sp, #8]
 80071da:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80071de:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80071e2:	ebae 0c06 	sub.w	ip, lr, r6
 80071e6:	9703      	str	r7, [sp, #12]
 80071e8:	eb03 0708 	add.w	r7, r3, r8
 80071ec:	9701      	str	r7, [sp, #4]
 80071ee:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80071f2:	9706      	str	r7, [sp, #24]
 80071f4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80071f6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80071fa:	f10e 0104 	add.w	r1, lr, #4
 80071fe:	4439      	add	r1, r7
 8007200:	443a      	add	r2, r7
 8007202:	0137      	lsls	r7, r6, #4
 8007204:	00f6      	lsls	r6, r6, #3
 8007206:	9704      	str	r7, [sp, #16]
 8007208:	9605      	str	r6, [sp, #20]
 800720a:	9f01      	ldr	r7, [sp, #4]
 800720c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800720e:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8007212:	f04f 0c00 	mov.w	ip, #0
 8007216:	edd4 6a00 	vldr	s13, [r4]
 800721a:	edd7 1a00 	vldr	s3, [r7]
 800721e:	ed16 aa01 	vldr	s20, [r6, #-4]
 8007222:	edd5 5a00 	vldr	s11, [r5]
 8007226:	ed52 9a01 	vldr	s19, [r2, #-4]
 800722a:	ed90 6a00 	vldr	s12, [r0]
 800722e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007232:	ed93 3a00 	vldr	s6, [r3]
 8007236:	ee39 0a86 	vadd.f32	s0, s19, s12
 800723a:	ee33 2a21 	vadd.f32	s4, s6, s3
 800723e:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8007242:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8007246:	ee35 7a02 	vadd.f32	s14, s10, s4
 800724a:	ee34 4a80 	vadd.f32	s8, s9, s0
 800724e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007252:	ee74 6a07 	vadd.f32	s13, s8, s14
 8007256:	ee34 4a47 	vsub.f32	s8, s8, s14
 800725a:	ed46 6a01 	vstr	s13, [r6, #-4]
 800725e:	ed85 4a00 	vstr	s8, [r5]
 8007262:	edd1 6a00 	vldr	s13, [r1]
 8007266:	ed94 9a01 	vldr	s18, [r4, #4]
 800726a:	edd3 2a01 	vldr	s5, [r3, #4]
 800726e:	edd7 8a01 	vldr	s17, [r7, #4]
 8007272:	edd6 0a00 	vldr	s1, [r6]
 8007276:	edd5 3a01 	vldr	s7, [r5, #4]
 800727a:	ed90 8a01 	vldr	s16, [r0, #4]
 800727e:	ed92 7a00 	vldr	s14, [r2]
 8007282:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007286:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800728a:	ee72 aae8 	vsub.f32	s21, s5, s17
 800728e:	ee77 1ac3 	vsub.f32	s3, s15, s6
 8007292:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8007296:	ee77 7a83 	vadd.f32	s15, s15, s6
 800729a:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800729e:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80072a2:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80072a6:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80072aa:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80072ae:	ee77 0a08 	vadd.f32	s1, s14, s16
 80072b2:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80072b6:	ee37 7a48 	vsub.f32	s14, s14, s16
 80072ba:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80072be:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80072c2:	ee76 6a89 	vadd.f32	s13, s13, s18
 80072c6:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80072ca:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80072ce:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80072d2:	ee35 5a42 	vsub.f32	s10, s10, s4
 80072d6:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80072da:	ee33 2a20 	vadd.f32	s4, s6, s1
 80072de:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80072e2:	ee33 3a60 	vsub.f32	s6, s6, s1
 80072e6:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80072ea:	ee77 0a01 	vadd.f32	s1, s14, s2
 80072ee:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80072f2:	ee37 7a41 	vsub.f32	s14, s14, s2
 80072f6:	ee73 1a84 	vadd.f32	s3, s7, s8
 80072fa:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80072fe:	ee76 3a27 	vadd.f32	s7, s12, s15
 8007302:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007306:	ee32 8a00 	vadd.f32	s16, s4, s0
 800730a:	ee33 1a45 	vsub.f32	s2, s6, s10
 800730e:	ee32 2a40 	vsub.f32	s4, s4, s0
 8007312:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007316:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800731a:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800731e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007322:	ee34 6a67 	vsub.f32	s12, s8, s15
 8007326:	ee75 4a87 	vadd.f32	s9, s11, s14
 800732a:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800732e:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007332:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007336:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800733a:	44dc      	add	ip, fp
 800733c:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007340:	45e1      	cmp	r9, ip
 8007342:	ed86 8a00 	vstr	s16, [r6]
 8007346:	ed85 2a01 	vstr	s4, [r5, #4]
 800734a:	4456      	add	r6, sl
 800734c:	ed02 0a01 	vstr	s0, [r2, #-4]
 8007350:	4455      	add	r5, sl
 8007352:	edc0 6a00 	vstr	s13, [r0]
 8007356:	ed82 1a00 	vstr	s2, [r2]
 800735a:	ed80 5a01 	vstr	s10, [r0, #4]
 800735e:	4452      	add	r2, sl
 8007360:	ed01 3a01 	vstr	s6, [r1, #-4]
 8007364:	4450      	add	r0, sl
 8007366:	edc7 2a00 	vstr	s5, [r7]
 800736a:	edc4 4a00 	vstr	s9, [r4]
 800736e:	ed83 7a00 	vstr	s14, [r3]
 8007372:	edc1 5a00 	vstr	s11, [r1]
 8007376:	edc7 3a01 	vstr	s7, [r7, #4]
 800737a:	4451      	add	r1, sl
 800737c:	ed84 6a01 	vstr	s12, [r4, #4]
 8007380:	4457      	add	r7, sl
 8007382:	edc3 7a01 	vstr	s15, [r3, #4]
 8007386:	4454      	add	r4, sl
 8007388:	4453      	add	r3, sl
 800738a:	f63f af44 	bhi.w	8007216 <arm_radix8_butterfly_f32+0x86>
 800738e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007390:	2b07      	cmp	r3, #7
 8007392:	f240 81b7 	bls.w	8007704 <arm_radix8_butterfly_f32+0x574>
 8007396:	9b06      	ldr	r3, [sp, #24]
 8007398:	9903      	ldr	r1, [sp, #12]
 800739a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800739c:	9e05      	ldr	r6, [sp, #20]
 800739e:	9a04      	ldr	r2, [sp, #16]
 80073a0:	f103 0c08 	add.w	ip, r3, #8
 80073a4:	9b02      	ldr	r3, [sp, #8]
 80073a6:	3108      	adds	r1, #8
 80073a8:	f108 0808 	add.w	r8, r8, #8
 80073ac:	1841      	adds	r1, r0, r1
 80073ae:	3608      	adds	r6, #8
 80073b0:	330c      	adds	r3, #12
 80073b2:	4604      	mov	r4, r0
 80073b4:	4444      	add	r4, r8
 80073b6:	18c3      	adds	r3, r0, r3
 80073b8:	9109      	str	r1, [sp, #36]	; 0x24
 80073ba:	1981      	adds	r1, r0, r6
 80073bc:	f10e 0e08 	add.w	lr, lr, #8
 80073c0:	3208      	adds	r2, #8
 80073c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80073c4:	9107      	str	r1, [sp, #28]
 80073c6:	4604      	mov	r4, r0
 80073c8:	4601      	mov	r1, r0
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	f100 030c 	add.w	r3, r0, #12
 80073d0:	4474      	add	r4, lr
 80073d2:	f04f 0801 	mov.w	r8, #1
 80073d6:	1882      	adds	r2, r0, r2
 80073d8:	4461      	add	r1, ip
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	464b      	mov	r3, r9
 80073de:	940a      	str	r4, [sp, #40]	; 0x28
 80073e0:	46c1      	mov	r9, r8
 80073e2:	9208      	str	r2, [sp, #32]
 80073e4:	46d8      	mov	r8, fp
 80073e6:	9106      	str	r1, [sp, #24]
 80073e8:	f04f 0e00 	mov.w	lr, #0
 80073ec:	469b      	mov	fp, r3
 80073ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80073f2:	449e      	add	lr, r3
 80073f4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80073f8:	441a      	add	r2, r3
 80073fa:	920e      	str	r2, [sp, #56]	; 0x38
 80073fc:	441a      	add	r2, r3
 80073fe:	18d4      	adds	r4, r2, r3
 8007400:	18e5      	adds	r5, r4, r3
 8007402:	18ee      	adds	r6, r5, r3
 8007404:	18f7      	adds	r7, r6, r3
 8007406:	eb07 0c03 	add.w	ip, r7, r3
 800740a:	920d      	str	r2, [sp, #52]	; 0x34
 800740c:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8007410:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8007414:	910c      	str	r1, [sp, #48]	; 0x30
 8007416:	4419      	add	r1, r3
 8007418:	9103      	str	r1, [sp, #12]
 800741a:	4419      	add	r1, r3
 800741c:	18ca      	adds	r2, r1, r3
 800741e:	9202      	str	r2, [sp, #8]
 8007420:	441a      	add	r2, r3
 8007422:	18d0      	adds	r0, r2, r3
 8007424:	ed92 ea01 	vldr	s28, [r2, #4]
 8007428:	9a02      	ldr	r2, [sp, #8]
 800742a:	edd4 7a00 	vldr	s15, [r4]
 800742e:	edd2 da01 	vldr	s27, [r2, #4]
 8007432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007434:	ed91 da01 	vldr	s26, [r1, #4]
 8007438:	ed92 ca01 	vldr	s24, [r2, #4]
 800743c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800743e:	9903      	ldr	r1, [sp, #12]
 8007440:	edcd 7a03 	vstr	s15, [sp, #12]
 8007444:	edd2 7a00 	vldr	s15, [r2]
 8007448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800744a:	edcd 7a02 	vstr	s15, [sp, #8]
 800744e:	edd2 7a00 	vldr	s15, [r2]
 8007452:	edd0 ea01 	vldr	s29, [r0, #4]
 8007456:	edd1 ca01 	vldr	s25, [r1, #4]
 800745a:	eddc ba00 	vldr	s23, [ip]
 800745e:	edd7 aa00 	vldr	s21, [r7]
 8007462:	ed96 aa00 	vldr	s20, [r6]
 8007466:	edd5 9a00 	vldr	s19, [r5]
 800746a:	edcd 7a01 	vstr	s15, [sp, #4]
 800746e:	4403      	add	r3, r0
 8007470:	ed93 fa01 	vldr	s30, [r3, #4]
 8007474:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8007478:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800747c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007480:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007484:	46cc      	mov	ip, r9
 8007486:	e001      	b.n	800748c <arm_radix8_butterfly_f32+0x2fc>
 8007488:	3f3504f3 	.word	0x3f3504f3
 800748c:	ed91 6a00 	vldr	s12, [r1]
 8007490:	ed93 5a00 	vldr	s10, [r3]
 8007494:	edd0 fa00 	vldr	s31, [r0]
 8007498:	edd4 7a00 	vldr	s15, [r4]
 800749c:	ed95 7a00 	vldr	s14, [r5]
 80074a0:	ed56 3a01 	vldr	s7, [r6, #-4]
 80074a4:	ed17 3a01 	vldr	s6, [r7, #-4]
 80074a8:	ed92 2a00 	vldr	s4, [r2]
 80074ac:	ed96 0a00 	vldr	s0, [r6]
 80074b0:	ee33 8a85 	vadd.f32	s16, s7, s10
 80074b4:	ee32 1a06 	vadd.f32	s2, s4, s12
 80074b8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80074bc:	ee77 4a87 	vadd.f32	s9, s15, s14
 80074c0:	ee78 1a04 	vadd.f32	s3, s16, s8
 80074c4:	ee71 6a24 	vadd.f32	s13, s2, s9
 80074c8:	ee32 2a46 	vsub.f32	s4, s4, s12
 80074cc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80074d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074d4:	ed06 6a01 	vstr	s12, [r6, #-4]
 80074d8:	edd4 8a01 	vldr	s17, [r4, #4]
 80074dc:	ed92 9a01 	vldr	s18, [r2, #4]
 80074e0:	edd7 0a00 	vldr	s1, [r7]
 80074e4:	edd1 2a01 	vldr	s5, [r1, #4]
 80074e8:	ed95 7a01 	vldr	s14, [r5, #4]
 80074ec:	ed93 6a01 	vldr	s12, [r3, #4]
 80074f0:	edd0 5a01 	vldr	s11, [r0, #4]
 80074f4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80074f8:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80074fc:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007500:	ee78 fac7 	vsub.f32	s31, s17, s14
 8007504:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007508:	ee38 7a87 	vadd.f32	s14, s17, s14
 800750c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007510:	ee79 2a22 	vadd.f32	s5, s18, s5
 8007514:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007518:	ee72 7a67 	vsub.f32	s15, s4, s15
 800751c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007520:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8007524:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007528:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800752c:	ee32 1a08 	vadd.f32	s2, s4, s16
 8007530:	ee72 fa87 	vadd.f32	s31, s5, s14
 8007534:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007538:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800753c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007540:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007544:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8007548:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800754c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8007550:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8007554:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007558:	ee30 6a46 	vsub.f32	s12, s0, s12
 800755c:	ee74 0a22 	vadd.f32	s1, s8, s5
 8007560:	ee36 0a28 	vadd.f32	s0, s12, s17
 8007564:	ee74 2a62 	vsub.f32	s5, s8, s5
 8007568:	ee36 6a68 	vsub.f32	s12, s12, s17
 800756c:	ee32 4a64 	vsub.f32	s8, s4, s9
 8007570:	ee73 8a09 	vadd.f32	s17, s6, s18
 8007574:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007578:	ee33 9a49 	vsub.f32	s18, s6, s18
 800757c:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007580:	ee35 3a85 	vadd.f32	s6, s11, s10
 8007584:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007588:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800758c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8007590:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007594:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007598:	ee35 8a03 	vadd.f32	s16, s10, s6
 800759c:	ee38 0a80 	vadd.f32	s0, s17, s0
 80075a0:	ee73 3a82 	vadd.f32	s7, s7, s4
 80075a4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80075a8:	ed9d 2a01 	vldr	s4, [sp, #4]
 80075ac:	eddd 1a02 	vldr	s3, [sp, #8]
 80075b0:	ee35 5a43 	vsub.f32	s10, s10, s6
 80075b4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80075b8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80075bc:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80075c0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80075c4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80075c8:	ee76 5a49 	vsub.f32	s11, s12, s18
 80075cc:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80075d0:	ee39 6a06 	vadd.f32	s12, s18, s12
 80075d4:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80075d8:	ee21 4a84 	vmul.f32	s8, s3, s8
 80075dc:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80075e0:	ee22 7a07 	vmul.f32	s14, s4, s14
 80075e4:	ee22 2a08 	vmul.f32	s4, s4, s16
 80075e8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80075ec:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80075f0:	ee31 1a09 	vadd.f32	s2, s2, s18
 80075f4:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80075f8:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80075fc:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007600:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007604:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007608:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800760c:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007610:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8007614:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007618:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800761c:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007620:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8007624:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007628:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800762c:	eddd 5a03 	vldr	s11, [sp, #12]
 8007630:	edc6 fa00 	vstr	s31, [r6]
 8007634:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007638:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800763c:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007640:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8007644:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8007648:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800764c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 8007650:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8007654:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007658:	ee74 4a89 	vadd.f32	s9, s9, s18
 800765c:	ee34 3a43 	vsub.f32	s6, s8, s6
 8007660:	ee78 8a85 	vadd.f32	s17, s17, s10
 8007664:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007668:	44c4      	add	ip, r8
 800766a:	45e3      	cmp	fp, ip
 800766c:	edc3 3a00 	vstr	s7, [r3]
 8007670:	edc3 6a01 	vstr	s13, [r3, #4]
 8007674:	4456      	add	r6, sl
 8007676:	ed07 1a01 	vstr	s2, [r7, #-4]
 800767a:	edc7 0a00 	vstr	s1, [r7]
 800767e:	4453      	add	r3, sl
 8007680:	ed80 2a00 	vstr	s4, [r0]
 8007684:	edc0 2a01 	vstr	s5, [r0, #4]
 8007688:	4457      	add	r7, sl
 800768a:	edc2 1a00 	vstr	s3, [r2]
 800768e:	ed82 7a01 	vstr	s14, [r2, #4]
 8007692:	4450      	add	r0, sl
 8007694:	ed85 8a00 	vstr	s16, [r5]
 8007698:	ed85 0a01 	vstr	s0, [r5, #4]
 800769c:	4452      	add	r2, sl
 800769e:	edc1 4a00 	vstr	s9, [r1]
 80076a2:	4455      	add	r5, sl
 80076a4:	ed81 3a01 	vstr	s6, [r1, #4]
 80076a8:	edc4 8a00 	vstr	s17, [r4]
 80076ac:	ed84 6a01 	vstr	s12, [r4, #4]
 80076b0:	4451      	add	r1, sl
 80076b2:	4454      	add	r4, sl
 80076b4:	f63f aeea 	bhi.w	800748c <arm_radix8_butterfly_f32+0x2fc>
 80076b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ba:	3308      	adds	r3, #8
 80076bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80076be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c0:	3308      	adds	r3, #8
 80076c2:	930a      	str	r3, [sp, #40]	; 0x28
 80076c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c6:	3308      	adds	r3, #8
 80076c8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	3308      	adds	r3, #8
 80076ce:	9308      	str	r3, [sp, #32]
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	3308      	adds	r3, #8
 80076d4:	9307      	str	r3, [sp, #28]
 80076d6:	9b06      	ldr	r3, [sp, #24]
 80076d8:	3308      	adds	r3, #8
 80076da:	9306      	str	r3, [sp, #24]
 80076dc:	9b05      	ldr	r3, [sp, #20]
 80076de:	3308      	adds	r3, #8
 80076e0:	9305      	str	r3, [sp, #20]
 80076e2:	9b04      	ldr	r3, [sp, #16]
 80076e4:	3308      	adds	r3, #8
 80076e6:	9304      	str	r3, [sp, #16]
 80076e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ea:	f109 0901 	add.w	r9, r9, #1
 80076ee:	454b      	cmp	r3, r9
 80076f0:	f47f ae7d 	bne.w	80073ee <arm_radix8_butterfly_f32+0x25e>
 80076f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	46d9      	mov	r9, fp
 80076fc:	9310      	str	r3, [sp, #64]	; 0x40
 80076fe:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8007702:	e554      	b.n	80071ae <arm_radix8_butterfly_f32+0x1e>
 8007704:	b015      	add	sp, #84	; 0x54
 8007706:	ecbd 8b10 	vpop	{d8-d15}
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	bf00      	nop

08007710 <memset>:
 8007710:	4402      	add	r2, r0
 8007712:	4603      	mov	r3, r0
 8007714:	4293      	cmp	r3, r2
 8007716:	d100      	bne.n	800771a <memset+0xa>
 8007718:	4770      	bx	lr
 800771a:	f803 1b01 	strb.w	r1, [r3], #1
 800771e:	e7f9      	b.n	8007714 <memset+0x4>

08007720 <__libc_init_array>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4d0d      	ldr	r5, [pc, #52]	; (8007758 <__libc_init_array+0x38>)
 8007724:	4c0d      	ldr	r4, [pc, #52]	; (800775c <__libc_init_array+0x3c>)
 8007726:	1b64      	subs	r4, r4, r5
 8007728:	10a4      	asrs	r4, r4, #2
 800772a:	2600      	movs	r6, #0
 800772c:	42a6      	cmp	r6, r4
 800772e:	d109      	bne.n	8007744 <__libc_init_array+0x24>
 8007730:	4d0b      	ldr	r5, [pc, #44]	; (8007760 <__libc_init_array+0x40>)
 8007732:	4c0c      	ldr	r4, [pc, #48]	; (8007764 <__libc_init_array+0x44>)
 8007734:	f000 f818 	bl	8007768 <_init>
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	2600      	movs	r6, #0
 800773e:	42a6      	cmp	r6, r4
 8007740:	d105      	bne.n	800774e <__libc_init_array+0x2e>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f855 3b04 	ldr.w	r3, [r5], #4
 8007748:	4798      	blx	r3
 800774a:	3601      	adds	r6, #1
 800774c:	e7ee      	b.n	800772c <__libc_init_array+0xc>
 800774e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007752:	4798      	blx	r3
 8007754:	3601      	adds	r6, #1
 8007756:	e7f2      	b.n	800773e <__libc_init_array+0x1e>
 8007758:	0801a7b8 	.word	0x0801a7b8
 800775c:	0801a7b8 	.word	0x0801a7b8
 8007760:	0801a7b8 	.word	0x0801a7b8
 8007764:	0801a7bc 	.word	0x0801a7bc

08007768 <_init>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr

08007774 <_fini>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr
