
JerryRigIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006788  08006788  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006790  08006790  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f40  20000034  080067cc  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f74  080067cc  00020f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b292  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036cc  00000000  00000000  0003b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  0003ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012db  00000000  00000000  000402d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c770  00000000  00000000  000415b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfd9  00000000  00000000  0006dd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011912e  00000000  00000000  00089cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006924  00000000  00000000  001a2e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001a9750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001363  00000000  00000000  001a97d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001aab36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006728 	.word	0x08006728

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	08006728 	.word	0x08006728

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  //first half of adc buffer is full
  in_buf_ptr = &adc_val[0];
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80004f2:	4a08      	ldr	r2, [pc, #32]	; (8000514 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80004f4:	601a      	str	r2, [r3, #0]
  out_buf_ptr = &dac_val[HALF_BUF_SIZE];// + HALF_BUF_SIZE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80004fa:	601a      	str	r2, [r3, #0]
  flag=1;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000f3c 	.word	0x20000f3c
 8000514:	2000073c 	.word	0x2000073c
 8000518:	20000f40 	.word	0x20000f40
 800051c:	20000d3c 	.word	0x20000d3c
 8000520:	20000f44 	.word	0x20000f44

08000524 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  //second half of adc buffer is full
  in_buf_ptr = &adc_val[HALF_BUF_SIZE];// + HALF_BUF_SIZE;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <HAL_ADC_ConvCpltCallback+0x28>)
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000530:	601a      	str	r2, [r3, #0]
  out_buf_ptr = &dac_val[0];
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_ADC_ConvCpltCallback+0x30>)
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <HAL_ADC_ConvCpltCallback+0x34>)
 8000536:	601a      	str	r2, [r3, #0]
  flag=1;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <HAL_ADC_ConvCpltCallback+0x38>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000f3c 	.word	0x20000f3c
 8000550:	2000093c 	.word	0x2000093c
 8000554:	20000f40 	.word	0x20000f40
 8000558:	20000b3c 	.word	0x20000b3c
 800055c:	20000f44 	.word	0x20000f44

08000560 <process_data>:

void process_data() {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
  for (int i=0;i<HALF_BUF_SIZE;i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e01b      	b.n	80005a4 <process_data+0x44>
    out_buf_ptr[i]=in_buf_ptr[i]; //* Wave_LUT[counter];
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <process_data+0x58>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	441a      	add	r2, r3
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <process_data+0x5c>)
 8000578:	6819      	ldr	r1, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	440b      	add	r3, r1
 8000580:	6812      	ldr	r2, [r2, #0]
 8000582:	601a      	str	r2, [r3, #0]
    counter++;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <process_data+0x60>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <process_data+0x60>)
 800058c:	6013      	str	r3, [r2, #0]
    if (counter==NS) counter = 0;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <process_data+0x60>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8000596:	d102      	bne.n	800059e <process_data+0x3e>
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <process_data+0x60>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
  for (int i=0;i<HALF_BUF_SIZE;i++) {
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b7f      	cmp	r3, #127	; 0x7f
 80005a8:	dde0      	ble.n	800056c <process_data+0xc>
  }
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	20000f3c 	.word	0x20000f3c
 80005bc:	20000f40 	.word	0x20000f40
 80005c0:	20000f48 	.word	0x20000f48

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fd42 	bl	8001052 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f847 	bl	8000660 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005d2:	f000 f8a9 	bl	8000728 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 fa39 	bl	8000a4c <MX_GPIO_Init>
  MX_DMA_Init();
 80005da:	f000 fa11 	bl	8000a00 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005de:	f000 f97d 	bl	80008dc <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e2:	f000 f9df 	bl	80009a4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005e6:	f000 f8cf 	bl	8000788 <MX_ADC1_Init>
  MX_DAC1_Init();
 80005ea:	f000 f945 	bl	8000878 <MX_DAC1_Init>
  MX_TIM6_Init();
 80005ee:	f000 f9a3 	bl	8000938 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80005f2:	4812      	ldr	r0, [pc, #72]	; (800063c <main+0x78>)
 80005f4:	f004 fc82 	bl	8004efc <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_val, FULL_BUF_SIZE);
 80005f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fc:	4910      	ldr	r1, [pc, #64]	; (8000640 <main+0x7c>)
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <main+0x80>)
 8000600:	f001 f8fc 	bl	80017fc <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) dac_val, FULL_BUF_SIZE, DAC_ALIGN_12B_R);
 8000604:	2300      	movs	r3, #0
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <main+0x84>)
 800060e:	2100      	movs	r1, #0
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <main+0x88>)
 8000612:	f002 f8e9 	bl	80027e8 <HAL_DAC_Start_DMA>

  arm_conv_f32(a, 5, b, 5, c);
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <main+0x8c>)
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2305      	movs	r3, #5
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <main+0x90>)
 800061e:	2105      	movs	r1, #5
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <main+0x94>)
 8000622:	f005 fdbb 	bl	800619c <arm_conv_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag) {
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <main+0x98>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0fb      	beq.n	8000626 <main+0x62>
		  process_data();
 800062e:	f7ff ff97 	bl	8000560 <process_data>
		  flag = 0;
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <main+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	  if (flag) {
 8000638:	e7f5      	b.n	8000626 <main+0x62>
 800063a:	bf00      	nop
 800063c:	200001e4 	.word	0x200001e4
 8000640:	2000073c 	.word	0x2000073c
 8000644:	20000050 	.word	0x20000050
 8000648:	20000b3c 	.word	0x20000b3c
 800064c:	20000100 	.word	0x20000100
 8000650:	20000f4c 	.word	0x20000f4c
 8000654:	20000014 	.word	0x20000014
 8000658:	20000000 	.word	0x20000000
 800065c:	20000f44 	.word	0x20000f44

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f82e 	bl	80066d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f003 f853 	bl	8003730 <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 fa74 	bl	8000b7c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000694:	f003 f82e 	bl	80036f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xc4>)
 800069a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069e:	4a21      	ldr	r2, [pc, #132]	; (8000724 <SystemClock_Config+0xc4>)
 80006a0:	f023 0318 	bic.w	r3, r3, #24
 80006a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a8:	2314      	movs	r3, #20
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80006c8:	2347      	movs	r3, #71	; 0x47
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80006d4:	2306      	movs	r3, #6
 80006d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f89d 	bl	800381c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e8:	f000 fa48 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f003 fca2 	bl	8004050 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000712:	f000 fa33 	bl	8000b7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000716:	f004 f9bb 	bl	8004a90 <HAL_RCCEx_EnableMSIPLLMode>
}
 800071a:	bf00      	nop
 800071c:	3758      	adds	r7, #88	; 0x58
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0a4      	sub	sp, #144	; 0x90
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	228c      	movs	r2, #140	; 0x8c
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f005 ffcb 	bl	80066d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800073a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800073e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000740:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000748:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800074c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800074e:	2301      	movs	r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000756:	2318      	movs	r3, #24
 8000758:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000766:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800076a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fe92 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800077a:	f000 f9ff 	bl	8000b7c <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3790      	adds	r7, #144	; 0x90
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ac:	4a30      	ldr	r2, [pc, #192]	; (8000870 <MX_ADC1_Init+0xe8>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_ADC1_Init+0xe4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_ADC1_Init+0xe4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_ADC1_Init+0xe4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_ADC1_Init+0xe4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_ADC1_Init+0xe4>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_ADC1_Init+0xe4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ea:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 80007ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <MX_ADC1_Init+0xe4>)
 80007f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC1_Init+0xe4>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_ADC1_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080e:	4817      	ldr	r0, [pc, #92]	; (800086c <MX_ADC1_Init+0xe4>)
 8000810:	f000 fea0 	bl	8001554 <HAL_ADC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800081a:	f000 f9af 	bl	8000b7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	4810      	ldr	r0, [pc, #64]	; (800086c <MX_ADC1_Init+0xe4>)
 800082a:	f001 fdf9 	bl	8002420 <HAL_ADCEx_MultiModeConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000834:	f000 f9a2 	bl	8000b7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_ADC1_Init+0xec>)
 800083a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083c:	2306      	movs	r3, #6
 800083e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000844:	237f      	movs	r3, #127	; 0x7f
 8000846:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000848:	2304      	movs	r3, #4
 800084a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_ADC1_Init+0xe4>)
 8000856:	f001 f897 	bl	8001988 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000860:	f000 f98c 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000050 	.word	0x20000050
 8000870:	50040000 	.word	0x50040000
 8000874:	04300002 	.word	0x04300002

08000878 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2224      	movs	r2, #36	; 0x24
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f005 ff23 	bl	80066d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_DAC1_Init+0x5c>)
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_DAC1_Init+0x60>)
 800088e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <MX_DAC1_Init+0x5c>)
 8000892:	f001 ff86 	bl	80027a2 <HAL_DAC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800089c:	f000 f96e 	bl	8000b7c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80008a4:	2304      	movs	r3, #4
 80008a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_DAC1_Init+0x5c>)
 80008bc:	f002 f87e 	bl	80029bc <HAL_DAC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f959 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	; 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000100 	.word	0x20000100
 80008d8:	40007400 	.word	0x40007400

080008dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MX_LPUART1_UART_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_LPUART1_UART_Init+0x58>)
 80008ea:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_LPUART1_UART_Init+0x50>)
 800091a:	f004 fc79 	bl	8005210 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f92a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000015c 	.word	0x2000015c
 8000930:	40008000 	.word	0x40008000
 8000934:	00033324 	.word	0x00033324

08000938 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_TIM6_Init+0x64>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_TIM6_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_TIM6_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_TIM6_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 492;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_TIM6_Init+0x64>)
 800095c:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8000960:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_TIM6_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_TIM6_Init+0x64>)
 800096a:	f004 fa6f 	bl	8004e4c <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000974:	f000 f902 	bl	8000b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000978:	2320      	movs	r3, #32
 800097a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_TIM6_Init+0x64>)
 8000986:	f004 fbbb 	bl	8005100 <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 f8f4 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001e4 	.word	0x200001e4
 80009a0:	40001000 	.word	0x40001000

080009a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2206      	movs	r2, #6
 80009b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2202      	movs	r2, #2
 80009c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	f002 fd3c 	bl	8003464 <HAL_PCD_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f8c3 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000230 	.word	0x20000230

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_DMA_Init+0x48>)
 8000a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <MX_DMA_Init+0x48>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6493      	str	r3, [r2, #72]	; 0x48
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MX_DMA_Init+0x48>)
 8000a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	200b      	movs	r0, #11
 8000a24:	f001 fe87 	bl	8002736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a28:	200b      	movs	r0, #11
 8000a2a:	f001 fea0 	bl	800276e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	200d      	movs	r0, #13
 8000a34:	f001 fe7f 	bl	8002736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a38:	200d      	movs	r0, #13
 8000a3a:	f001 fe98 	bl	800276e <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a41      	ldr	r2, [pc, #260]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a3b      	ldr	r2, [pc, #236]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b36      	ldr	r3, [pc, #216]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a35      	ldr	r2, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a29      	ldr	r2, [pc, #164]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_GPIO_Init+0x120>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000ada:	f002 fe8f 	bl	80037fc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ae4:	4822      	ldr	r0, [pc, #136]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000ae6:	f002 fca5 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2140      	movs	r1, #64	; 0x40
 8000aee:	4821      	ldr	r0, [pc, #132]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000af0:	f002 fca0 	bl	8003434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481b      	ldr	r0, [pc, #108]	; (8000b78 <MX_GPIO_Init+0x12c>)
 8000b0c:	f002 fb00 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b10:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_GPIO_Init+0x124>)
 8000b2a:	f002 faf1 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b2e:	2320      	movs	r3, #32
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b42:	f002 fae5 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_GPIO_Init+0x128>)
 8000b5e:	f002 fad7 	bl	8003110 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48001800 	.word	0x48001800
 8000b78:	48000800 	.word	0x48000800

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2a      	ldr	r2, [pc, #168]	; (8000c98 <HAL_ADC_MspInit+0xc8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d14e      	bne.n	8000c90 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_ADC_MspInit+0xcc>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c26:	2303      	movs	r3, #3
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <HAL_ADC_MspInit+0xd0>)
 8000c36:	f002 fa6b 	bl	8003110 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_ADC_MspInit+0xd8>)
 8000c3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c76:	f002 f853 	bl	8002d20 <HAL_DMA_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000c80:	f7ff ff7c 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c88:	651a      	str	r2, [r3, #80]	; 0x50
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_ADC_MspInit+0xd4>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	50040000 	.word	0x50040000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	200000b8 	.word	0x200000b8
 8000ca8:	40020008 	.word	0x40020008

08000cac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <HAL_DAC_MspInit+0xcc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d14f      	bne.n	8000d6e <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <HAL_DAC_MspInit+0xd0>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	4a2a      	ldr	r2, [pc, #168]	; (8000d7c <HAL_DAC_MspInit+0xd0>)
 8000cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <HAL_DAC_MspInit+0xd0>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <HAL_DAC_MspInit+0xd0>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a24      	ldr	r2, [pc, #144]	; (8000d7c <HAL_DAC_MspInit+0xd0>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <HAL_DAC_MspInit+0xd0>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d02:	2303      	movs	r3, #3
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f002 f9fc 	bl	8003110 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <HAL_DAC_MspInit+0xd8>)
 8000d1c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d20:	2206      	movs	r2, #6
 8000d22:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d26:	2210      	movs	r2, #16
 8000d28:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d44:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d48:	2220      	movs	r2, #32
 8000d4a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d54:	f001 ffe4 	bl	8002d20 <HAL_DMA_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000d5e:	f7ff ff0d 	bl	8000b7c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <HAL_DAC_MspInit+0xd4>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40007400 	.word	0x40007400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	20000114 	.word	0x20000114
 8000d84:	40020030 	.word	0x40020030

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ac      	sub	sp, #176	; 0xb0
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	228c      	movs	r2, #140	; 0x8c
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f005 fc91 	bl	80066d0 <memset>
  if(huart->Instance==LPUART1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <HAL_UART_MspInit+0xb4>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d13d      	bne.n	8000e34 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000db8:	2320      	movs	r3, #32
 8000dba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fb67 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd0:	f7ff fed4 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000de0:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_UART_MspInit+0xb8>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000e04:	f002 fcfa 	bl	80037fc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e22:	2308      	movs	r3, #8
 8000e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <HAL_UART_MspInit+0xbc>)
 8000e30:	f002 f96e 	bl	8003110 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	37b0      	adds	r7, #176	; 0xb0
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40008000 	.word	0x40008000
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48001800 	.word	0x48001800

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_TIM_Base_MspInit+0x38>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10b      	bne.n	8000e72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6593      	str	r3, [r2, #88]	; 0x58
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40001000 	.word	0x40001000
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea8:	d154      	bne.n	8000f54 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a2b      	ldr	r2, [pc, #172]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ec2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f002 f915 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f002 f907 	bl	8003110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d114      	bne.n	8000f50 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	6593      	str	r3, [r2, #88]	; 0x58
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000f3e:	f002 fc4d 	bl	80037dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <HAL_PCD_MspInit+0xd4>)
 8000f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f4e:	e001      	b.n	8000f54 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000f50:	f002 fc44 	bl	80037dc <HAL_PWREx_EnableVddUSB>
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 f8a6 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000fba:	f001 ffc9 	bl	8002f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200000b8 	.word	0x200000b8

08000fc8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <DMA1_Channel3_IRQHandler+0x10>)
 8000fce:	f001 ffbf 	bl	8002f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000114 	.word	0x20000114

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff ffea 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f005 fb57 	bl	80066e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f7ff fac7 	bl	80005c4 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001038:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001044:	08006798 	.word	0x08006798
  ldr r2, =_sbss
 8001048:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 800104c:	20000f74 	.word	0x20000f74

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>

08001052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f001 fb5f 	bl	8002720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f80e 	bl	8001084 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001074:	f7ff fd88 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	79fb      	ldrb	r3, [r7, #7]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d023      	beq.n	80010e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_InitTick+0x70>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fb6b 	bl	800278a <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10f      	bne.n	80010da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d809      	bhi.n	80010d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f001 fb35 	bl	8002736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_InitTick+0x74>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e004      	b.n	80010e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e001      	b.n	80010e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000030 	.word	0x20000030
 80010f4:	20000028 	.word	0x20000028
 80010f8:	2000002c 	.word	0x2000002c

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000030 	.word	0x20000030
 8001120:	20000f70 	.word	0x20000f70

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000f70 	.word	0x20000f70

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000030 	.word	0x20000030

08001184 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	609a      	str	r2, [r3, #8]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3360      	adds	r3, #96	; 0x60
 80011fe:	461a      	mov	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <LL_ADC_SetOffset+0x44>)
 800120e:	4013      	ands	r3, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	4313      	orrs	r3, r2
 800121c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001224:	bf00      	nop
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	03fff000 	.word	0x03fff000

08001234 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3360      	adds	r3, #96	; 0x60
 8001242:	461a      	mov	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3360      	adds	r3, #96	; 0x60
 8001270:	461a      	mov	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	431a      	orrs	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	615a      	str	r2, [r3, #20]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b087      	sub	sp, #28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3330      	adds	r3, #48	; 0x30
 80012f2:	461a      	mov	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	4413      	add	r3, r2
 8001300:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	211f      	movs	r1, #31
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	401a      	ands	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	0e9b      	lsrs	r3, r3, #26
 800131a:	f003 011f 	and.w	r1, r3, #31
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800133a:	b480      	push	{r7}
 800133c:	b087      	sub	sp, #28
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3314      	adds	r3, #20
 800134a:	461a      	mov	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	0e5b      	lsrs	r3, r3, #25
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	0d1b      	lsrs	r3, r3, #20
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	2107      	movs	r1, #7
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	401a      	ands	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	0d1b      	lsrs	r3, r3, #20
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	431a      	orrs	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001384:	bf00      	nop
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a8:	43db      	mvns	r3, r3
 80013aa:	401a      	ands	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0318 	and.w	r3, r3, #24
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013b4:	40d9      	lsrs	r1, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	400b      	ands	r3, r1
 80013ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013be:	431a      	orrs	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	0007ffff 	.word	0x0007ffff

080013d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 031f 	and.w	r3, r3, #31
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6093      	str	r3, [r2, #8]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800142c:	d101      	bne.n	8001432 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800147c:	d101      	bne.n	8001482 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <LL_ADC_IsEnabled+0x18>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_ADC_IsEnabled+0x1a>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f2:	f043 0204 	orr.w	r2, r3, #4
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b04      	cmp	r3, #4
 8001518:	d101      	bne.n	800151e <LL_ADC_REG_IsConversionOngoing+0x18>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b08      	cmp	r3, #8
 800153e:	d101      	bne.n	8001544 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e133      	b.n	80017d6 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	2b00      	cmp	r3, #0
 800157a:	d109      	bne.n	8001590 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fb27 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff3f 	bl	8001418 <LL_ADC_IsDeepPowerDownEnabled>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff25 	bl	80013f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff5a 	bl	8001468 <LL_ADC_IsInternalRegulatorEnabled>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d115      	bne.n	80015e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff3e 	bl	8001440 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015c4:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <HAL_ADC_Init+0x28c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	4a86      	ldr	r2, [pc, #536]	; (80017e4 <HAL_ADC_Init+0x290>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	099b      	lsrs	r3, r3, #6
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f9      	bne.n	80015da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff3c 	bl	8001468 <LL_ADC_IsInternalRegulatorEnabled>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10d      	bne.n	8001612 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff75 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 800161c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 80cc 	bne.w	80017c4 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80c8 	bne.w	80017c4 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800163c:	f043 0202 	orr.w	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff35 	bl	80014b8 <LL_ADC_IsEnabled>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d115      	bne.n	8001680 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001654:	4864      	ldr	r0, [pc, #400]	; (80017e8 <HAL_ADC_Init+0x294>)
 8001656:	f7ff ff2f 	bl	80014b8 <LL_ADC_IsEnabled>
 800165a:	4604      	mov	r4, r0
 800165c:	4863      	ldr	r0, [pc, #396]	; (80017ec <HAL_ADC_Init+0x298>)
 800165e:	f7ff ff2b 	bl	80014b8 <LL_ADC_IsEnabled>
 8001662:	4603      	mov	r3, r0
 8001664:	431c      	orrs	r4, r3
 8001666:	4862      	ldr	r0, [pc, #392]	; (80017f0 <HAL_ADC_Init+0x29c>)
 8001668:	f7ff ff26 	bl	80014b8 <LL_ADC_IsEnabled>
 800166c:	4603      	mov	r3, r0
 800166e:	4323      	orrs	r3, r4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4619      	mov	r1, r3
 800167a:	485e      	ldr	r0, [pc, #376]	; (80017f4 <HAL_ADC_Init+0x2a0>)
 800167c:	f7ff fd82 	bl	8001184 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e5b      	ldrb	r3, [r3, #25]
 8001684:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800168a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001690:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001696:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d106      	bne.n	80016bc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	3b01      	subs	r3, #1
 80016b4:	045b      	lsls	r3, r3, #17
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_ADC_Init+0x2a4>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff1b 	bl	800152c <LL_ADC_INJ_IsConversionOngoing>
 80016f6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d140      	bne.n	8001780 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d13d      	bne.n	8001780 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800170e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001716:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001726:	f023 0306 	bic.w	r3, r3, #6
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	430b      	orrs	r3, r1
 8001732:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800173a:	2b01      	cmp	r3, #1
 800173c:	d118      	bne.n	8001770 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001754:	4311      	orrs	r1, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001760:	430a      	orrs	r2, r1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	e007      	b.n	8001780 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10c      	bne.n	80017a2 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f023 010f 	bic.w	r1, r3, #15
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	631a      	str	r2, [r3, #48]	; 0x30
 80017a0:	e007      	b.n	80017b2 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 020f 	bic.w	r2, r2, #15
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	f043 0201 	orr.w	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	659a      	str	r2, [r3, #88]	; 0x58
 80017c2:	e007      	b.n	80017d4 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	f043 0210 	orr.w	r2, r3, #16
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000028 	.word	0x20000028
 80017e4:	053e2d63 	.word	0x053e2d63
 80017e8:	50040000 	.word	0x50040000
 80017ec:	50040100 	.word	0x50040100
 80017f0:	50040200 	.word	0x50040200
 80017f4:	50040300 	.word	0x50040300
 80017f8:	fff0c007 	.word	0xfff0c007

080017fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001808:	4853      	ldr	r0, [pc, #332]	; (8001958 <HAL_ADC_Start_DMA+0x15c>)
 800180a:	f7ff fde5 	bl	80013d8 <LL_ADC_GetMultimode>
 800180e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fe76 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 8093 	bne.w	8001948 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_ADC_Start_DMA+0x34>
 800182c:	2302      	movs	r3, #2
 800182e:	e08e      	b.n	800194e <HAL_ADC_Start_DMA+0x152>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_ADC_Start_DMA+0x160>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d008      	beq.n	8001854 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d002      	beq.n	8001854 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b09      	cmp	r3, #9
 8001852:	d172      	bne.n	800193a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fca3 	bl	80021a0 <ADC_Enable>
 800185a:	4603      	mov	r3, r0
 800185c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d165      	bne.n	8001930 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186c:	f023 0301 	bic.w	r3, r3, #1
 8001870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a38      	ldr	r2, [pc, #224]	; (8001960 <HAL_ADC_Start_DMA+0x164>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d002      	beq.n	8001888 <HAL_ADC_Start_DMA+0x8c>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	e000      	b.n	800188a <HAL_ADC_Start_DMA+0x8e>
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_ADC_Start_DMA+0x168>)
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	4293      	cmp	r3, r2
 8001890:	d002      	beq.n	8001898 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	f023 0206 	bic.w	r2, r3, #6
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_ADC_Start_DMA+0x16c>)
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d0:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_ADC_Start_DMA+0x170>)
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_ADC_Start_DMA+0x174>)
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	221c      	movs	r2, #28
 80018e2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0210 	orr.w	r2, r2, #16
 80018fa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3340      	adds	r3, #64	; 0x40
 8001916:	4619      	mov	r1, r3
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f001 fab8 	bl	8002e90 <HAL_DMA_Start_IT>
 8001920:	4603      	mov	r3, r0
 8001922:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fdd8 	bl	80014de <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800192e:	e00d      	b.n	800194c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8001938:	e008      	b.n	800194c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001946:	e001      	b.n	800194c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001948:	2302      	movs	r3, #2
 800194a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800194c:	7dfb      	ldrb	r3, [r7, #23]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	50040300 	.word	0x50040300
 800195c:	50040200 	.word	0x50040200
 8001960:	50040100 	.word	0x50040100
 8001964:	50040000 	.word	0x50040000
 8001968:	080022ad 	.word	0x080022ad
 800196c:	08002385 	.word	0x08002385
 8001970:	080023a1 	.word	0x080023a1

08001974 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0b6      	sub	sp, #216	; 0xd8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x22>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e3e3      	b.n	8002172 <HAL_ADC_ConfigChannel+0x7ea>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fda5 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 83c4 	bne.w	800214c <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d824      	bhi.n	8001a1e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	3b02      	subs	r3, #2
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d81b      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0x8e>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_ADC_ConfigChannel+0x5c>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	080019fd 	.word	0x080019fd
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a0d 	.word	0x08001a0d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80019f4:	230c      	movs	r3, #12
 80019f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80019fa:	e010      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80019fc:	2312      	movs	r3, #18
 80019fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a02:	e00c      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a04:	2318      	movs	r3, #24
 8001a06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a0a:	e008      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a14:	e003      	b.n	8001a1e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a16:	2306      	movs	r3, #6
 8001a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a1c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001a2c:	f7ff fc59 	bl	80012e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fd66 	bl	8001506 <LL_ADC_REG_IsConversionOngoing>
 8001a3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fd72 	bl	800152c <LL_ADC_INJ_IsConversionOngoing>
 8001a48:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f040 81bf 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 81ba 	bne.w	8001dd4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a68:	d10f      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff fc60 	bl	800133a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fc07 	bl	8001296 <LL_ADC_SetSamplingTimeCommonConfig>
 8001a88:	e00e      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6819      	ldr	r1, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	461a      	mov	r2, r3
 8001a98:	f7ff fc4f 	bl	800133a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fbf7 	bl	8001296 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	08db      	lsrs	r3, r3, #3
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ada:	f7ff fb87 	bl	80011ec <LL_ADC_SetOffset>
 8001ade:	e179      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fba4 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10a      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x184>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb99 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	f003 021f 	and.w	r2, r3, #31
 8001b0a:	e01e      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1c2>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb8e 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e004      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001b3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x1da>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	e018      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x20c>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001b7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e004      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001b8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d106      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fb5d 	bl	8001260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2101      	movs	r1, #1
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb41 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x24a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fb36 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	e01e      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x288>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb2b 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001bf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	e004      	b.n	8001c0e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001c04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x2a0>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	e018      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x2d2>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e004      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c54:	fab3 f383 	clz	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d106      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2200      	movs	r2, #0
 8001c64:	2101      	movs	r1, #1
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fafa 	bl	8001260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2102      	movs	r1, #2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fade 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10a      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x310>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2102      	movs	r1, #2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fad3 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	0e9b      	lsrs	r3, r3, #26
 8001c92:	f003 021f 	and.w	r2, r3, #31
 8001c96:	e01e      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x34e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fac8 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001cb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	e004      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x366>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	0e9b      	lsrs	r3, r3, #26
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	e014      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x390>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e004      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d106      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2200      	movs	r2, #0
 8001d22:	2102      	movs	r1, #2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fa9b 	bl	8001260 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2103      	movs	r1, #3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fa7f 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x3ce>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2103      	movs	r1, #3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fa74 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	e017      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x3fe>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fa69 	bl	8001234 <LL_ADC_GetOffsetChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d70:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e003      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8001d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x416>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0e9b      	lsrs	r3, r3, #26
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	e011      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x43a>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001da6:	fa93 f3a3 	rbit	r3, r3
 8001daa:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dae:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001db6:	2320      	movs	r3, #32
 8001db8:	e003      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8001dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d106      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2103      	movs	r1, #3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fa46 	bl	8001260 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fb6d 	bl	80014b8 <LL_ADC_IsEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 813f 	bne.w	8002064 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6819      	ldr	r1, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f7ff facc 	bl	8001390 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4a8e      	ldr	r2, [pc, #568]	; (8002038 <HAL_ADC_ConfigChannel+0x6b0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	f040 8130 	bne.w	8002064 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10b      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x4a4>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	bf94      	ite	ls
 8001e24:	2301      	movls	r3, #1
 8001e26:	2300      	movhi	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	e019      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x4d8>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	2b09      	cmp	r3, #9
 8001e58:	bf94      	ite	ls
 8001e5a:	2301      	movls	r3, #1
 8001e5c:	2300      	movhi	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d079      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x4f8>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	3301      	adds	r3, #1
 8001e78:	069b      	lsls	r3, r3, #26
 8001e7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e7e:	e015      	b.n	8001eac <HAL_ADC_ConfigChannel+0x524>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e90:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	e003      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8001e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	069b      	lsls	r3, r3, #26
 8001ea8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x544>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0e9b      	lsrs	r3, r3, #26
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	e017      	b.n	8001efc <HAL_ADC_ConfigChannel+0x574>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001edc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	e003      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	ea42 0103 	orr.w	r1, r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x59a>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0e9b      	lsrs	r3, r3, #26
 8001f12:	3301      	adds	r3, #1
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	051b      	lsls	r3, r3, #20
 8001f20:	e018      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x5cc>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	e003      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8001f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f54:	430b      	orrs	r3, r1
 8001f56:	e080      	b.n	800205a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d107      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x5ec>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0e9b      	lsrs	r3, r3, #26
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	069b      	lsls	r3, r3, #26
 8001f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f72:	e015      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x618>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	e003      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	069b      	lsls	r3, r3, #26
 8001f9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x638>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	2101      	movs	r1, #1
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	e017      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x668>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	61bb      	str	r3, [r7, #24]
  return result;
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001fd8:	2320      	movs	r3, #32
 8001fda:	e003      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f003 031f 	and.w	r3, r3, #31
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	ea42 0103 	orr.w	r1, r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <HAL_ADC_ConfigChannel+0x694>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0e9b      	lsrs	r3, r3, #26
 8002006:	3301      	adds	r3, #1
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	3b1e      	subs	r3, #30
 8002014:	051b      	lsls	r3, r3, #20
 8002016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201a:	e01d      	b.n	8002058 <HAL_ADC_ConfigChannel+0x6d0>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	60fb      	str	r3, [r7, #12]
  return result;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e005      	b.n	8002044 <HAL_ADC_ConfigChannel+0x6bc>
 8002038:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f003 021f 	and.w	r2, r3, #31
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b1e      	subs	r3, #30
 8002052:	051b      	lsls	r3, r3, #20
 8002054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002058:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800205e:	4619      	mov	r1, r3
 8002060:	f7ff f96b 	bl	800133a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b44      	ldr	r3, [pc, #272]	; (800217c <HAL_ADC_ConfigChannel+0x7f4>)
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d07a      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002070:	4843      	ldr	r0, [pc, #268]	; (8002180 <HAL_ADC_ConfigChannel+0x7f8>)
 8002072:	f7ff f8ad 	bl	80011d0 <LL_ADC_GetCommonPathInternalCh>
 8002076:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_ADC_ConfigChannel+0x7fc>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d12c      	bne.n	80020de <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d126      	bne.n	80020de <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_ADC_ConfigChannel+0x800>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0x71c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a3b      	ldr	r2, [pc, #236]	; (800218c <HAL_ADC_ConfigChannel+0x804>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d15d      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ac:	4619      	mov	r1, r3
 80020ae:	4834      	ldr	r0, [pc, #208]	; (8002180 <HAL_ADC_ConfigChannel+0x7f8>)
 80020b0:	f7ff f87b 	bl	80011aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_ADC_ConfigChannel+0x808>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	4a36      	ldr	r2, [pc, #216]	; (8002194 <HAL_ADC_ConfigChannel+0x80c>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020ce:	e002      	b.n	80020d6 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f9      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020dc:	e040      	b.n	8002160 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a2d      	ldr	r2, [pc, #180]	; (8002198 <HAL_ADC_ConfigChannel+0x810>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d118      	bne.n	800211a <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d112      	bne.n	800211a <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a23      	ldr	r2, [pc, #140]	; (8002188 <HAL_ADC_ConfigChannel+0x800>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x780>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_ADC_ConfigChannel+0x804>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d12d      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800210c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002110:	4619      	mov	r1, r3
 8002112:	481b      	ldr	r0, [pc, #108]	; (8002180 <HAL_ADC_ConfigChannel+0x7f8>)
 8002114:	f7ff f849 	bl	80011aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002118:	e024      	b.n	8002164 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1f      	ldr	r2, [pc, #124]	; (800219c <HAL_ADC_ConfigChannel+0x814>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d120      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11a      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_ADC_ConfigChannel+0x800>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d115      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800213a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800213e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002142:	4619      	mov	r1, r3
 8002144:	480e      	ldr	r0, [pc, #56]	; (8002180 <HAL_ADC_ConfigChannel+0x7f8>)
 8002146:	f7ff f830 	bl	80011aa <LL_ADC_SetCommonPathInternalCh>
 800214a:	e00c      	b.n	8002166 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	f043 0220 	orr.w	r2, r3, #32
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800215e:	e002      	b.n	8002166 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002164:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800216e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002172:	4618      	mov	r0, r3
 8002174:	37d8      	adds	r7, #216	; 0xd8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	80080000 	.word	0x80080000
 8002180:	50040300 	.word	0x50040300
 8002184:	c7520000 	.word	0xc7520000
 8002188:	50040000 	.word	0x50040000
 800218c:	50040200 	.word	0x50040200
 8002190:	20000028 	.word	0x20000028
 8002194:	053e2d63 	.word	0x053e2d63
 8002198:	cb840000 	.word	0xcb840000
 800219c:	80000001 	.word	0x80000001

080021a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f981 	bl	80014b8 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d169      	bne.n	8002290 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <ADC_Enable+0xfc>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00d      	beq.n	80021e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f043 0210 	orr.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f043 0201 	orr.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e055      	b.n	8002292 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f950 	bl	8001490 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021f0:	482b      	ldr	r0, [pc, #172]	; (80022a0 <ADC_Enable+0x100>)
 80021f2:	f7fe ffed 	bl	80011d0 <LL_ADC_GetCommonPathInternalCh>
 80021f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <ADC_Enable+0x104>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	4a28      	ldr	r2, [pc, #160]	; (80022a8 <ADC_Enable+0x108>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800221a:	e002      	b.n	8002222 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	3b01      	subs	r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f9      	bne.n	800221c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002228:	f7fe ff7c 	bl	8001124 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800222e:	e028      	b.n	8002282 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f93f 	bl	80014b8 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d104      	bne.n	800224a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff f923 	bl	8001490 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800224a:	f7fe ff6b 	bl	8001124 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d914      	bls.n	8002282 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d00d      	beq.n	8002282 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e007      	b.n	8002292 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d1cf      	bne.n	8002230 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	8000003f 	.word	0x8000003f
 80022a0:	50040300 	.word	0x50040300
 80022a4:	20000028 	.word	0x20000028
 80022a8:	053e2d63 	.word	0x053e2d63

080022ac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d14b      	bne.n	800235e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d021      	beq.n	8002324 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe ffe9 	bl	80012bc <LL_ADC_REG_IsTriggerSourceSWStart>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d032      	beq.n	8002356 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d12b      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11f      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	659a      	str	r2, [r3, #88]	; 0x58
 8002322:	e018      	b.n	8002356 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d111      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7fe f8e4 	bl	8000524 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800235c:	e00e      	b.n	800237c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f7ff fb02 	bl	8001974 <HAL_ADC_ErrorCallback>
}
 8002370:	e004      	b.n	800237c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7fe f8a8 	bl	80004e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	f043 0204 	orr.w	r2, r3, #4
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fad4 	bl	8001974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <LL_ADC_IsEnabled>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <LL_ADC_IsEnabled+0x18>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <LL_ADC_IsEnabled+0x1a>
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_ADC_REG_IsConversionOngoing>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b04      	cmp	r3, #4
 800240c:	d101      	bne.n	8002412 <LL_ADC_REG_IsConversionOngoing+0x18>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b0a1      	sub	sp, #132	; 0x84
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800243a:	2302      	movs	r3, #2
 800243c:	e093      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002446:	2300      	movs	r3, #0
 8002448:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800244a:	2300      	movs	r3, #0
 800244c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a47      	ldr	r2, [pc, #284]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e001      	b.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e072      	b.n	8002566 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ffb9 	bl	80023fa <LL_ADC_REG_IsConversionOngoing>
 8002488:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ffb3 	bl	80023fa <LL_ADC_REG_IsConversionOngoing>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d154      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800249a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800249c:	2b00      	cmp	r3, #0
 800249e:	d151      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024a0:	4b35      	ldr	r3, [pc, #212]	; (8002578 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80024a2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d02c      	beq.n	8002506 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024be:	035b      	lsls	r3, r3, #13
 80024c0:	430b      	orrs	r3, r1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c8:	4829      	ldr	r0, [pc, #164]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024ca:	f7ff ff83 	bl	80023d4 <LL_ADC_IsEnabled>
 80024ce:	4604      	mov	r4, r0
 80024d0:	4828      	ldr	r0, [pc, #160]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024d2:	f7ff ff7f 	bl	80023d4 <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	431c      	orrs	r4, r3
 80024da:	4828      	ldr	r0, [pc, #160]	; (800257c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024dc:	f7ff ff7a 	bl	80023d4 <LL_ADC_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4323      	orrs	r3, r4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d137      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024f0:	f023 030f 	bic.w	r3, r3, #15
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	6811      	ldr	r1, [r2, #0]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	6892      	ldr	r2, [r2, #8]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	431a      	orrs	r2, r3
 8002500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002502:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002504:	e028      	b.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800250e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002510:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002512:	4817      	ldr	r0, [pc, #92]	; (8002570 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002514:	f7ff ff5e 	bl	80023d4 <LL_ADC_IsEnabled>
 8002518:	4604      	mov	r4, r0
 800251a:	4816      	ldr	r0, [pc, #88]	; (8002574 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800251c:	f7ff ff5a 	bl	80023d4 <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	431c      	orrs	r4, r3
 8002524:	4815      	ldr	r0, [pc, #84]	; (800257c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002526:	f7ff ff55 	bl	80023d4 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	4323      	orrs	r3, r4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d112      	bne.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800253a:	f023 030f 	bic.w	r3, r3, #15
 800253e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002540:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002542:	e009      	b.n	8002558 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002556:	e000      	b.n	800255a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002558:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002562:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002566:	4618      	mov	r0, r3
 8002568:	3784      	adds	r7, #132	; 0x84
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	50040000 	.word	0x50040000
 8002574:	50040100 	.word	0x50040100
 8002578:	50040300 	.word	0x50040300
 800257c:	50040200 	.word	0x50040200

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ec:	d301      	bcc.n	80026f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00f      	b.n	8002712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <SysTick_Config+0x40>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fa:	210f      	movs	r1, #15
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f7ff ff8e 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <SysTick_Config+0x40>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <SysTick_Config+0x40>)
 800270c:	2207      	movs	r2, #7
 800270e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	e000e010 	.word	0xe000e010

08002720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff29 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002748:	f7ff ff3e 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 800274c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	f7ff ff8e 	bl	8002674 <NVIC_EncodePriority>
 8002758:	4602      	mov	r2, r0
 800275a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff5d 	bl	8002620 <__NVIC_SetPriority>
}
 8002766:	bf00      	nop
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff31 	bl	80025e4 <__NVIC_EnableIRQ>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffa2 	bl	80026dc <SysTick_Config>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e014      	b.n	80027de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7fe fa71 	bl	8000cac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	795b      	ldrb	r3, [r3, #5]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_DAC_Start_DMA+0x1e>
 8002802:	2302      	movs	r3, #2
 8002804:	e0ab      	b.n	800295e <HAL_DAC_Start_DMA+0x176>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2202      	movs	r2, #2
 8002810:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d12f      	bne.n	8002878 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_DAC_Start_DMA+0x180>)
 800281e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_DAC_Start_DMA+0x184>)
 8002826:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a50      	ldr	r2, [pc, #320]	; (8002970 <HAL_DAC_Start_DMA+0x188>)
 800282e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800283e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2b08      	cmp	r3, #8
 8002844:	d013      	beq.n	800286e <HAL_DAC_Start_DMA+0x86>
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d845      	bhi.n	80028d8 <HAL_DAC_Start_DMA+0xf0>
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_DAC_Start_DMA+0x72>
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d005      	beq.n	8002864 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002858:	e03e      	b.n	80028d8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3308      	adds	r3, #8
 8002860:	613b      	str	r3, [r7, #16]
        break;
 8002862:	e03c      	b.n	80028de <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	613b      	str	r3, [r7, #16]
        break;
 800286c:	e037      	b.n	80028de <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3310      	adds	r3, #16
 8002874:	613b      	str	r3, [r7, #16]
        break;
 8002876:	e032      	b.n	80028de <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a3d      	ldr	r2, [pc, #244]	; (8002974 <HAL_DAC_Start_DMA+0x18c>)
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a3c      	ldr	r2, [pc, #240]	; (8002978 <HAL_DAC_Start_DMA+0x190>)
 8002886:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a3b      	ldr	r2, [pc, #236]	; (800297c <HAL_DAC_Start_DMA+0x194>)
 800288e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800289e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d013      	beq.n	80028ce <HAL_DAC_Start_DMA+0xe6>
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d817      	bhi.n	80028dc <HAL_DAC_Start_DMA+0xf4>
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_DAC_Start_DMA+0xd2>
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d005      	beq.n	80028c4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80028b8:	e010      	b.n	80028dc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3314      	adds	r3, #20
 80028c0:	613b      	str	r3, [r7, #16]
        break;
 80028c2:	e00c      	b.n	80028de <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3318      	adds	r3, #24
 80028ca:	613b      	str	r3, [r7, #16]
        break;
 80028cc:	e007      	b.n	80028de <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	331c      	adds	r3, #28
 80028d4:	613b      	str	r3, [r7, #16]
        break;
 80028d6:	e002      	b.n	80028de <HAL_DAC_Start_DMA+0xf6>
        break;
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <HAL_DAC_Start_DMA+0xf6>
        break;
 80028dc:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d111      	bne.n	8002908 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6898      	ldr	r0, [r3, #8]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	f000 fac7 	bl	8002e90 <HAL_DMA_Start_IT>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]
 8002906:	e010      	b.n	800292a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002916:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	68d8      	ldr	r0, [r3, #12]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	f000 fab5 	bl	8002e90 <HAL_DMA_Start_IT>
 8002926:	4603      	mov	r3, r0
 8002928:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2201      	movs	r2, #1
 8002944:	409a      	lsls	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e005      	b.n	800295c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f043 0204 	orr.w	r2, r3, #4
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800295c:	7dfb      	ldrb	r3, [r7, #23]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	08002c0b 	.word	0x08002c0b
 800296c:	08002c2d 	.word	0x08002c2d
 8002970:	08002c49 	.word	0x08002c49
 8002974:	08002cb3 	.word	0x08002cb3
 8002978:	08002cd5 	.word	0x08002cd5
 800297c:	08002cf1 	.word	0x08002cf1

08002980 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	795b      	ldrb	r3, [r3, #5]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_DAC_ConfigChannel+0x1c>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e114      	b.n	8002c02 <HAL_DAC_ConfigChannel+0x246>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2202      	movs	r2, #2
 80029e2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	f040 8081 	bne.w	8002af0 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80029ee:	f7fe fb99 	bl	8001124 <HAL_GetTick>
 80029f2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d140      	bne.n	8002a7c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029fa:	e018      	b.n	8002a2e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029fc:	f7fe fb92 	bl	8001124 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d911      	bls.n	8002a2e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2203      	movs	r2, #3
 8002a28:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0e9      	b.n	8002c02 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1df      	bne.n	80029fc <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7fe fb7d 	bl	800113c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	6992      	ldr	r2, [r2, #24]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4c:	e023      	b.n	8002a96 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a4e:	f7fe fb69 	bl	8001124 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d90f      	bls.n	8002a7c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	da0a      	bge.n	8002a7c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f043 0208 	orr.w	r2, r3, #8
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2203      	movs	r2, #3
 8002a76:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0c2      	b.n	8002c02 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	dbe3      	blt.n	8002a4e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fe fb58 	bl	800113c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	6992      	ldr	r2, [r2, #24]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	ea02 0103 	and.w	r1, r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	21ff      	movs	r1, #255	; 0xff
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	ea02 0103 	and.w	r1, r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d11d      	bne.n	8002b34 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2207      	movs	r2, #7
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43da      	mvns	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	400a      	ands	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	22c0      	movs	r2, #192	; 0xc0
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	400a      	ands	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f7ff feb1 	bl	8002980 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	711a      	strb	r2, [r3, #4]
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff feaa 	bl	8002994 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f043 0204 	orr.w	r2, r3, #4
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff fea0 	bl	80029a8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	711a      	strb	r2, [r3, #4]
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f7ff ffd8 	bl	8002c76 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	711a      	strb	r2, [r3, #4]
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff ffd1 	bl	8002c8a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f043 0204 	orr.w	r2, r3, #4
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7ff ffc7 	bl	8002c9e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	711a      	strb	r2, [r3, #4]
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e098      	b.n	8002e64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_DMA_Init+0x150>)
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d80f      	bhi.n	8002d5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <HAL_DMA_Init+0x154>)
 8002d46:	4413      	add	r3, r2
 8002d48:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_DMA_Init+0x158>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	009a      	lsls	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <HAL_DMA_Init+0x15c>)
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5c:	e00e      	b.n	8002d7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_DMA_Init+0x160>)
 8002d66:	4413      	add	r3, r2
 8002d68:	4a43      	ldr	r2, [pc, #268]	; (8002e78 <HAL_DMA_Init+0x158>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	009a      	lsls	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a42      	ldr	r2, [pc, #264]	; (8002e84 <HAL_DMA_Init+0x164>)
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd6:	d039      	beq.n	8002e4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <HAL_DMA_Init+0x15c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11a      	bne.n	8002e18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_DMA_Init+0x168>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f003 031c 	and.w	r3, r3, #28
 8002dee:	210f      	movs	r1, #15
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4924      	ldr	r1, [pc, #144]	; (8002e88 <HAL_DMA_Init+0x168>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <HAL_DMA_Init+0x168>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e08:	f003 031c 	and.w	r3, r3, #28
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	491d      	ldr	r1, [pc, #116]	; (8002e88 <HAL_DMA_Init+0x168>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
 8002e16:	e019      	b.n	8002e4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e18:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_DMA_Init+0x16c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	f003 031c 	and.w	r3, r3, #28
 8002e24:	210f      	movs	r1, #15
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4917      	ldr	r1, [pc, #92]	; (8002e8c <HAL_DMA_Init+0x16c>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_DMA_Init+0x16c>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f003 031c 	and.w	r3, r3, #28
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	4911      	ldr	r1, [pc, #68]	; (8002e8c <HAL_DMA_Init+0x16c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40020407 	.word	0x40020407
 8002e74:	bffdfff8 	.word	0xbffdfff8
 8002e78:	cccccccd 	.word	0xcccccccd
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	bffdfbf8 	.word	0xbffdfbf8
 8002e84:	40020400 	.word	0x40020400
 8002e88:	400200a8 	.word	0x400200a8
 8002e8c:	400204a8 	.word	0x400204a8

08002e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x20>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e04b      	b.n	8002f48 <HAL_DMA_Start_IT+0xb8>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d13a      	bne.n	8002f3a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f8e0 	bl	80030ae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 020e 	orr.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e00f      	b.n	8002f28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 020a 	orr.w	r2, r2, #10
 8002f26:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e005      	b.n	8002f46 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	f003 031c 	and.w	r3, r3, #28
 8002f70:	2204      	movs	r2, #4
 8002f72:	409a      	lsls	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d026      	beq.n	8002fca <HAL_DMA_IRQHandler+0x7a>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d021      	beq.n	8002fca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f003 021c 	and.w	r2, r3, #28
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2104      	movs	r1, #4
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d071      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fc8:	e06c      	b.n	80030a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f003 031c 	and.w	r3, r3, #28
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d02e      	beq.n	800303c <HAL_DMA_IRQHandler+0xec>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d029      	beq.n	800303c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 020a 	bic.w	r2, r2, #10
 8003004:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f003 021c 	and.w	r2, r3, #28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2102      	movs	r1, #2
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d038      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800303a:	e033      	b.n	80030a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f003 031c 	and.w	r3, r3, #28
 8003044:	2208      	movs	r2, #8
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02a      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x156>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d025      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 020e 	bic.w	r2, r2, #14
 8003068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f003 021c 	and.w	r2, r3, #28
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
}
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f003 021c 	and.w	r2, r3, #28
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d108      	bne.n	80030f2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030f0:	e007      	b.n	8003102 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311e:	e166      	b.n	80033ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8158 	beq.w	80033e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d005      	beq.n	8003150 <HAL_GPIO_Init+0x40>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d130      	bne.n	80031b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003186:	2201      	movs	r2, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0201 	and.w	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d017      	beq.n	80031ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	2203      	movs	r2, #3
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d123      	bne.n	8003242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	220f      	movs	r2, #15
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	08da      	lsrs	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3208      	adds	r2, #8
 800323c:	6939      	ldr	r1, [r7, #16]
 800323e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	2203      	movs	r2, #3
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43db      	mvns	r3, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0203 	and.w	r2, r3, #3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80b2 	beq.w	80033e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003284:	4b61      	ldr	r3, [pc, #388]	; (800340c <HAL_GPIO_Init+0x2fc>)
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	4a60      	ldr	r2, [pc, #384]	; (800340c <HAL_GPIO_Init+0x2fc>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6613      	str	r3, [r2, #96]	; 0x60
 8003290:	4b5e      	ldr	r3, [pc, #376]	; (800340c <HAL_GPIO_Init+0x2fc>)
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800329c:	4a5c      	ldr	r2, [pc, #368]	; (8003410 <HAL_GPIO_Init+0x300>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	220f      	movs	r2, #15
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032c6:	d02b      	beq.n	8003320 <HAL_GPIO_Init+0x210>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_GPIO_Init+0x304>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d025      	beq.n	800331c <HAL_GPIO_Init+0x20c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_GPIO_Init+0x308>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01f      	beq.n	8003318 <HAL_GPIO_Init+0x208>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a50      	ldr	r2, [pc, #320]	; (800341c <HAL_GPIO_Init+0x30c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d019      	beq.n	8003314 <HAL_GPIO_Init+0x204>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a4f      	ldr	r2, [pc, #316]	; (8003420 <HAL_GPIO_Init+0x310>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_GPIO_Init+0x200>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a4e      	ldr	r2, [pc, #312]	; (8003424 <HAL_GPIO_Init+0x314>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00d      	beq.n	800330c <HAL_GPIO_Init+0x1fc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <HAL_GPIO_Init+0x318>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <HAL_GPIO_Init+0x1f8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_GPIO_Init+0x31c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_GPIO_Init+0x1f4>
 8003300:	2307      	movs	r3, #7
 8003302:	e00e      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003304:	2308      	movs	r3, #8
 8003306:	e00c      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003308:	2306      	movs	r3, #6
 800330a:	e00a      	b.n	8003322 <HAL_GPIO_Init+0x212>
 800330c:	2305      	movs	r3, #5
 800330e:	e008      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003310:	2304      	movs	r3, #4
 8003312:	e006      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003314:	2303      	movs	r3, #3
 8003316:	e004      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003318:	2302      	movs	r3, #2
 800331a:	e002      	b.n	8003322 <HAL_GPIO_Init+0x212>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_GPIO_Init+0x212>
 8003320:	2300      	movs	r3, #0
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	f002 0203 	and.w	r2, r2, #3
 8003328:	0092      	lsls	r2, r2, #2
 800332a:	4093      	lsls	r3, r2
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003332:	4937      	ldr	r1, [pc, #220]	; (8003410 <HAL_GPIO_Init+0x300>)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003340:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	43db      	mvns	r3, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4013      	ands	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003364:	4a32      	ldr	r2, [pc, #200]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800336a:	4b31      	ldr	r3, [pc, #196]	; (8003430 <HAL_GPIO_Init+0x320>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800338e:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003394:	4b26      	ldr	r3, [pc, #152]	; (8003430 <HAL_GPIO_Init+0x320>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	43db      	mvns	r3, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4013      	ands	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033b8:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <HAL_GPIO_Init+0x320>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <HAL_GPIO_Init+0x320>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_GPIO_Init+0x320>)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3301      	adds	r3, #1
 80033ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f47f ae91 	bne.w	8003120 <HAL_GPIO_Init+0x10>
  }
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40021000 	.word	0x40021000
 8003410:	40010000 	.word	0x40010000
 8003414:	48000400 	.word	0x48000400
 8003418:	48000800 	.word	0x48000800
 800341c:	48000c00 	.word	0x48000c00
 8003420:	48001000 	.word	0x48001000
 8003424:	48001400 	.word	0x48001400
 8003428:	48001800 	.word	0x48001800
 800342c:	48001c00 	.word	0x48001c00
 8003430:	40010400 	.word	0x40010400

08003434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	807b      	strh	r3, [r7, #2]
 8003440:	4613      	mov	r3, r2
 8003442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003444:	787b      	ldrb	r3, [r7, #1]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003450:	e002      	b.n	8003458 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	b08f      	sub	sp, #60	; 0x3c
 8003468:	af0a      	add	r7, sp, #40	; 0x28
 800346a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e116      	b.n	80036a4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fd fcf9 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fbf2 	bl	8005c9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	687e      	ldr	r6, [r7, #4]
 80034c2:	466d      	mov	r5, sp
 80034c4:	f106 0410 	add.w	r4, r6, #16
 80034c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80034d8:	1d33      	adds	r3, r6, #4
 80034da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	f002 fbb2 	bl	8005c46 <USB_CoreInit>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d7      	b.n	80036a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fbe0 	bl	8005cc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e04a      	b.n	800359c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	333d      	adds	r3, #61	; 0x3d
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	333c      	adds	r3, #60	; 0x3c
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	b298      	uxth	r0, r3
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3356      	adds	r3, #86	; 0x56
 8003542:	4602      	mov	r2, r0
 8003544:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3340      	adds	r3, #64	; 0x40
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3344      	adds	r3, #68	; 0x44
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	3348      	adds	r3, #72	; 0x48
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	334c      	adds	r3, #76	; 0x4c
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	3301      	adds	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3af      	bcc.n	8003506 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e044      	b.n	8003636 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035c2:	7bfa      	ldrb	r2, [r7, #15]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	3301      	adds	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d3b5      	bcc.n	80035ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	687e      	ldr	r6, [r7, #4]
 8003648:	466d      	mov	r5, sp
 800364a:	f106 0410 	add.w	r4, r6, #16
 800364e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003656:	e894 0003 	ldmia.w	r4, {r0, r1}
 800365a:	e885 0003 	stmia.w	r5, {r0, r1}
 800365e:	1d33      	adds	r3, r6, #4
 8003660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003662:	6838      	ldr	r0, [r7, #0]
 8003664:	f002 fb78 	bl	8005d58 <USB_DevInit>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e014      	b.n	80036a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f80a 	bl	80036ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fd1a 	bl	80060d6 <USB_DevDisconnect>

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	f043 0303 	orr.w	r3, r3, #3
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40007000 	.word	0x40007000

08003714 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <HAL_PWREx_GetVoltageRange+0x18>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40007000 	.word	0x40007000

08003730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373e:	d130      	bne.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003740:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374c:	d038      	beq.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003756:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2232      	movs	r2, #50	; 0x32
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	3301      	adds	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003774:	e002      	b.n	800377c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3b01      	subs	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003788:	d102      	bne.n	8003790 <HAL_PWREx_ControlVoltageScaling+0x60>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f2      	bne.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379c:	d110      	bne.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e00f      	b.n	80037c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d007      	beq.n	80037c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b8:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40007000 	.word	0x40007000
 80037d4:	20000028 	.word	0x20000028
 80037d8:	431bde83 	.word	0x431bde83

080037dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80037e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ea:	6053      	str	r3, [r2, #4]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40007000 	.word	0x40007000

080037fc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380a:	6053      	str	r3, [r2, #4]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40007000 	.word	0x40007000

0800381c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f000 bc08 	b.w	8004040 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003830:	4b96      	ldr	r3, [pc, #600]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383a:	4b94      	ldr	r3, [pc, #592]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80e4 	beq.w	8003a1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <HAL_RCC_OscConfig+0x4c>
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	f040 808b 	bne.w	8003976 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b01      	cmp	r3, #1
 8003864:	f040 8087 	bne.w	8003976 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003868:	4b88      	ldr	r3, [pc, #544]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_OscConfig+0x64>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e3df      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	4b81      	ldr	r3, [pc, #516]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_RCC_OscConfig+0x7e>
 8003890:	4b7e      	ldr	r3, [pc, #504]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003898:	e005      	b.n	80038a6 <HAL_RCC_OscConfig+0x8a>
 800389a:	4b7c      	ldr	r3, [pc, #496]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 800389c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d223      	bcs.n	80038f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fd92 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e3c0      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038be:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a72      	ldr	r2, [pc, #456]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b70      	ldr	r3, [pc, #448]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	496d      	ldr	r1, [pc, #436]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038dc:	4b6b      	ldr	r3, [pc, #428]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	4968      	ldr	r1, [pc, #416]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	e025      	b.n	800393e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f2:	4b66      	ldr	r3, [pc, #408]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a65      	ldr	r2, [pc, #404]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	4960      	ldr	r1, [pc, #384]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003910:	4b5e      	ldr	r3, [pc, #376]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	495b      	ldr	r1, [pc, #364]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fd52 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e380      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800393e:	f000 fc87 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8003942:	4602      	mov	r2, r0
 8003944:	4b51      	ldr	r3, [pc, #324]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	4950      	ldr	r1, [pc, #320]	; (8003a90 <HAL_RCC_OscConfig+0x274>)
 8003950:	5ccb      	ldrb	r3, [r1, r3]
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a4e      	ldr	r2, [pc, #312]	; (8003a94 <HAL_RCC_OscConfig+0x278>)
 800395c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800395e:	4b4e      	ldr	r3, [pc, #312]	; (8003a98 <HAL_RCC_OscConfig+0x27c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fb8e 	bl	8001084 <HAL_InitTick>
 8003968:	4603      	mov	r3, r0
 800396a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d052      	beq.n	8003a18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	e364      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d032      	beq.n	80039e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a42      	ldr	r2, [pc, #264]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800398a:	f7fd fbcb 	bl	8001124 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003992:	f7fd fbc7 	bl	8001124 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e34d      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a4:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a35      	ldr	r2, [pc, #212]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b6:	f043 0308 	orr.w	r3, r3, #8
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b33      	ldr	r3, [pc, #204]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	4930      	ldr	r1, [pc, #192]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ce:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	492b      	ldr	r1, [pc, #172]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
 80039e2:	e01a      	b.n	8003a1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039e4:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a28      	ldr	r2, [pc, #160]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f0:	f7fd fb98 	bl	8001124 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f8:	f7fd fb94 	bl	8001124 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e31a      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1dc>
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d073      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_OscConfig+0x21c>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	d10e      	bne.n	8003a50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d10b      	bne.n	8003a50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d063      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d15f      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e2f7      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d106      	bne.n	8003a68 <HAL_RCC_OscConfig+0x24c>
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	e025      	b.n	8003ab4 <HAL_RCC_OscConfig+0x298>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a70:	d114      	bne.n	8003a9c <HAL_RCC_OscConfig+0x280>
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a02      	ldr	r2, [pc, #8]	; (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e013      	b.n	8003ab4 <HAL_RCC_OscConfig+0x298>
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08006740 	.word	0x08006740
 8003a94:	20000028 	.word	0x20000028
 8003a98:	2000002c 	.word	0x2000002c
 8003a9c:	4ba0      	ldr	r3, [pc, #640]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a9f      	ldr	r2, [pc, #636]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b9d      	ldr	r3, [pc, #628]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a9c      	ldr	r2, [pc, #624]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fb32 	bl	8001124 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fd fb2e 	bl	8001124 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	; 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e2b4      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad6:	4b92      	ldr	r3, [pc, #584]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x2a8>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fb1e 	bl	8001124 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fd fb1a 	bl	8001124 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e2a0      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afe:	4b88      	ldr	r3, [pc, #544]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x2d0>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d060      	beq.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_OscConfig+0x310>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d116      	bne.n	8003b5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2c:	4b7c      	ldr	r3, [pc, #496]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_OscConfig+0x328>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e27d      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	4973      	ldr	r1, [pc, #460]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b58:	e040      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d023      	beq.n	8003baa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b62:	4b6f      	ldr	r3, [pc, #444]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6e      	ldr	r2, [pc, #440]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fad9 	bl	8001124 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b76:	f7fd fad5 	bl	8001124 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e25b      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	4b62      	ldr	r3, [pc, #392]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	495f      	ldr	r1, [pc, #380]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
 8003ba8:	e018      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003baa:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5c      	ldr	r2, [pc, #368]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fd fab5 	bl	8001124 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fab1 	bl	8001124 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e237      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d03c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01c      	beq.n	8003c2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf6:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fa90 	bl	8001124 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fd fa8c 	bl	8001124 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e212      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1a:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ef      	beq.n	8003c08 <HAL_RCC_OscConfig+0x3ec>
 8003c28:	e01b      	b.n	8003c62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c30:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fd fa73 	bl	8001124 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c42:	f7fd fa6f 	bl	8001124 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1f5      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c54:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ef      	bne.n	8003c42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a6 	beq.w	8003dbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c70:	2300      	movs	r3, #0
 8003c72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c74:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c8c:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9c:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d118      	bne.n	8003cda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb4:	f7fd fa36 	bl	8001124 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fd fa32 	bl	8001124 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e1b8      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x4d8>
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cf2:	e029      	b.n	8003d48 <HAL_RCC_OscConfig+0x52c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d115      	bne.n	8003d28 <HAL_RCC_OscConfig+0x50c>
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x52c>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	4b9d      	ldr	r3, [pc, #628]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	4a9c      	ldr	r2, [pc, #624]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d38:	4b99      	ldr	r3, [pc, #612]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3e:	4a98      	ldr	r2, [pc, #608]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d016      	beq.n	8003d7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fd f9e8 	bl	8001124 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fd f9e4 	bl	8001124 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e168      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6e:	4b8c      	ldr	r3, [pc, #560]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ed      	beq.n	8003d58 <HAL_RCC_OscConfig+0x53c>
 8003d7c:	e015      	b.n	8003daa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fd f9d1 	bl	8001124 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd f9cd 	bl	8001124 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e151      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d9c:	4b80      	ldr	r3, [pc, #512]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ed      	bne.n	8003d86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b7b      	ldr	r3, [pc, #492]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	4a7a      	ldr	r2, [pc, #488]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d03c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01c      	beq.n	8003e0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dd0:	4b73      	ldr	r3, [pc, #460]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd6:	4a72      	ldr	r2, [pc, #456]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd f9a0 	bl	8001124 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de8:	f7fd f99c 	bl	8001124 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e122      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003dfa:	4b69      	ldr	r3, [pc, #420]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ef      	beq.n	8003de8 <HAL_RCC_OscConfig+0x5cc>
 8003e08:	e01b      	b.n	8003e42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003e0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e10:	4a63      	ldr	r2, [pc, #396]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fd f983 	bl	8001124 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e22:	f7fd f97f 	bl	8001124 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e105      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e34:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ef      	bne.n	8003e22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80f9 	beq.w	800403e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	f040 80cf 	bne.w	8003ff4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e56:	4b52      	ldr	r3, [pc, #328]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0203 	and.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d12c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	3b01      	subs	r3, #1
 8003e76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d123      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d113      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d109      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d071      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d068      	beq.n	8003f9c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eca:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ed6:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0ac      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ef2:	f7fd f917 	bl	8001124 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd f913 	bl	8001124 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e099      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0c:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f18:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCC_OscConfig+0x788>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0112      	lsls	r2, r2, #4
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f32:	0212      	lsls	r2, r2, #8
 8003f34:	4311      	orrs	r1, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f3a:	0852      	lsrs	r2, r2, #1
 8003f3c:	3a01      	subs	r2, #1
 8003f3e:	0552      	lsls	r2, r2, #21
 8003f40:	4311      	orrs	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f46:	0852      	lsrs	r2, r2, #1
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	0652      	lsls	r2, r2, #25
 8003f4c:	4311      	orrs	r1, r2
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f52:	06d2      	lsls	r2, r2, #27
 8003f54:	430a      	orrs	r2, r1
 8003f56:	4912      	ldr	r1, [pc, #72]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f68:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f74:	f7fd f8d6 	bl	8001124 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd f8d2 	bl	8001124 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e058      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8e:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f9a:	e050      	b.n	800403e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e04f      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d144      	bne.n	800403e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc0:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a20      	ldr	r2, [pc, #128]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fcc:	f7fd f8aa 	bl	8001124 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd f8a6 	bl	8001124 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e02c      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe6:	4b18      	ldr	r3, [pc, #96]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x7b8>
 8003ff2:	e024      	b.n	800403e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d01f      	beq.n	800403a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8004000:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fd f88d 	bl	8001124 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400e:	f7fd f889 	bl	8001124 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e00f      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800402c:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	4905      	ldr	r1, [pc, #20]	; (8004048 <HAL_RCC_OscConfig+0x82c>)
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_RCC_OscConfig+0x830>)
 8004034:	4013      	ands	r3, r2
 8004036:	60cb      	str	r3, [r1, #12]
 8004038:	e001      	b.n	800403e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	feeefffc 	.word	0xfeeefffc

08004050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0e7      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b75      	ldr	r3, [pc, #468]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d910      	bls.n	8004094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b72      	ldr	r3, [pc, #456]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 0207 	bic.w	r2, r3, #7
 800407a:	4970      	ldr	r1, [pc, #448]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b6e      	ldr	r3, [pc, #440]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cf      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d010      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	4b66      	ldr	r3, [pc, #408]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d908      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b0:	4b63      	ldr	r3, [pc, #396]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4960      	ldr	r1, [pc, #384]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d04c      	beq.n	8004168 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d6:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d121      	bne.n	8004126 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0a6      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	4b54      	ldr	r3, [pc, #336]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d115      	bne.n	8004126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e09a      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004106:	4b4e      	ldr	r3, [pc, #312]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e08e      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004116:	4b4a      	ldr	r3, [pc, #296]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e086      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004126:	4b46      	ldr	r3, [pc, #280]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 0203 	bic.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4943      	ldr	r1, [pc, #268]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004138:	f7fc fff4 	bl	8001124 <HAL_GetTick>
 800413c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	e00a      	b.n	8004156 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004140:	f7fc fff0 	bl	8001124 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e06e      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	4b3a      	ldr	r3, [pc, #232]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 020c 	and.w	r2, r3, #12
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	429a      	cmp	r2, r3
 8004166:	d1eb      	bne.n	8004140 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d010      	beq.n	8004196 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004180:	429a      	cmp	r2, r3
 8004182:	d208      	bcs.n	8004196 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	492b      	ldr	r1, [pc, #172]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004196:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d210      	bcs.n	80041c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 0207 	bic.w	r2, r3, #7
 80041ac:	4923      	ldr	r1, [pc, #140]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCC_ClockConfig+0x1ec>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d001      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e036      	b.n	8004234 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4918      	ldr	r1, [pc, #96]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4910      	ldr	r1, [pc, #64]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004204:	f000 f824 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_RCC_ClockConfig+0x1f0>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	490b      	ldr	r1, [pc, #44]	; (8004244 <HAL_RCC_ClockConfig+0x1f4>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	4a09      	ldr	r2, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1f8>)
 8004222:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1fc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc ff2b 	bl	8001084 <HAL_InitTick>
 800422e:	4603      	mov	r3, r0
 8004230:	72fb      	strb	r3, [r7, #11]

  return status;
 8004232:	7afb      	ldrb	r3, [r7, #11]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40022000 	.word	0x40022000
 8004240:	40021000 	.word	0x40021000
 8004244:	08006740 	.word	0x08006740
 8004248:	20000028 	.word	0x20000028
 800424c:	2000002c 	.word	0x2000002c

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425e:	4b3e      	ldr	r3, [pc, #248]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004268:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x34>
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b0c      	cmp	r3, #12
 800427c:	d121      	bne.n	80042c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d11e      	bne.n	80042c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004284:	4b34      	ldr	r3, [pc, #208]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004290:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e005      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042a0:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042ac:	4a2b      	ldr	r2, [pc, #172]	; (800435c <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10d      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d102      	bne.n	80042ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e004      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d101      	bne.n	80042d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042d4:	4b23      	ldr	r3, [pc, #140]	; (8004364 <HAL_RCC_GetSysClockFreq+0x114>)
 80042d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d134      	bne.n	8004348 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d003      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0xac>
 80042f4:	e005      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCC_GetSysClockFreq+0x110>)
 80042f8:	617b      	str	r3, [r7, #20]
      break;
 80042fa:	e005      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <HAL_RCC_GetSysClockFreq+0x114>)
 80042fe:	617b      	str	r3, [r7, #20]
      break;
 8004300:	e002      	b.n	8004308 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	617b      	str	r3, [r7, #20]
      break;
 8004306:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	3301      	adds	r3, #1
 8004314:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	fb03 f202 	mul.w	r2, r3, r2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_RCC_GetSysClockFreq+0x108>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	0e5b      	lsrs	r3, r3, #25
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	3301      	adds	r3, #1
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	fbb2 f3f3 	udiv	r3, r2, r3
 8004346:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004348:	69bb      	ldr	r3, [r7, #24]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3724      	adds	r7, #36	; 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	08006758 	.word	0x08006758
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000028 	.word	0x20000028

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004384:	f7ff fff0 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4904      	ldr	r1, [pc, #16]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08006750 	.word	0x08006750

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043b0:	f7ff ffda 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0adb      	lsrs	r3, r3, #11
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4904      	ldr	r1, [pc, #16]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	08006750 	.word	0x08006750

080043d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043e4:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043f0:	f7ff f990 	bl	8003714 <HAL_PWREx_GetVoltageRange>
 80043f4:	6178      	str	r0, [r7, #20]
 80043f6:	e014      	b.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	4a24      	ldr	r2, [pc, #144]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004402:	6593      	str	r3, [r2, #88]	; 0x58
 8004404:	4b22      	ldr	r3, [pc, #136]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004410:	f7ff f980 	bl	8003714 <HAL_PWREx_GetVoltageRange>
 8004414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004420:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d10b      	bne.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d919      	bls.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2ba0      	cmp	r3, #160	; 0xa0
 8004434:	d902      	bls.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004436:	2302      	movs	r3, #2
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e013      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800443c:	2301      	movs	r3, #1
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e010      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d902      	bls.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004448:	2303      	movs	r3, #3
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e00a      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b80      	cmp	r3, #128	; 0x80
 8004452:	d102      	bne.n	800445a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004454:	2302      	movs	r3, #2
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e004      	b.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b70      	cmp	r3, #112	; 0x70
 800445e:	d101      	bne.n	8004464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004460:	2301      	movs	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 0207 	bic.w	r2, r3, #7
 800446c:	4909      	ldr	r1, [pc, #36]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	40022000 	.word	0x40022000

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a0:	2300      	movs	r3, #0
 80044a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044a4:	2300      	movs	r3, #0
 80044a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d041      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044bc:	d02a      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044c2:	d824      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c8:	d008      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ce:	d81e      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d8:	d010      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044da:	e018      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044dc:	4b86      	ldr	r3, [pc, #536]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	4a85      	ldr	r2, [pc, #532]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044e8:	e015      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fadd 	bl	8004ab0 <RCCEx_PLLSAI1_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044fa:	e00c      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3320      	adds	r3, #32
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fbc6 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	74fb      	strb	r3, [r7, #19]
      break;
 8004512:	e000      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10b      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800451c:	4b76      	ldr	r3, [pc, #472]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800452a:	4973      	ldr	r1, [pc, #460]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004532:	e001      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d041      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004548:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800454c:	d02a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800454e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004552:	d824      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004558:	d008      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800455a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800455e:	d81e      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004568:	d010      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800456a:	e018      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800456c:	4b62      	ldr	r3, [pc, #392]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a61      	ldr	r2, [pc, #388]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004576:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004578:	e015      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fa95 	bl	8004ab0 <RCCEx_PLLSAI1_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800458a:	e00c      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3320      	adds	r3, #32
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb7e 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	74fb      	strb	r3, [r7, #19]
      break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7cfb      	ldrb	r3, [r7, #19]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ac:	4b52      	ldr	r3, [pc, #328]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ba:	494f      	ldr	r1, [pc, #316]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80a0 	beq.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045da:	4b47      	ldr	r3, [pc, #284]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b41      	ldr	r3, [pc, #260]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	4a40      	ldr	r2, [pc, #256]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	; 0x58
 80045fc:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004608:	2301      	movs	r3, #1
 800460a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800460c:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3a      	ldr	r2, [pc, #232]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004618:	f7fc fd84 	bl	8001124 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461e:	e009      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004620:	f7fc fd80 	bl	8001124 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	74fb      	strb	r3, [r7, #19]
        break;
 8004632:	e005      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d15c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004646:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01f      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	429a      	cmp	r2, r3
 8004662:	d019      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fc fd3f 	bl	8001124 <HAL_GetTick>
 80046a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	e00b      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fc fd3b 	bl	8001124 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d902      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	74fb      	strb	r3, [r7, #19]
            break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ec      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	4904      	ldr	r1, [pc, #16]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004704:	7c7b      	ldrb	r3, [r7, #17]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4ba6      	ldr	r3, [pc, #664]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	4aa5      	ldr	r2, [pc, #660]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004714:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004722:	4ba0      	ldr	r3, [pc, #640]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f023 0203 	bic.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	499c      	ldr	r1, [pc, #624]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004744:	4b97      	ldr	r3, [pc, #604]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f023 020c 	bic.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	4994      	ldr	r1, [pc, #592]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004766:	4b8f      	ldr	r3, [pc, #572]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	498b      	ldr	r1, [pc, #556]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004788:	4b86      	ldr	r3, [pc, #536]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	4983      	ldr	r1, [pc, #524]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047aa:	4b7e      	ldr	r3, [pc, #504]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b8:	497a      	ldr	r1, [pc, #488]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047cc:	4b75      	ldr	r3, [pc, #468]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	4972      	ldr	r1, [pc, #456]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ee:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	4969      	ldr	r1, [pc, #420]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004810:	4b64      	ldr	r3, [pc, #400]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481e:	4961      	ldr	r1, [pc, #388]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004832:	4b5c      	ldr	r3, [pc, #368]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	4958      	ldr	r1, [pc, #352]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004854:	4b53      	ldr	r3, [pc, #332]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	4950      	ldr	r1, [pc, #320]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004876:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	4947      	ldr	r1, [pc, #284]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800489a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	493f      	ldr	r1, [pc, #252]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d028      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ba:	4b3a      	ldr	r3, [pc, #232]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4936      	ldr	r1, [pc, #216]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d8:	d106      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048da:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	4a31      	ldr	r2, [pc, #196]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80048e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048e4:	60d3      	str	r3, [r2, #12]
 80048e6:	e011      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048f0:	d10c      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3304      	adds	r3, #4
 80048f6:	2101      	movs	r1, #1
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 f8d9 	bl	8004ab0 <RCCEx_PLLSAI1_Config>
 80048fe:	4603      	mov	r3, r0
 8004900:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d028      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004918:	4b22      	ldr	r3, [pc, #136]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004926:	491f      	ldr	r1, [pc, #124]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004936:	d106      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004938:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a19      	ldr	r2, [pc, #100]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800493e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004942:	60d3      	str	r3, [r2, #12]
 8004944:	e011      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800494e:	d10c      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f000 f8aa 	bl	8004ab0 <RCCEx_PLLSAI1_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004960:	7cfb      	ldrb	r3, [r7, #19]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d02a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004984:	4907      	ldr	r1, [pc, #28]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004994:	d108      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004996:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a02      	ldr	r2, [pc, #8]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800499c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a0:	60d3      	str	r3, [r2, #12]
 80049a2:	e013      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80049a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b0:	d10c      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2101      	movs	r1, #1
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f879 	bl	8004ab0 <RCCEx_PLLSAI1_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049c2:	7cfb      	ldrb	r3, [r7, #19]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80049c8:	7cfb      	ldrb	r3, [r7, #19]
 80049ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02f      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049d8:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e6:	4929      	ldr	r1, [pc, #164]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f6:	d10d      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	2102      	movs	r1, #2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f856 	bl	8004ab0 <RCCEx_PLLSAI1_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d014      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	74bb      	strb	r3, [r7, #18]
 8004a12:	e011      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3320      	adds	r3, #32
 8004a22:	2102      	movs	r1, #2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 f935 	bl	8004c94 <RCCEx_PLLSAI2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004a34:	7cfb      	ldrb	r3, [r7, #19]
 8004a36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00b      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a44:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a54:	490d      	ldr	r1, [pc, #52]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a78:	4904      	ldr	r1, [pc, #16]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a04      	ldr	r2, [pc, #16]	; (8004aac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a9a:	f043 0304 	orr.w	r3, r3, #4
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000

08004ab0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004abe:	4b74      	ldr	r3, [pc, #464]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d018      	beq.n	8004afc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aca:	4b71      	ldr	r3, [pc, #452]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0203 	and.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d10d      	bne.n	8004af6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ae2:	4b6b      	ldr	r3, [pc, #428]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
       ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d047      	beq.n	8004b86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	e044      	b.n	8004b86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d018      	beq.n	8004b36 <RCCEx_PLLSAI1_Config+0x86>
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d825      	bhi.n	8004b54 <RCCEx_PLLSAI1_Config+0xa4>
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d002      	beq.n	8004b12 <RCCEx_PLLSAI1_Config+0x62>
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d009      	beq.n	8004b24 <RCCEx_PLLSAI1_Config+0x74>
 8004b10:	e020      	b.n	8004b54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b12:	4b5f      	ldr	r3, [pc, #380]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d11d      	bne.n	8004b5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b22:	e01a      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b24:	4b5a      	ldr	r3, [pc, #360]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d116      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b34:	e013      	b.n	8004b5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b36:	4b56      	ldr	r3, [pc, #344]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b42:	4b53      	ldr	r3, [pc, #332]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b52:	e006      	b.n	8004b62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      break;
 8004b58:	e004      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10d      	bne.n	8004b86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b6a:	4b49      	ldr	r3, [pc, #292]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6819      	ldr	r1, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	4943      	ldr	r1, [pc, #268]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d17c      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b8c:	4b40      	ldr	r3, [pc, #256]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a3f      	ldr	r2, [pc, #252]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fc fac4 	bl	8001124 <HAL_GetTick>
 8004b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b9e:	e009      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ba0:	f7fc fac0 	bl	8001124 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d902      	bls.n	8004bb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bb2:	e005      	b.n	8004bc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bb4:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ef      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d15f      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d110      	bne.n	8004bee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bcc:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004bd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6892      	ldr	r2, [r2, #8]
 8004bdc:	0211      	lsls	r1, r2, #8
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68d2      	ldr	r2, [r2, #12]
 8004be2:	06d2      	lsls	r2, r2, #27
 8004be4:	430a      	orrs	r2, r1
 8004be6:	492a      	ldr	r1, [pc, #168]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	610b      	str	r3, [r1, #16]
 8004bec:	e027      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d112      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6892      	ldr	r2, [r2, #8]
 8004c04:	0211      	lsls	r1, r2, #8
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6912      	ldr	r2, [r2, #16]
 8004c0a:	0852      	lsrs	r2, r2, #1
 8004c0c:	3a01      	subs	r2, #1
 8004c0e:	0552      	lsls	r2, r2, #21
 8004c10:	430a      	orrs	r2, r1
 8004c12:	491f      	ldr	r1, [pc, #124]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	610b      	str	r3, [r1, #16]
 8004c18:	e011      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	0211      	lsls	r1, r2, #8
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6952      	ldr	r2, [r2, #20]
 8004c30:	0852      	lsrs	r2, r2, #1
 8004c32:	3a01      	subs	r2, #1
 8004c34:	0652      	lsls	r2, r2, #25
 8004c36:	430a      	orrs	r2, r1
 8004c38:	4915      	ldr	r1, [pc, #84]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fc fa6b 	bl	8001124 <HAL_GetTick>
 8004c4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c50:	e009      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c52:	f7fc fa67 	bl	8001124 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d902      	bls.n	8004c66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	73fb      	strb	r3, [r7, #15]
          break;
 8004c64:	e005      	b.n	8004c72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0ef      	beq.n	8004c52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	4903      	ldr	r1, [pc, #12]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000

08004c94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ca2:	4b69      	ldr	r3, [pc, #420]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d018      	beq.n	8004ce0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cae:	4b66      	ldr	r3, [pc, #408]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0203 	and.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d10d      	bne.n	8004cda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d009      	beq.n	8004cda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cc6:	4b60      	ldr	r3, [pc, #384]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d047      	beq.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	e044      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d018      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0x86>
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d825      	bhi.n	8004d38 <RCCEx_PLLSAI2_Config+0xa4>
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d002      	beq.n	8004cf6 <RCCEx_PLLSAI2_Config+0x62>
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d009      	beq.n	8004d08 <RCCEx_PLLSAI2_Config+0x74>
 8004cf4:	e020      	b.n	8004d38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cf6:	4b54      	ldr	r3, [pc, #336]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11d      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d06:	e01a      	b.n	8004d3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d08:	4b4f      	ldr	r3, [pc, #316]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d116      	bne.n	8004d42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d18:	e013      	b.n	8004d42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d1a:	4b4b      	ldr	r3, [pc, #300]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d26:	4b48      	ldr	r3, [pc, #288]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d36:	e006      	b.n	8004d46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e004      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e002      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d42:	bf00      	nop
 8004d44:	e000      	b.n	8004d48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	430b      	orrs	r3, r1
 8004d64:	4938      	ldr	r1, [pc, #224]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d166      	bne.n	8004e3e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a34      	ldr	r2, [pc, #208]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7c:	f7fc f9d2 	bl	8001124 <HAL_GetTick>
 8004d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d82:	e009      	b.n	8004d98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d84:	f7fc f9ce 	bl	8001124 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d902      	bls.n	8004d98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	73fb      	strb	r3, [r7, #15]
        break;
 8004d96:	e005      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d98:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1ef      	bne.n	8004d84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d149      	bne.n	8004e3e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d110      	bne.n	8004dd2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004db8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	0211      	lsls	r1, r2, #8
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68d2      	ldr	r2, [r2, #12]
 8004dc6:	06d2      	lsls	r2, r2, #27
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	491f      	ldr	r1, [pc, #124]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	614b      	str	r3, [r1, #20]
 8004dd0:	e011      	b.n	8004df6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6892      	ldr	r2, [r2, #8]
 8004de2:	0211      	lsls	r1, r2, #8
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6912      	ldr	r2, [r2, #16]
 8004de8:	0852      	lsrs	r2, r2, #1
 8004dea:	3a01      	subs	r2, #1
 8004dec:	0652      	lsls	r2, r2, #25
 8004dee:	430a      	orrs	r2, r1
 8004df0:	4915      	ldr	r1, [pc, #84]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fc f98f 	bl	8001124 <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e08:	e009      	b.n	8004e1e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e0a:	f7fc f98b 	bl	8001124 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d902      	bls.n	8004e1e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	73fb      	strb	r3, [r7, #15]
          break;
 8004e1c:	e005      	b.n	8004e2a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ef      	beq.n	8004e0a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e32:	695a      	ldr	r2, [r3, #20]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	4903      	ldr	r1, [pc, #12]	; (8004e48 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000

08004e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e049      	b.n	8004ef2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fb ffe8 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 f89e 	bl	8004fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e047      	b.n	8004fa4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a23      	ldr	r2, [pc, #140]	; (8004fb0 <HAL_TIM_Base_Start+0xb4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <HAL_TIM_Base_Start+0x66>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2e:	d018      	beq.n	8004f62 <HAL_TIM_Base_Start+0x66>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <HAL_TIM_Base_Start+0xb8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_TIM_Base_Start+0x66>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <HAL_TIM_Base_Start+0xbc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_TIM_Base_Start+0x66>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <HAL_TIM_Base_Start+0xc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_TIM_Base_Start+0x66>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <HAL_TIM_Base_Start+0xc4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_TIM_Base_Start+0x66>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <HAL_TIM_Base_Start+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d115      	bne.n	8004f8e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <HAL_TIM_Base_Start+0xcc>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d015      	beq.n	8004fa0 <HAL_TIM_Base_Start+0xa4>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7a:	d011      	beq.n	8004fa0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8c:	e008      	b.n	8004fa0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e000      	b.n	8004fa2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40013400 	.word	0x40013400
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	00010007 	.word	0x00010007

08004fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d013      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fea:	d00f      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3d      	ldr	r2, [pc, #244]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00b      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3c      	ldr	r2, [pc, #240]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3b      	ldr	r2, [pc, #236]	; (80050ec <TIM_Base_SetConfig+0x120>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a3a      	ldr	r2, [pc, #232]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d108      	bne.n	800501e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d01f      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d01b      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <TIM_Base_SetConfig+0x118>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d017      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <TIM_Base_SetConfig+0x11c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <TIM_Base_SetConfig+0x120>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <TIM_Base_SetConfig+0x128>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <TIM_Base_SetConfig+0x12c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0x9a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a26      	ldr	r2, [pc, #152]	; (80050fc <TIM_Base_SetConfig+0x130>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d108      	bne.n	8005078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <TIM_Base_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00f      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <TIM_Base_SetConfig+0x124>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <TIM_Base_SetConfig+0x128>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a10      	ldr	r2, [pc, #64]	; (80050f8 <TIM_Base_SetConfig+0x12c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0xf8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0f      	ldr	r2, [pc, #60]	; (80050fc <TIM_Base_SetConfig+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40013400 	.word	0x40013400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40014400 	.word	0x40014400
 80050fc:	40014800 	.word	0x40014800

08005100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e068      	b.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a2e      	ldr	r2, [pc, #184]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d108      	bne.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d018      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a18      	ldr	r2, [pc, #96]	; (8005208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a13      	ldr	r2, [pc, #76]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10c      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40013400 	.word	0x40013400
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800
 8005208:	40000c00 	.word	0x40000c00
 800520c:	40014000 	.word	0x40014000

08005210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e040      	b.n	80052a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fb fda8 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fae0 	bl	800581c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f825 	bl	80052ac <UART_SetConfig>
 8005262:	4603      	mov	r3, r0
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e01b      	b.n	80052a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800527a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800528a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb5f 	bl	8005960 <UART_CheckIdleState>
 80052a2:	4603      	mov	r3, r0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b0:	b08a      	sub	sp, #40	; 0x28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4ba4      	ldr	r3, [pc, #656]	; (800556c <UART_SetConfig+0x2c0>)
 80052dc:	4013      	ands	r3, r2
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a99      	ldr	r2, [pc, #612]	; (8005570 <UART_SetConfig+0x2c4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	4313      	orrs	r3, r2
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005328:	430a      	orrs	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a90      	ldr	r2, [pc, #576]	; (8005574 <UART_SetConfig+0x2c8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d126      	bne.n	8005384 <UART_SetConfig+0xd8>
 8005336:	4b90      	ldr	r3, [pc, #576]	; (8005578 <UART_SetConfig+0x2cc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b03      	cmp	r3, #3
 8005342:	d81b      	bhi.n	800537c <UART_SetConfig+0xd0>
 8005344:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0xa0>)
 8005346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534a:	bf00      	nop
 800534c:	0800535d 	.word	0x0800535d
 8005350:	0800536d 	.word	0x0800536d
 8005354:	08005365 	.word	0x08005365
 8005358:	08005375 	.word	0x08005375
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005362:	e116      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005364:	2302      	movs	r3, #2
 8005366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536a:	e112      	b.n	8005592 <UART_SetConfig+0x2e6>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005372:	e10e      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537a:	e10a      	b.n	8005592 <UART_SetConfig+0x2e6>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005382:	e106      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a7c      	ldr	r2, [pc, #496]	; (800557c <UART_SetConfig+0x2d0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d138      	bne.n	8005400 <UART_SetConfig+0x154>
 800538e:	4b7a      	ldr	r3, [pc, #488]	; (8005578 <UART_SetConfig+0x2cc>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d82d      	bhi.n	80053f8 <UART_SetConfig+0x14c>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0xf8>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053d9 	.word	0x080053d9
 80053a8:	080053f9 	.word	0x080053f9
 80053ac:	080053f9 	.word	0x080053f9
 80053b0:	080053f9 	.word	0x080053f9
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	080053f9 	.word	0x080053f9
 80053bc:	080053f9 	.word	0x080053f9
 80053c0:	080053f9 	.word	0x080053f9
 80053c4:	080053e1 	.word	0x080053e1
 80053c8:	080053f9 	.word	0x080053f9
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	080053f9 	.word	0x080053f9
 80053d4:	080053f1 	.word	0x080053f1
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053de:	e0d8      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053e0:	2302      	movs	r3, #2
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e6:	e0d4      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ee:	e0d0      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f6:	e0cc      	b.n	8005592 <UART_SetConfig+0x2e6>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fe:	e0c8      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <UART_SetConfig+0x2d4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d125      	bne.n	8005456 <UART_SetConfig+0x1aa>
 800540a:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <UART_SetConfig+0x2cc>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005414:	2b30      	cmp	r3, #48	; 0x30
 8005416:	d016      	beq.n	8005446 <UART_SetConfig+0x19a>
 8005418:	2b30      	cmp	r3, #48	; 0x30
 800541a:	d818      	bhi.n	800544e <UART_SetConfig+0x1a2>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d00a      	beq.n	8005436 <UART_SetConfig+0x18a>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d814      	bhi.n	800544e <UART_SetConfig+0x1a2>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <UART_SetConfig+0x182>
 8005428:	2b10      	cmp	r3, #16
 800542a:	d008      	beq.n	800543e <UART_SetConfig+0x192>
 800542c:	e00f      	b.n	800544e <UART_SetConfig+0x1a2>
 800542e:	2300      	movs	r3, #0
 8005430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005434:	e0ad      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005436:	2302      	movs	r3, #2
 8005438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543c:	e0a9      	b.n	8005592 <UART_SetConfig+0x2e6>
 800543e:	2304      	movs	r3, #4
 8005440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005444:	e0a5      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005446:	2308      	movs	r3, #8
 8005448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544c:	e0a1      	b.n	8005592 <UART_SetConfig+0x2e6>
 800544e:	2310      	movs	r3, #16
 8005450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005454:	e09d      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4a      	ldr	r2, [pc, #296]	; (8005584 <UART_SetConfig+0x2d8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d125      	bne.n	80054ac <UART_SetConfig+0x200>
 8005460:	4b45      	ldr	r3, [pc, #276]	; (8005578 <UART_SetConfig+0x2cc>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800546a:	2bc0      	cmp	r3, #192	; 0xc0
 800546c:	d016      	beq.n	800549c <UART_SetConfig+0x1f0>
 800546e:	2bc0      	cmp	r3, #192	; 0xc0
 8005470:	d818      	bhi.n	80054a4 <UART_SetConfig+0x1f8>
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d00a      	beq.n	800548c <UART_SetConfig+0x1e0>
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d814      	bhi.n	80054a4 <UART_SetConfig+0x1f8>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <UART_SetConfig+0x1d8>
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d008      	beq.n	8005494 <UART_SetConfig+0x1e8>
 8005482:	e00f      	b.n	80054a4 <UART_SetConfig+0x1f8>
 8005484:	2300      	movs	r3, #0
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e082      	b.n	8005592 <UART_SetConfig+0x2e6>
 800548c:	2302      	movs	r3, #2
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e07e      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005494:	2304      	movs	r3, #4
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e07a      	b.n	8005592 <UART_SetConfig+0x2e6>
 800549c:	2308      	movs	r3, #8
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e076      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e072      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a35      	ldr	r2, [pc, #212]	; (8005588 <UART_SetConfig+0x2dc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d12a      	bne.n	800550c <UART_SetConfig+0x260>
 80054b6:	4b30      	ldr	r3, [pc, #192]	; (8005578 <UART_SetConfig+0x2cc>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c4:	d01a      	beq.n	80054fc <UART_SetConfig+0x250>
 80054c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054ca:	d81b      	bhi.n	8005504 <UART_SetConfig+0x258>
 80054cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d0:	d00c      	beq.n	80054ec <UART_SetConfig+0x240>
 80054d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d6:	d815      	bhi.n	8005504 <UART_SetConfig+0x258>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <UART_SetConfig+0x238>
 80054dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e0:	d008      	beq.n	80054f4 <UART_SetConfig+0x248>
 80054e2:	e00f      	b.n	8005504 <UART_SetConfig+0x258>
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ea:	e052      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054ec:	2302      	movs	r3, #2
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	e04e      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054f4:	2304      	movs	r3, #4
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fa:	e04a      	b.n	8005592 <UART_SetConfig+0x2e6>
 80054fc:	2308      	movs	r3, #8
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005502:	e046      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005504:	2310      	movs	r3, #16
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550a:	e042      	b.n	8005592 <UART_SetConfig+0x2e6>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a17      	ldr	r2, [pc, #92]	; (8005570 <UART_SetConfig+0x2c4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d13a      	bne.n	800558c <UART_SetConfig+0x2e0>
 8005516:	4b18      	ldr	r3, [pc, #96]	; (8005578 <UART_SetConfig+0x2cc>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005524:	d01a      	beq.n	800555c <UART_SetConfig+0x2b0>
 8005526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800552a:	d81b      	bhi.n	8005564 <UART_SetConfig+0x2b8>
 800552c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005530:	d00c      	beq.n	800554c <UART_SetConfig+0x2a0>
 8005532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005536:	d815      	bhi.n	8005564 <UART_SetConfig+0x2b8>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <UART_SetConfig+0x298>
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005540:	d008      	beq.n	8005554 <UART_SetConfig+0x2a8>
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x2b8>
 8005544:	2300      	movs	r3, #0
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554a:	e022      	b.n	8005592 <UART_SetConfig+0x2e6>
 800554c:	2302      	movs	r3, #2
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005552:	e01e      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005554:	2304      	movs	r3, #4
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555a:	e01a      	b.n	8005592 <UART_SetConfig+0x2e6>
 800555c:	2308      	movs	r3, #8
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005562:	e016      	b.n	8005592 <UART_SetConfig+0x2e6>
 8005564:	2310      	movs	r3, #16
 8005566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556a:	e012      	b.n	8005592 <UART_SetConfig+0x2e6>
 800556c:	efff69f3 	.word	0xefff69f3
 8005570:	40008000 	.word	0x40008000
 8005574:	40013800 	.word	0x40013800
 8005578:	40021000 	.word	0x40021000
 800557c:	40004400 	.word	0x40004400
 8005580:	40004800 	.word	0x40004800
 8005584:	40004c00 	.word	0x40004c00
 8005588:	40005000 	.word	0x40005000
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a9f      	ldr	r2, [pc, #636]	; (8005814 <UART_SetConfig+0x568>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d17a      	bne.n	8005692 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800559c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d824      	bhi.n	80055ee <UART_SetConfig+0x342>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0x300>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055df 	.word	0x080055df
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055ef 	.word	0x080055ef
 80055cc:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fe fed6 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 80055d4:	61f8      	str	r0, [r7, #28]
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b8f      	ldr	r3, [pc, #572]	; (8005818 <UART_SetConfig+0x56c>)
 80055da:	61fb      	str	r3, [r7, #28]
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fe fe37 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 80055e2:	61f8      	str	r0, [r7, #28]
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ea:	61fb      	str	r3, [r7, #28]
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80fb 	beq.w	80057f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	d305      	bcc.n	800561e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005624:	e0e8      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2200      	movs	r2, #0
 800562a:	461c      	mov	r4, r3
 800562c:	4615      	mov	r5, r2
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	022b      	lsls	r3, r5, #8
 8005638:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800563c:	0222      	lsls	r2, r4, #8
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	6849      	ldr	r1, [r1, #4]
 8005642:	0849      	lsrs	r1, r1, #1
 8005644:	2000      	movs	r0, #0
 8005646:	4688      	mov	r8, r1
 8005648:	4681      	mov	r9, r0
 800564a:	eb12 0a08 	adds.w	sl, r2, r8
 800564e:	eb43 0b09 	adc.w	fp, r3, r9
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	f7fa fdc2 	bl	80001ec <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005676:	d308      	bcc.n	800568a <UART_SetConfig+0x3de>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567e:	d204      	bcs.n	800568a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	e0b6      	b.n	80057f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005690:	e0b2      	b.n	80057f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d15e      	bne.n	800575a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800569c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d828      	bhi.n	80056f6 <UART_SetConfig+0x44a>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x400>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	080056f7 	.word	0x080056f7
 80056bc:	080056e7 	.word	0x080056e7
 80056c0:	080056f7 	.word	0x080056f7
 80056c4:	080056f7 	.word	0x080056f7
 80056c8:	080056f7 	.word	0x080056f7
 80056cc:	080056ef 	.word	0x080056ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fe fe56 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 80056d4:	61f8      	str	r0, [r7, #28]
        break;
 80056d6:	e014      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe fe68 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 80056dc:	61f8      	str	r0, [r7, #28]
        break;
 80056de:	e010      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e0:	4b4d      	ldr	r3, [pc, #308]	; (8005818 <UART_SetConfig+0x56c>)
 80056e2:	61fb      	str	r3, [r7, #28]
        break;
 80056e4:	e00d      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e6:	f7fe fdb3 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 80056ea:	61f8      	str	r0, [r7, #28]
        break;
 80056ec:	e009      	b.n	8005702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f2:	61fb      	str	r3, [r7, #28]
        break;
 80056f4:	e005      	b.n	8005702 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d077      	beq.n	80057f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	005a      	lsls	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	441a      	add	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
 800571c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b0f      	cmp	r3, #15
 8005722:	d916      	bls.n	8005752 <UART_SetConfig+0x4a6>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572a:	d212      	bcs.n	8005752 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f023 030f 	bic.w	r3, r3, #15
 8005734:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	085b      	lsrs	r3, r3, #1
 800573a:	b29b      	uxth	r3, r3
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	b29a      	uxth	r2, r3
 8005742:	8afb      	ldrh	r3, [r7, #22]
 8005744:	4313      	orrs	r3, r2
 8005746:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	8afa      	ldrh	r2, [r7, #22]
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e052      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005758:	e04e      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800575a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800575e:	2b08      	cmp	r3, #8
 8005760:	d827      	bhi.n	80057b2 <UART_SetConfig+0x506>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x4bc>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	080057b3 	.word	0x080057b3
 8005778:	080057a3 	.word	0x080057a3
 800577c:	080057b3 	.word	0x080057b3
 8005780:	080057b3 	.word	0x080057b3
 8005784:	080057b3 	.word	0x080057b3
 8005788:	080057ab 	.word	0x080057ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fe fdf8 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8005790:	61f8      	str	r0, [r7, #28]
        break;
 8005792:	e014      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fe fe0a 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8005798:	61f8      	str	r0, [r7, #28]
        break;
 800579a:	e010      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800579c:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <UART_SetConfig+0x56c>)
 800579e:	61fb      	str	r3, [r7, #28]
        break;
 80057a0:	e00d      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a2:	f7fe fd55 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 80057a6:	61f8      	str	r0, [r7, #28]
        break;
 80057a8:	e009      	b.n	80057be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ae:	61fb      	str	r3, [r7, #28]
        break;
 80057b0:	e005      	b.n	80057be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057bc:	bf00      	nop
    }

    if (pclk != 0U)
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d019      	beq.n	80057f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	085a      	lsrs	r2, r3, #1
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	441a      	add	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	2b0f      	cmp	r3, #15
 80057dc:	d909      	bls.n	80057f2 <UART_SetConfig+0x546>
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e4:	d205      	bcs.n	80057f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	e002      	b.n	80057f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005804:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005808:	4618      	mov	r0, r3
 800580a:	3728      	adds	r7, #40	; 0x28
 800580c:	46bd      	mov	sp, r7
 800580e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005812:	bf00      	nop
 8005814:	40008000 	.word	0x40008000
 8005818:	00f42400 	.word	0x00f42400

0800581c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f003 0302 	and.w	r3, r3, #2
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	f003 0310 	and.w	r3, r3, #16
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f003 0320 	and.w	r3, r3, #32
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01a      	beq.n	8005932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800591a:	d10a      	bne.n	8005932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	605a      	str	r2, [r3, #4]
  }
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b098      	sub	sp, #96	; 0x60
 8005964:	af02      	add	r7, sp, #8
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005970:	f7fb fbd8 	bl	8001124 <HAL_GetTick>
 8005974:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0308 	and.w	r3, r3, #8
 8005980:	2b08      	cmp	r3, #8
 8005982:	d12e      	bne.n	80059e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800598c:	2200      	movs	r2, #0
 800598e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f88c 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d021      	beq.n	80059e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b2:	653b      	str	r3, [r7, #80]	; 0x50
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059bc:	647b      	str	r3, [r7, #68]	; 0x44
 80059be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e6      	bne.n	800599e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e062      	b.n	8005aa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d149      	bne.n	8005a84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f8:	2200      	movs	r2, #0
 80059fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f856 	bl	8005ab0 <UART_WaitOnFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03c      	beq.n	8005a84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	623b      	str	r3, [r7, #32]
   return(result);
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30
 8005a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e6      	bne.n	8005a0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	3308      	adds	r3, #8
 8005a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a5c:	61fa      	str	r2, [r7, #28]
 8005a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	69b9      	ldr	r1, [r7, #24]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	617b      	str	r3, [r7, #20]
   return(result);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e5      	bne.n	8005a3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e011      	b.n	8005aa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3758      	adds	r7, #88	; 0x58
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac0:	e049      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d045      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fb fb2b 	bl	8001124 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e048      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d031      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d110      	bne.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2208      	movs	r2, #8
 8005b06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f838 	bl	8005b7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2208      	movs	r2, #8
 8005b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e029      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b30:	d111      	bne.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f81e 	bl	8005b7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e00f      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2300      	movne	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d0a6      	beq.n	8005ac2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b095      	sub	sp, #84	; 0x54
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ba6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005baa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e6      	bne.n	8005b86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f023 0301 	bic.w	r3, r3, #1
 8005bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e5      	bne.n	8005bb8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d118      	bne.n	8005c26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f023 0310 	bic.w	r3, r3, #16
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6979      	ldr	r1, [r7, #20]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e6      	bne.n	8005bf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c3a:	bf00      	nop
 8005c3c:	3754      	adds	r7, #84	; 0x54
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c46:	b084      	sub	sp, #16
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	f107 001c 	add.w	r0, r7, #28
 8005c54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa65 	bl	8006134 <USB_CoreReset>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c80:	e005      	b.n	8005c8e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9a:	b004      	add	sp, #16
 8005c9c:	4770      	bx	lr

08005c9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d115      	bne.n	8005d0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7fb fa24 	bl	800113c <HAL_Delay>
      ms++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa0c 	bl	8006118 <USB_GetMode>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d01e      	beq.n	8005d44 <USB_SetCurrentMode+0x84>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b31      	cmp	r3, #49	; 0x31
 8005d0a:	d9f0      	bls.n	8005cee <USB_SetCurrentMode+0x2e>
 8005d0c:	e01a      	b.n	8005d44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d115      	bne.n	8005d40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d20:	2001      	movs	r0, #1
 8005d22:	f7fb fa0b 	bl	800113c <HAL_Delay>
      ms++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f9f3 	bl	8006118 <USB_GetMode>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <USB_SetCurrentMode+0x84>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b31      	cmp	r3, #49	; 0x31
 8005d3c:	d9f0      	bls.n	8005d20 <USB_SetCurrentMode+0x60>
 8005d3e:	e001      	b.n	8005d44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e005      	b.n	8005d50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b32      	cmp	r3, #50	; 0x32
 8005d48:	d101      	bne.n	8005d4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d58:	b084      	sub	sp, #16
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e009      	b.n	8005d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3340      	adds	r3, #64	; 0x40
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b0e      	cmp	r3, #14
 8005d90:	d9f2      	bls.n	8005d78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d11c      	bne.n	8005dd2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da6:	f043 0302 	orr.w	r3, r3, #2
 8005daa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e005      	b.n	8005dde <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2300      	movs	r3, #0
 8005de8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dea:	2103      	movs	r1, #3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f959 	bl	80060a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005df2:	2110      	movs	r1, #16
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8f1 	bl	8005fdc <USB_FlushTxFifo>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f91d 	bl	8006044 <USB_FlushRxFifo>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	461a      	mov	r2, r3
 8005e28:	2300      	movs	r3, #0
 8005e2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e32:	461a      	mov	r2, r3
 8005e34:	2300      	movs	r3, #0
 8005e36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	e043      	b.n	8005ec6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e54:	d118      	bne.n	8005e88 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	461a      	mov	r2, r3
 8005e6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e013      	b.n	8005e9a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	e008      	b.n	8005e9a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	461a      	mov	r2, r3
 8005e96:	2300      	movs	r3, #0
 8005e98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ebe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d3b7      	bcc.n	8005e3e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	e043      	b.n	8005f5c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eea:	d118      	bne.n	8005f1e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	461a      	mov	r2, r3
 8005f00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e013      	b.n	8005f30 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	461a      	mov	r2, r3
 8005f16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e008      	b.n	8005f30 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d3b7      	bcc.n	8005ed4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f043 0210 	orr.w	r2, r3, #16
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <USB_DevInit+0x280>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	f043 0208 	orr.w	r2, r3, #8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d107      	bne.n	8005fc6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fd2:	b004      	add	sp, #16
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	803c3800 	.word	0x803c3800

08005fdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <USB_FlushTxFifo+0x64>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e01b      	b.n	8006034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	daf2      	bge.n	8005fea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	019b      	lsls	r3, r3, #6
 800600c:	f043 0220 	orr.w	r2, r3, #32
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a08      	ldr	r2, [pc, #32]	; (8006040 <USB_FlushTxFifo+0x64>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e006      	b.n	8006034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b20      	cmp	r3, #32
 8006030:	d0f0      	beq.n	8006014 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	00030d40 	.word	0x00030d40

08006044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a11      	ldr	r2, [pc, #68]	; (80060a0 <USB_FlushRxFifo+0x5c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e018      	b.n	8006094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	daf2      	bge.n	8006050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2210      	movs	r2, #16
 8006072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <USB_FlushRxFifo+0x5c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e006      	b.n	8006094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b10      	cmp	r3, #16
 8006090:	d0f0      	beq.n	8006074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	00030d40 	.word	0x00030d40

080060a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060f0:	f023 0303 	bic.w	r3, r3, #3
 80060f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006104:	f043 0302 	orr.w	r3, r3, #2
 8006108:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0301 	and.w	r3, r3, #1
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3301      	adds	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4a13      	ldr	r2, [pc, #76]	; (8006198 <USB_CoreReset+0x64>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e01b      	b.n	800618a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	daf2      	bge.n	8006140 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f043 0201 	orr.w	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	3301      	adds	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a09      	ldr	r2, [pc, #36]	; (8006198 <USB_CoreReset+0x64>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d901      	bls.n	800617c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e006      	b.n	800618a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	d0f0      	beq.n	800616a <USB_CoreReset+0x36>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	00030d40 	.word	0x00030d40

0800619c <arm_conv_f32>:
 800619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a0:	b08b      	sub	sp, #44	; 0x2c
 80061a2:	4299      	cmp	r1, r3
 80061a4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80061a6:	d205      	bcs.n	80061b4 <arm_conv_f32+0x18>
 80061a8:	4606      	mov	r6, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	4610      	mov	r0, r2
 80061ae:	4619      	mov	r1, r3
 80061b0:	4632      	mov	r2, r6
 80061b2:	4623      	mov	r3, r4
 80061b4:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 80061b8:	3101      	adds	r1, #1
 80061ba:	1ac9      	subs	r1, r1, r3
 80061bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80061c4:	9101      	str	r1, [sp, #4]
 80061c6:	1e59      	subs	r1, r3, #1
 80061c8:	eb02 070b 	add.w	r7, r2, fp
 80061cc:	f000 8277 	beq.w	80066be <arm_conv_f32+0x522>
 80061d0:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8006490 <arm_conv_f32+0x2f4>
 80061d4:	f102 0904 	add.w	r9, r2, #4
 80061d8:	46aa      	mov	sl, r5
 80061da:	4680      	mov	r8, r0
 80061dc:	2401      	movs	r4, #1
 80061de:	f014 0603 	ands.w	r6, r4, #3
 80061e2:	d01b      	beq.n	800621c <arm_conv_f32+0x80>
 80061e4:	ed92 7a00 	vldr	s14, [r2]
 80061e8:	edd8 6a00 	vldr	s13, [r8]
 80061ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80061f0:	3e01      	subs	r6, #1
 80061f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061f6:	d011      	beq.n	800621c <arm_conv_f32+0x80>
 80061f8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80061fc:	edd8 6a01 	vldr	s13, [r8, #4]
 8006200:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006204:	2e01      	cmp	r6, #1
 8006206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800620a:	d007      	beq.n	800621c <arm_conv_f32+0x80>
 800620c:	ed98 7a02 	vldr	s14, [r8, #8]
 8006210:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006214:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800621c:	3401      	adds	r4, #1
 800621e:	42a3      	cmp	r3, r4
 8006220:	ecea 7a01 	vstmia	sl!, {s15}
 8006224:	464a      	mov	r2, r9
 8006226:	d03a      	beq.n	800629e <arm_conv_f32+0x102>
 8006228:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800622c:	f000 824c 	beq.w	80066c8 <arm_conv_f32+0x52c>
 8006230:	f100 0210 	add.w	r2, r0, #16
 8006234:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8006238:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006490 <arm_conv_f32+0x2f4>
 800623c:	eb02 0c08 	add.w	ip, r2, r8
 8006240:	f1a9 0610 	sub.w	r6, r9, #16
 8006244:	ed12 7a04 	vldr	s14, [r2, #-16]
 8006248:	edd6 3a04 	vldr	s7, [r6, #16]
 800624c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006250:	ed96 4a03 	vldr	s8, [r6, #12]
 8006254:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006258:	edd6 4a02 	vldr	s9, [r6, #8]
 800625c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006260:	ed96 5a01 	vldr	s10, [r6, #4]
 8006264:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006268:	ee26 6a04 	vmul.f32	s12, s12, s8
 800626c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006270:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8006274:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006278:	ee65 6a85 	vmul.f32	s13, s11, s10
 800627c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006280:	3210      	adds	r2, #16
 8006282:	4594      	cmp	ip, r2
 8006284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006288:	f1a6 0610 	sub.w	r6, r6, #16
 800628c:	d1da      	bne.n	8006244 <arm_conv_f32+0xa8>
 800628e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8006292:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8006296:	4480      	add	r8, r0
 8006298:	f109 0904 	add.w	r9, r9, #4
 800629c:	e79f      	b.n	80061de <arm_conv_f32+0x42>
 800629e:	2b03      	cmp	r3, #3
 80062a0:	445d      	add	r5, fp
 80062a2:	f240 80e9 	bls.w	8006478 <arm_conv_f32+0x2dc>
 80062a6:	9b01      	ldr	r3, [sp, #4]
 80062a8:	089a      	lsrs	r2, r3, #2
 80062aa:	9202      	str	r2, [sp, #8]
 80062ac:	f000 8203 	beq.w	80066b6 <arm_conv_f32+0x51a>
 80062b0:	ea4f 0894 	mov.w	r8, r4, lsr #2
 80062b4:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80062b8:	0112      	lsls	r2, r2, #4
 80062ba:	f004 0603 	and.w	r6, r4, #3
 80062be:	9203      	str	r2, [sp, #12]
 80062c0:	f1a3 0a10 	sub.w	sl, r3, #16
 80062c4:	f1a3 020c 	sub.w	r2, r3, #12
 80062c8:	3b08      	subs	r3, #8
 80062ca:	9204      	str	r2, [sp, #16]
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	f106 39ff 	add.w	r9, r6, #4294967295
 80062d2:	e9cd 7008 	strd	r7, r0, [sp, #32]
 80062d6:	9a03      	ldr	r2, [sp, #12]
 80062d8:	f100 0c1c 	add.w	ip, r0, #28
 80062dc:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80062e0:	464c      	mov	r4, r9
 80062e2:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80062e6:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80062ea:	f1a7 0310 	sub.w	r3, r7, #16
 80062ee:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80062f2:	eb05 0b02 	add.w	fp, r5, r2
 80062f6:	461f      	mov	r7, r3
 80062f8:	3510      	adds	r5, #16
 80062fa:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8006490 <arm_conv_f32+0x2f4>
 80062fe:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8006302:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8006306:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800630a:	eeb0 5a46 	vmov.f32	s10, s12
 800630e:	eef0 4a46 	vmov.f32	s9, s12
 8006312:	eef0 5a46 	vmov.f32	s11, s12
 8006316:	463a      	mov	r2, r7
 8006318:	4663      	mov	r3, ip
 800631a:	4641      	mov	r1, r8
 800631c:	edd2 6a04 	vldr	s13, [r2, #16]
 8006320:	ed13 0a04 	vldr	s0, [r3, #-16]
 8006324:	ed92 7a03 	vldr	s14, [r2, #12]
 8006328:	edd2 7a02 	vldr	s15, [r2, #8]
 800632c:	edd2 0a01 	vldr	s1, [r2, #4]
 8006330:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8006334:	ee62 3a26 	vmul.f32	s7, s4, s13
 8006338:	ee61 2a26 	vmul.f32	s5, s2, s13
 800633c:	ed13 1a03 	vldr	s2, [r3, #-12]
 8006340:	ee66 6a80 	vmul.f32	s13, s13, s0
 8006344:	ee21 4a87 	vmul.f32	s8, s3, s14
 8006348:	ee73 4a24 	vadd.f32	s9, s6, s9
 800634c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8006350:	ee22 3a07 	vmul.f32	s6, s4, s14
 8006354:	ed53 1a02 	vldr	s3, [r3, #-8]
 8006358:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800635c:	ee36 6a86 	vadd.f32	s12, s13, s12
 8006360:	ee60 3a07 	vmul.f32	s7, s0, s14
 8006364:	ee27 7a01 	vmul.f32	s14, s14, s2
 8006368:	ee33 3a24 	vadd.f32	s6, s6, s9
 800636c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006370:	ee74 2a22 	vadd.f32	s5, s8, s5
 8006374:	ee60 4a27 	vmul.f32	s9, s0, s15
 8006378:	ee22 4a27 	vmul.f32	s8, s4, s15
 800637c:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006380:	ed13 2a01 	vldr	s4, [r3, #-4]
 8006384:	ee21 5a27 	vmul.f32	s10, s2, s15
 8006388:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800638c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006390:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006394:	ee34 4a22 	vadd.f32	s8, s8, s5
 8006398:	ee60 5a20 	vmul.f32	s11, s0, s1
 800639c:	ee21 3a20 	vmul.f32	s6, s2, s1
 80063a0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80063a4:	ee21 7aa0 	vmul.f32	s14, s3, s1
 80063a8:	ee20 6a82 	vmul.f32	s12, s1, s4
 80063ac:	3901      	subs	r1, #1
 80063ae:	f1a2 0210 	sub.w	r2, r2, #16
 80063b2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80063b6:	ee73 4a24 	vadd.f32	s9, s6, s9
 80063ba:	ee37 5a05 	vadd.f32	s10, s14, s10
 80063be:	ee36 6a27 	vadd.f32	s12, s12, s15
 80063c2:	f103 0310 	add.w	r3, r3, #16
 80063c6:	d1a9      	bne.n	800631c <arm_conv_f32+0x180>
 80063c8:	eb0a 030c 	add.w	r3, sl, ip
 80063cc:	2e00      	cmp	r6, #0
 80063ce:	d042      	beq.n	8006456 <arm_conv_f32+0x2ba>
 80063d0:	edde 7a00 	vldr	s15, [lr]
 80063d4:	ed93 4a00 	vldr	s8, [r3]
 80063d8:	ee61 6a27 	vmul.f32	s13, s2, s15
 80063dc:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80063e0:	ee22 7a27 	vmul.f32	s14, s4, s15
 80063e4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80063e8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80063ec:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80063f0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80063f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80063f8:	eb09 030c 	add.w	r3, r9, ip
 80063fc:	b35c      	cbz	r4, 8006456 <arm_conv_f32+0x2ba>
 80063fe:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8006402:	edd3 6a00 	vldr	s13, [r3]
 8006406:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800640a:	ee22 3a27 	vmul.f32	s6, s4, s15
 800640e:	ee67 3a84 	vmul.f32	s7, s15, s8
 8006412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006416:	2c01      	cmp	r4, #1
 8006418:	ee75 5a87 	vadd.f32	s11, s11, s14
 800641c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006420:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006424:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006428:	eb00 030c 	add.w	r3, r0, ip
 800642c:	d013      	beq.n	8006456 <arm_conv_f32+0x2ba>
 800642e:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8006432:	edd3 3a00 	vldr	s7, [r3]
 8006436:	ee62 7a07 	vmul.f32	s15, s4, s14
 800643a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800643e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8006442:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006446:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800644a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800644e:	ee35 5a26 	vadd.f32	s10, s10, s13
 8006452:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006456:	45ab      	cmp	fp, r5
 8006458:	ed45 5a04 	vstr	s11, [r5, #-16]
 800645c:	ed45 4a03 	vstr	s9, [r5, #-12]
 8006460:	ed05 5a02 	vstr	s10, [r5, #-8]
 8006464:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006468:	f10c 0c10 	add.w	ip, ip, #16
 800646c:	f105 0310 	add.w	r3, r5, #16
 8006470:	f000 809e 	beq.w	80065b0 <arm_conv_f32+0x414>
 8006474:	461d      	mov	r5, r3
 8006476:	e740      	b.n	80062fa <arm_conv_f32+0x15e>
 8006478:	9a01      	ldr	r2, [sp, #4]
 800647a:	46ac      	mov	ip, r5
 800647c:	2a00      	cmp	r2, #0
 800647e:	d037      	beq.n	80064f0 <arm_conv_f32+0x354>
 8006480:	9a01      	ldr	r2, [sp, #4]
 8006482:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8006490 <arm_conv_f32+0x2f4>
 8006486:	0096      	lsls	r6, r2, #2
 8006488:	eb05 0c06 	add.w	ip, r5, r6
 800648c:	4604      	mov	r4, r0
 800648e:	e021      	b.n	80064d4 <arm_conv_f32+0x338>
 8006490:	00000000 	.word	0x00000000
 8006494:	edd7 7a00 	vldr	s15, [r7]
 8006498:	ecb2 7a01 	vldmia	r2!, {s14}
 800649c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064a0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80064a4:	b189      	cbz	r1, 80064ca <arm_conv_f32+0x32e>
 80064a6:	ed17 7a01 	vldr	s14, [r7, #-4]
 80064aa:	edd4 6a01 	vldr	s13, [r4, #4]
 80064ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064b8:	d007      	beq.n	80064ca <arm_conv_f32+0x32e>
 80064ba:	ed94 7a02 	vldr	s14, [r4, #8]
 80064be:	ed57 6a02 	vldr	s13, [r7, #-8]
 80064c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80064c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064ca:	ece5 7a01 	vstmia	r5!, {s15}
 80064ce:	4565      	cmp	r5, ip
 80064d0:	4614      	mov	r4, r2
 80064d2:	d00a      	beq.n	80064ea <arm_conv_f32+0x34e>
 80064d4:	4622      	mov	r2, r4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1dc      	bne.n	8006494 <arm_conv_f32+0x2f8>
 80064da:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8006490 <arm_conv_f32+0x2f4>
 80064de:	ece5 7a01 	vstmia	r5!, {s15}
 80064e2:	1d22      	adds	r2, r4, #4
 80064e4:	4565      	cmp	r5, ip
 80064e6:	4614      	mov	r4, r2
 80064e8:	d1f4      	bne.n	80064d4 <arm_conv_f32+0x338>
 80064ea:	4430      	add	r0, r6
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d059      	beq.n	80065a4 <arm_conv_f32+0x408>
 80064f0:	088d      	lsrs	r5, r1, #2
 80064f2:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8006490 <arm_conv_f32+0x2f4>
 80064f6:	d058      	beq.n	80065aa <arm_conv_f32+0x40e>
 80064f8:	f100 0210 	add.w	r2, r0, #16
 80064fc:	f1a7 0310 	sub.w	r3, r7, #16
 8006500:	462c      	mov	r4, r5
 8006502:	ed52 6a04 	vldr	s13, [r2, #-16]
 8006506:	edd3 3a04 	vldr	s7, [r3, #16]
 800650a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800650e:	ed93 4a03 	vldr	s8, [r3, #12]
 8006512:	ed52 7a02 	vldr	s15, [r2, #-8]
 8006516:	edd3 4a02 	vldr	s9, [r3, #8]
 800651a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800651e:	ed93 5a01 	vldr	s10, [r3, #4]
 8006522:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006526:	ee27 7a04 	vmul.f32	s14, s14, s8
 800652a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800652e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8006532:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006536:	ee66 6a05 	vmul.f32	s13, s12, s10
 800653a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800653e:	3c01      	subs	r4, #1
 8006540:	f102 0210 	add.w	r2, r2, #16
 8006544:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8006548:	f1a3 0310 	sub.w	r3, r3, #16
 800654c:	d1d9      	bne.n	8006502 <arm_conv_f32+0x366>
 800654e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8006552:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8006556:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800655a:	f011 0203 	ands.w	r2, r1, #3
 800655e:	d01b      	beq.n	8006598 <arm_conv_f32+0x3fc>
 8006560:	edd3 7a00 	vldr	s15, [r3]
 8006564:	ed95 7a00 	vldr	s14, [r5]
 8006568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800656c:	3a01      	subs	r2, #1
 800656e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006572:	d011      	beq.n	8006598 <arm_conv_f32+0x3fc>
 8006574:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006578:	ed95 7a01 	vldr	s14, [r5, #4]
 800657c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006580:	2a01      	cmp	r2, #1
 8006582:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006586:	d007      	beq.n	8006598 <arm_conv_f32+0x3fc>
 8006588:	edd5 7a02 	vldr	s15, [r5, #8]
 800658c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8006590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006594:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006598:	3901      	subs	r1, #1
 800659a:	ecec 5a01 	vstmia	ip!, {s11}
 800659e:	f100 0004 	add.w	r0, r0, #4
 80065a2:	d1a5      	bne.n	80064f0 <arm_conv_f32+0x354>
 80065a4:	b00b      	add	sp, #44	; 0x2c
 80065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	463b      	mov	r3, r7
 80065ac:	4605      	mov	r5, r0
 80065ae:	e7d4      	b.n	800655a <arm_conv_f32+0x3be>
 80065b0:	9b02      	ldr	r3, [sp, #8]
 80065b2:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	9302      	str	r3, [sp, #8]
 80065ba:	9b03      	ldr	r3, [sp, #12]
 80065bc:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 80065c0:	4403      	add	r3, r0
 80065c2:	465d      	mov	r5, fp
 80065c4:	469e      	mov	lr, r3
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	f013 0c03 	ands.w	ip, r3, #3
 80065cc:	d075      	beq.n	80066ba <arm_conv_f32+0x51e>
 80065ce:	9b02      	ldr	r3, [sp, #8]
 80065d0:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 80065d4:	f004 0403 	and.w	r4, r4, #3
 80065d8:	f104 3bff 	add.w	fp, r4, #4294967295
 80065dc:	f103 0801 	add.w	r8, r3, #1
 80065e0:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80065e4:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80065e8:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80065ec:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80065f0:	f1a7 0210 	sub.w	r2, r7, #16
 80065f4:	4618      	mov	r0, r3
 80065f6:	465b      	mov	r3, fp
 80065f8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80065fc:	468b      	mov	fp, r1
 80065fe:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8006602:	4621      	mov	r1, r4
 8006604:	4617      	mov	r7, r2
 8006606:	461c      	mov	r4, r3
 8006608:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8006490 <arm_conv_f32+0x2f4>
 800660c:	f10e 0210 	add.w	r2, lr, #16
 8006610:	463b      	mov	r3, r7
 8006612:	4656      	mov	r6, sl
 8006614:	ed12 7a04 	vldr	s14, [r2, #-16]
 8006618:	edd3 3a04 	vldr	s7, [r3, #16]
 800661c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006620:	ed93 4a03 	vldr	s8, [r3, #12]
 8006624:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006628:	edd3 4a02 	vldr	s9, [r3, #8]
 800662c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006630:	ed93 5a01 	vldr	s10, [r3, #4]
 8006634:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006638:	ee26 6a04 	vmul.f32	s12, s12, s8
 800663c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006640:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8006644:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006648:	ee65 6a85 	vmul.f32	s13, s11, s10
 800664c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006650:	3e01      	subs	r6, #1
 8006652:	f102 0210 	add.w	r2, r2, #16
 8006656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800665a:	f1a3 0310 	sub.w	r3, r3, #16
 800665e:	d1d9      	bne.n	8006614 <arm_conv_f32+0x478>
 8006660:	4486      	add	lr, r0
 8006662:	b1d1      	cbz	r1, 800669a <arm_conv_f32+0x4fe>
 8006664:	ed99 7a00 	vldr	s14, [r9]
 8006668:	edde 6a00 	vldr	s13, [lr]
 800666c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006674:	b18c      	cbz	r4, 800669a <arm_conv_f32+0x4fe>
 8006676:	ed19 7a01 	vldr	s14, [r9, #-4]
 800667a:	edde 6a01 	vldr	s13, [lr, #4]
 800667e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006682:	2c01      	cmp	r4, #1
 8006684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006688:	d007      	beq.n	800669a <arm_conv_f32+0x4fe>
 800668a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800668e:	ed59 6a02 	vldr	s13, [r9, #-8]
 8006692:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800669a:	ece5 7a01 	vstmia	r5!, {s15}
 800669e:	4565      	cmp	r5, ip
 80066a0:	46c6      	mov	lr, r8
 80066a2:	f108 0804 	add.w	r8, r8, #4
 80066a6:	d1af      	bne.n	8006608 <arm_conv_f32+0x46c>
 80066a8:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 80066ac:	4659      	mov	r1, fp
 80066ae:	9b01      	ldr	r3, [sp, #4]
 80066b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80066b4:	e71c      	b.n	80064f0 <arm_conv_f32+0x354>
 80066b6:	4686      	mov	lr, r0
 80066b8:	e785      	b.n	80065c6 <arm_conv_f32+0x42a>
 80066ba:	46ac      	mov	ip, r5
 80066bc:	e7f7      	b.n	80066ae <arm_conv_f32+0x512>
 80066be:	9a01      	ldr	r2, [sp, #4]
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	f47f aedd 	bne.w	8006480 <arm_conv_f32+0x2e4>
 80066c6:	e76d      	b.n	80065a4 <arm_conv_f32+0x408>
 80066c8:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8006490 <arm_conv_f32+0x2f4>
 80066cc:	4680      	mov	r8, r0
 80066ce:	e5e3      	b.n	8006298 <arm_conv_f32+0xfc>

080066d0 <memset>:
 80066d0:	4402      	add	r2, r0
 80066d2:	4603      	mov	r3, r0
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d100      	bne.n	80066da <memset+0xa>
 80066d8:	4770      	bx	lr
 80066da:	f803 1b01 	strb.w	r1, [r3], #1
 80066de:	e7f9      	b.n	80066d4 <memset+0x4>

080066e0 <__libc_init_array>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	4d0d      	ldr	r5, [pc, #52]	; (8006718 <__libc_init_array+0x38>)
 80066e4:	4c0d      	ldr	r4, [pc, #52]	; (800671c <__libc_init_array+0x3c>)
 80066e6:	1b64      	subs	r4, r4, r5
 80066e8:	10a4      	asrs	r4, r4, #2
 80066ea:	2600      	movs	r6, #0
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	d109      	bne.n	8006704 <__libc_init_array+0x24>
 80066f0:	4d0b      	ldr	r5, [pc, #44]	; (8006720 <__libc_init_array+0x40>)
 80066f2:	4c0c      	ldr	r4, [pc, #48]	; (8006724 <__libc_init_array+0x44>)
 80066f4:	f000 f818 	bl	8006728 <_init>
 80066f8:	1b64      	subs	r4, r4, r5
 80066fa:	10a4      	asrs	r4, r4, #2
 80066fc:	2600      	movs	r6, #0
 80066fe:	42a6      	cmp	r6, r4
 8006700:	d105      	bne.n	800670e <__libc_init_array+0x2e>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	f855 3b04 	ldr.w	r3, [r5], #4
 8006708:	4798      	blx	r3
 800670a:	3601      	adds	r6, #1
 800670c:	e7ee      	b.n	80066ec <__libc_init_array+0xc>
 800670e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006712:	4798      	blx	r3
 8006714:	3601      	adds	r6, #1
 8006716:	e7f2      	b.n	80066fe <__libc_init_array+0x1e>
 8006718:	08006790 	.word	0x08006790
 800671c:	08006790 	.word	0x08006790
 8006720:	08006790 	.word	0x08006790
 8006724:	08006794 	.word	0x08006794

08006728 <_init>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr

08006734 <_fini>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	bf00      	nop
 8006738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673a:	bc08      	pop	{r3}
 800673c:	469e      	mov	lr, r3
 800673e:	4770      	bx	lr
